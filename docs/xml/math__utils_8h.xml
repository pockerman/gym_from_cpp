<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="math__utils_8h" kind="file" language="C++">
    <compoundname>math_utils.h</compoundname>
    <includes refid="rlenvs__types__v2_8h" local="yes">rlenvs/rlenvs_types_v2.h</includes>
    <includedby refid="diff__drive__dynamics_8cpp" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/diff_drive_dynamics.cpp</includedby>
    <includedby refid="quadrotor__dynamics_8cpp" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/quadrotor_dynamics.cpp</includedby>
    <includedby refid="generic__line_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/geometry/generic_line.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="3">
        <label>rlenvs/rlenvscpp_config.h</label>
        <link refid="rlenvscpp__config_8h_source"/>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="2">
        <label>rlenvs/rlenvs_types_v2.h</label>
        <link refid="rlenvs__types__v2_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/trajectory/line_segment_link.h</label>
        <link refid="line__segment__link_8h_source"/>
      </node>
      <node id="2">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/geometry/generic_line.h</label>
        <link refid="generic__line_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacerlenvscpp">rlenvscpp</innernamespace>
    <innernamespace refid="namespacerlenvscpp_1_1utils">rlenvscpp::utils</innernamespace>
    <innernamespace refid="namespacerlenvscpp_1_1utils_1_1maths">rlenvscpp::utils::maths</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;rlenvs/rlenvs_types_v2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerlenvscpp" kindref="compound">rlenvscpp</ref>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">maths{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="10"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="namespacerlenvscpp_1a3f587743c65d9a1404e3f46d36d86927" kindref="member">int_t</ref><sp/>sign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>expr){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expr<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="namespacerlenvscpp_1a3f587743c65d9a1404e3f46d36d86927" kindref="member">int_t</ref><sp/>sign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>expr2){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sign(expr1*expr2);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">T<sp/>sum_sqr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynVec&lt;T&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sum_<sp/>=<sp/>T(0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i&lt;vec.size();<sp/>++i){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_<sp/>+=<sp/>vec[i]<sp/>*<sp/>vec[i];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum_;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">T<sp/>sqr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v*v;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/math_utils.h"/>
  </compounddef>
</doxygen>
