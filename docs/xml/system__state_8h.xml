<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="system__state_8h" kind="file" language="C++">
    <compoundname>system_state.h</compoundname>
    <includes refid="rlenvs__types__v2_8h" local="yes">rlenvs/rlenvs_types_v2.h</includes>
    <includes local="no">string</includes>
    <includes local="no">array</includes>
    <includes local="no">utility</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <includes local="no">ostream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">iomanip</includes>
    <includedby refid="bicycle__vehicle__model__dynamics_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/bicycle_vehicle_model_dynamics.h</includedby>
    <includedby refid="diff__drive__dynamics_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/diff_drive_dynamics.h</includedby>
    <includedby refid="quadrotor__dynamics_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/quadrotor_dynamics.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>iomanip</label>
      </node>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h</label>
        <link refid="system__state_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="3">
        <label>rlenvs/rlenvscpp_config.h</label>
        <link refid="rlenvscpp__config_8h_source"/>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="2">
        <label>rlenvs/rlenvs_types_v2.h</label>
        <link refid="rlenvs__types__v2_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h</label>
        <link refid="system__state_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/quadrotor_dynamics.h</label>
        <link refid="quadrotor__dynamics_8h_source"/>
      </node>
      <node id="3">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/diff_drive_dynamics.h</label>
        <link refid="diff__drive__dynamics_8h_source"/>
      </node>
      <node id="2">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/bicycle_vehicle_model_dynamics.h</label>
        <link refid="bicycle__vehicle__model__dynamics_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classrlenvscpp_1_1dynamics_1_1SysState" prot="public">rlenvscpp::dynamics::SysState</innerclass>
    <innernamespace refid="namespacerlenvscpp">rlenvscpp</innernamespace>
    <innernamespace refid="namespacerlenvscpp_1_1dynamics">rlenvscpp::dynamics</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SYSTEM_STATE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYSTEM_STATE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rlenvs/rlenvs_types_v2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::setprecision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerlenvscpp" kindref="compound">rlenvscpp</ref>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dynamics{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="22" refid="classrlenvscpp_1_1dynamics_1_1SysState" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classrlenvscpp_1_1dynamics_1_1SysState_1af5a98e3389e307cdc2e6da5bb23b2dcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1af5a98e3389e307cdc2e6da5bb23b2dcf" kindref="member">dimension</ref><sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90e13b369b78fea5f9acd25fa3708b29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::array&lt;std::pair&lt;std::string,<sp/>real_t&gt;,<sp/>dim&gt;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90e13b369b78fea5f9acd25fa3708b29" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim2&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a465b91919dd1c303770e3948bb6dca0b" kindref="member">extract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;dim1&gt;</ref>&amp;<sp/>state,<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;dim2&gt;</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" kindref="member">SysState</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" kindref="member">SysState</ref>(std::array&lt;std::pair&lt;std::string,<sp/>real_t&gt;,<sp/>dim&gt;&amp;&amp;<sp/>values);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" kindref="member">SysState</ref>(std::array&lt;std::string,<sp/>dim&gt;&amp;&amp;<sp/>names,<sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" kindref="member">SysState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;dim&gt;</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other_dim&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" kindref="member">SysState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;other_dim&gt;</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1ad238b6c24ef7771ab3f3cb0e65edb3de" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;dim&gt;</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" kindref="member">SysState</ref>(<ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;&amp;<sp/>other);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1ad238b6c24ef7771ab3f3cb0e65edb3de" kindref="member">operator=</ref>(<ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;&amp;<sp/>other);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1abdfd1324c71e3ad9b9fa66db9a892bda" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynVec&lt;real_t&gt;&amp;<sp/>vec);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a7effe92048aacf541c5427413714f0ad" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynVec&lt;real_t&gt;&amp;<sp/>vec);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a37c3ec25b9e992e82251bad2a345a8f7" kindref="member">operator*=</ref>(<ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a6ed1a278efdbba35835c1ae30cbcd4f8" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>DynVec&lt;real_t&gt;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a688071c902abf1cc861bfdd6f683027b" kindref="member">as_vector</ref>()</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1d122c8cd8fccf081de7da3cef3cfaa" kindref="member">set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1d122c8cd8fccf081de7da3cef3cfaa" kindref="member">set</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>value);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1a85652b4c5155d88f472f2c03dacb83" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DynVec&lt;real_t&gt;&amp;<sp/>container);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1a85652b4c5155d88f472f2c03dacb83" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;real_t&gt;&amp;<sp/>container);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1de050a473af719b0c0e6c948c403ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1de050a473af719b0c0e6c948c403ed" kindref="member">size</ref>()</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dim;}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;real_t,<sp/>dim&gt;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a47ce9c603739c7c1402b1e2f86ae29c8" kindref="member">get_values</ref>()</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string_view&gt;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a3acb2c34b2aa1288e03630b9c0c0a894" kindref="member">get_names</ref>()</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a086f268bb6d17850fda4777b26ef028c" kindref="member">operator[]</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a086f268bb6d17850fda4777b26ef028c" kindref="member">operator[]</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref>)</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a92ff17381d28194efb68058aaecf8331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a92ff17381d28194efb68058aaecf8331" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" kindref="member">operator()</ref>(name);}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a5af9187eca28fb2423d0c49671f23793" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a5af9187eca28fb2423d0c49671f23793" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" kindref="member">operator()</ref>(name);}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a06fc915ceb12ed73bcc238abbf722ef9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a06fc915ceb12ed73bcc238abbf722ef9" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>name){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(std::string(name));}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a520073408e159029d2b44b6456dd353d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a520073408e159029d2b44b6456dd353d" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>name)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(std::string(name));}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a24470f3566b8325326a5eefe461a6794" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a602703851f860a795a831e4b9b656623" kindref="member">print</ref>(std::ostream&amp;<sp/>out)</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1aec8ea05f13cf6caf8583fc3363d25178" kindref="member">as_string</ref>()</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1b31be679959735b0ed1f409149aac71" kindref="member">scale</ref>(<ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1d122c8cd8fccf081de7da3cef3cfaa" kindref="member">set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>container);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//template&lt;typename<sp/>Container&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Container<sp/>get_values_view(uint_t<sp/>start,<sp/>uint_t<sp/>end)const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;std::pair&lt;std::string,<sp/>real_t&gt;,<sp/>dim&gt;<sp/>values_;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim2&gt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a465b91919dd1c303770e3948bb6dca0b" refkind="member"><highlight class="normal"><ref refid="classrlenvscpp_1_1dynamics_1_1SysState_1a465b91919dd1c303770e3948bb6dca0b" kindref="member">SysState&lt;dim&gt;::extract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;dim1&gt;</ref>&amp;<sp/>state,<sp/><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState&lt;dim2&gt;</ref>&amp;<sp/>other){</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert<sp/>(dim2<sp/>&lt;=<sp/>dim1,<sp/>&quot;Invalid<sp/>dimension<sp/>dim2<sp/>&gt;<sp/>dim1</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(auto&amp;<sp/>name:other.get_names()){</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>value<sp/>=<sp/>state(name);</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.set(std::string(name),<sp/>value);</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="246" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::SysState()</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/>values_()</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::for_each(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>item){</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.first=<sp/>&quot;</highlight><highlight class="normal">NO<sp/>NAME</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.second<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="259" refid="classrlenvscpp_1_1dynamics_1_1SysState_1aeb44588fdc15198affe178d7ebef3111" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::SysState(std::array&lt;std::pair&lt;std::string,<sp/>real_t&gt;,<sp/>dim&gt;&amp;&amp;<sp/>values)</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>values_(values)</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral">{}</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="265" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1768ec97bb468141d6ada1e68e2c2d74" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::SysState(std::array&lt;std::string,<sp/>dim&gt;&amp;&amp;<sp/>names,<sp/>real_t<sp/>val)</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/>values_()</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;dim;<sp/>++i){</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_[i]<sp/>=<sp/>std::pair(names[i],<sp/>val);</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="275" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a364dfc0b6e5aa41399d1c980a178f8e9" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::SysState(const<sp/>SysState&lt;dim&gt;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>values_(other.values_)</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral">{}</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral">template&lt;int<sp/>other_dim&gt;</highlight></codeline>
<codeline lineno="282" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a9495de450e552da023b82f9ea8c07e3d" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::SysState(const<sp/>SysState&lt;other_dim&gt;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>values_()</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>static_assert<sp/>(dim<sp/>&lt;=<sp/>other_dim,<sp/>&quot;</highlight><highlight class="normal">Invalid<sp/>dimension:<sp/>dim<sp/>&lt;<sp/>other_dim</highlight><highlight class="stringliteral">&quot;<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>names<sp/>=<sp/>other.get_names();</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>values<sp/>=<sp/>other.get_values();</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;dim;<sp/>++i){</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_[i]<sp/>=<sp/>std::make_pair(names[i],<sp/>values[i]);</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral">SysState&lt;dim&gt;&amp;</highlight></codeline>
<codeline lineno="298" refid="classrlenvscpp_1_1dynamics_1_1SysState_1ad238b6c24ef7771ab3f3cb0e65edb3de" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator=(const<sp/>SysState&lt;dim&gt;&amp;<sp/>other){</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(this<sp/>==<sp/>&amp;other){</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this-&gt;values_<sp/>=<sp/>other.values_;</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="309" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a3d9cd6d88bca75a0325b55dc0fd1ed62" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::SysState(SysState&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>values_(other.values_)</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>other.clear();</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral">SysState&lt;dim&gt;&amp;</highlight></codeline>
<codeline lineno="318" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a86cb84ea82f4f8640b7e128d119f4112" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator=(SysState&amp;&amp;<sp/>other){</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(this<sp/>==<sp/>&amp;other){</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this-&gt;values_<sp/>=<sp/>other.values_;</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>other.clear();</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral">SysState&lt;dim&gt;&amp;</highlight></codeline>
<codeline lineno="331" refid="classrlenvscpp_1_1dynamics_1_1SysState_1abdfd1324c71e3ad9b9fa66db9a892bda" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator+=(const<sp/>DynVec&lt;real_t&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>add(vec);</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral">SysState&lt;dim&gt;&amp;</highlight></codeline>
<codeline lineno="338" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a7effe92048aacf541c5427413714f0ad" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator-=(const<sp/>DynVec&lt;real_t&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>add(-1.0*vec);</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">SysState&lt;dim&gt;&amp;</highlight></codeline>
<codeline lineno="345" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a37c3ec25b9e992e82251bad2a345a8f7" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator*=(real_t<sp/>val){</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>scale(val);</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="352" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1b31be679959735b0ed1f409149aac71" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::scale(real_t<sp/>val){</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::for_each(values_.begin(),</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_.end(),</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](auto&amp;<sp/>item){</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.second<sp/>*=<sp/>val;</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral">real_t</highlight></codeline>
<codeline lineno="362" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a6ed1a278efdbba35835c1ae30cbcd4f8" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::get(const<sp/>std::string&amp;<sp/>name)const{</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>std::find_if(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>item){</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>item.first<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(itr<sp/>==<sp/>values_.end()){</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>error_msg(&quot;</highlight><highlight class="normal">Invalid<sp/>variable<sp/>name.<sp/>Name<sp/></highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>names<sp/>=<sp/>get_names();</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name_strs(&quot;</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto&amp;<sp/>name:names){</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(name);</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">]</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::invalid_argument(error_msg<sp/>+<sp/></highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name+</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(&quot;</highlight><highlight class="normal"><sp/>not<sp/>in:<sp/></highlight><highlight class="stringliteral">&quot;)+<sp/>name_strs);</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral">DynVec&lt;real_t&gt;</highlight></codeline>
<codeline lineno="391" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a688071c902abf1cc861bfdd6f683027b" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::as_vector()const{</highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DynVec&lt;real_t&gt;<sp/>vec(dim,<sp/>0.0);</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>v=0;<sp/>v&lt;values_.size();<sp/>++v){</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec[v]<sp/>=<sp/>values_[v].second;</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>vec;</highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="404" refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1d122c8cd8fccf081de7da3cef3cfaa" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::set(const<sp/>std::string&amp;<sp/>name,<sp/>real_t<sp/>val){</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>std::find_if(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>item){</highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>item.first<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="409"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="410"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="411"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(itr<sp/>==<sp/>values_.end()){</highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>error_msg(&quot;</highlight><highlight class="normal">Invalid<sp/>variable<sp/>name.<sp/>Name<sp/></highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>names<sp/>=<sp/>get_names();</highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name_strs(&quot;</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto&amp;<sp/>name:names){</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(name);</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">]</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::invalid_argument(error_msg<sp/>+<sp/></highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name+</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(&quot;</highlight><highlight class="normal"><sp/>not<sp/>in:<sp/></highlight><highlight class="stringliteral">&quot;)+<sp/>name_strs);</highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>itr-&gt;second<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral">template&lt;typename<sp/>Container&gt;</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="433" refid="classrlenvscpp_1_1dynamics_1_1SysState_1ad33269ed730db88b17808bbad1eabc79" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::set(const<sp/>Container&amp;<sp/>container){</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(container.size()<sp/>!=<sp/>dim){</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::invalid_argument(&quot;</highlight><highlight class="normal">Container<sp/>has<sp/>incorrect<sp/>size:<sp/></highlight><highlight class="stringliteral">&quot;+</highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(container.size())<sp/>+</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>not<sp/>equal<sp/>to<sp/></highlight><highlight class="stringliteral">&quot;+</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(dim));</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uint<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::for_each(values_.begin(),</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_.end(),</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](auto&amp;<sp/>arg){arg.second<sp/>=<sp/>container[counter++];});</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="450" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a77793791e6876821131ed212f86a40e6" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::set(uint_t<sp/>i,<sp/>const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>value){</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>values_[i]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="452"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral">real_t&amp;</highlight></codeline>
<codeline lineno="456" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a086f268bb6d17850fda4777b26ef028c" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator[](uint_t<sp/>i){</highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>values_[i].second;</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral">const<sp/>real_t&amp;</highlight></codeline>
<codeline lineno="462" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a724a2364a7d50c56ba676266c2d1ffe4" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator[](uint_t<sp/>i)const{</highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>values_[i].second;</highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral">real_t&amp;</highlight></codeline>
<codeline lineno="468" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator()(const<sp/>std::string&amp;<sp/>name){</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>std::find_if(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>item){</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>item.first<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(itr<sp/>==<sp/>values_.end()){</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>error_msg(&quot;</highlight><highlight class="normal">Invalid<sp/>variable<sp/>name.<sp/>Name<sp/></highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>names<sp/>=<sp/>get_names();</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name_strs(&quot;</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto&amp;<sp/>name:names){</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(name);</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">]</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::invalid_argument(error_msg<sp/>+<sp/></highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name+</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(&quot;</highlight><highlight class="normal"><sp/>not<sp/>in:<sp/></highlight><highlight class="stringliteral">&quot;)+<sp/>name_strs);</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="495"><highlight class="stringliteral">const<sp/>real_t&amp;</highlight></codeline>
<codeline lineno="496" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a30948e7b6489d1decff8ee8efb65ad01" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::operator()(const<sp/>std::string&amp;<sp/>name)const{</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>std::find_if(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>item){</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>item.first<sp/>==<sp/>name;</highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"><sp/><sp/><sp/>if(itr<sp/>==<sp/>values_.end()){</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>error_msg(&quot;</highlight><highlight class="normal">Invalid<sp/>variable<sp/>name.<sp/>Name<sp/></highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>names<sp/>=<sp/>get_names();</highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name_strs(&quot;</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="507"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(auto&amp;<sp/>name:names){</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(name);</highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_strs<sp/>+=<sp/>std::string(&quot;</highlight><highlight class="normal">]</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::invalid_argument(error_msg<sp/>+<sp/></highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name+</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(&quot;</highlight><highlight class="normal"><sp/>not<sp/>in:<sp/></highlight><highlight class="stringliteral">&quot;)+<sp/>name_strs);</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="524" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a24470f3566b8325326a5eefe461a6794" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::clear(){</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::for_each(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>item){</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.second<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral">const<sp/>std::array&lt;real_t,<sp/>dim&gt;</highlight></codeline>
<codeline lineno="534" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a47ce9c603739c7c1402b1e2f86ae29c8" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::get_values()const{</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::array&lt;real_t,<sp/>dim&gt;<sp/>copy;</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;dim;<sp/>++i){</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy[i]<sp/>=<sp/>values_[i].second;</highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>copy;</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral">const<sp/>std::vector&lt;std::string_view&gt;</highlight></codeline>
<codeline lineno="547" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a3acb2c34b2aa1288e03630b9c0c0a894" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::get_names()const{</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>copy(dim);</highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;dim;<sp/>++i){</highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy[i]<sp/>=<sp/>values_[i].first;</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="555"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>copy;</highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="557"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral">std::ostream&amp;</highlight></codeline>
<codeline lineno="561" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a602703851f860a795a831e4b9b656623" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::print(std::ostream&amp;<sp/>out)const{</highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>out&lt;&lt;std::fixed<sp/>&lt;&lt;<sp/>std::setprecision(4);</highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::for_each(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>vals){</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out&lt;&lt;vals.first&lt;&lt;&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;&lt;&lt;vals.second&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>out;</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral">const<sp/>std::string</highlight></codeline>
<codeline lineno="575" refid="classrlenvscpp_1_1dynamics_1_1SysState_1aec8ea05f13cf6caf8583fc3363d25178" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::as_string()const{</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::for_each(values_.begin(),<sp/>values_.end(),</highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](const<sp/>std::pair&lt;std::string,<sp/>real_t&gt;&amp;<sp/>vals){</highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>vals.first;</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="583"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::to_string(vals.second);</highlight></codeline>
<codeline lineno="584"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="585"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="586"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="588"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="589"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="590"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="593" refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1a85652b4c5155d88f472f2c03dacb83" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::add(const<sp/>DynVec&lt;real_t&gt;&amp;<sp/>container){</highlight></codeline>
<codeline lineno="594"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(container.size()<sp/>!=<sp/>dim){</highlight></codeline>
<codeline lineno="595"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::logic_error(&quot;</highlight><highlight class="normal">Invalid<sp/>container<sp/>size<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>update.<sp/></highlight><highlight class="stringliteral">&quot;+</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(container.size())+</highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>should<sp/>be</highlight><highlight class="stringliteral">&quot;+</highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(dim));</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="601"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;dim;<sp/>++i){</highlight></codeline>
<codeline lineno="602"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_[i].second<sp/>+=<sp/>container[i];</highlight></codeline>
<codeline lineno="603"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="605"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral">void</highlight></codeline>
<codeline lineno="608" refid="classrlenvscpp_1_1dynamics_1_1SysState_1af2d13ee3547111134ad30d43903ac9d1" refkind="member"><highlight class="stringliteral">SysState&lt;dim&gt;::add(const<sp/>std::vector&lt;real_t&gt;&amp;<sp/>container){</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if(container.size()<sp/>!=<sp/>dim){</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::logic_error(&quot;</highlight><highlight class="normal">Invalid<sp/>container<sp/>size<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>update.<sp/></highlight><highlight class="stringliteral">&quot;+</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(container.size())+</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>should<sp/>be</highlight><highlight class="stringliteral">&quot;+</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(dim));</highlight></codeline>
<codeline lineno="614"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;dim;<sp/>++i){</highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_[i].second<sp/>+=<sp/>container[i];</highlight></codeline>
<codeline lineno="618"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="620"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="621"><highlight class="stringliteral">template&lt;int<sp/>dim&gt;</highlight></codeline>
<codeline lineno="622"><highlight class="stringliteral">inline</highlight></codeline>
<codeline lineno="623"><highlight class="stringliteral">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/>const<sp/>SysState&lt;dim&gt;&amp;<sp/>state){</highlight></codeline>
<codeline lineno="624"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>state.print(out);</highlight></codeline>
<codeline lineno="625"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="626"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="627"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="628"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="629"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="630"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="631"><highlight class="stringliteral">#endif<sp/>//<sp/>SYSTEM_STATE_H</highlight></codeline>
    </programlisting>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h"/>
  </compounddef>
</doxygen>
