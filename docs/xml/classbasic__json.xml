<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classbasic__json" kind="class" language="C++" prot="public">
    <compoundname>basic_json</compoundname>
    <basecompoundref prot="public" virt="non-virtual">nlohmann::detail::json_base_class&lt; void &gt;</basecompoundref>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename U, typename V, typename... Args &gt; class</type>
        <declname>ObjectType</declname>
        <defname>ObjectType</defname>
        <defval>std::map</defval>
      </param>
      <param>
        <type>template&lt; typename U, typename... Args &gt; class</type>
        <declname>ArrayType</declname>
        <defname>ArrayType</defname>
        <defval>std::vector</defval>
      </param>
      <param>
        <type>class StringType</type>
        <defval>std::string</defval>
      </param>
      <param>
        <type>class BooleanType</type>
        <defval>bool</defval>
      </param>
      <param>
        <type>class NumberIntegerType</type>
        <defval>std::int64_t</defval>
      </param>
      <param>
        <type>class NumberUnsignedType</type>
        <defval>std::uint64_t</defval>
      </param>
      <param>
        <type>class NumberFloatType</type>
        <defval>double</defval>
      </param>
      <param>
        <type>template&lt; typename U &gt; class</type>
        <declname>AllocatorType</declname>
        <defname>AllocatorType</defname>
        <defval>std::allocator</defval>
      </param>
      <param>
        <type>template&lt; typename T, typename SFINAE=void &gt; class</type>
        <declname>JSONSerializer</declname>
        <defname>JSONSerializer</defname>
        <defval><ref refid="structadl__serializer" kindref="compound">adl_serializer</ref></defval>
      </param>
      <param>
        <type>class BinaryType</type>
        <defval>std::vector&lt;std::uint8_t&gt;</defval>
      </param>
      <param>
        <type>class CustomBaseClass</type>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>element access</header>
      <description><para>Access to the JSON value. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1a10771c460900f2f8cac0841d48ab3e30" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; <ref refid="classbasic__json_1af12040e0663db54840d73d363979643a" kindref="member">object_comparator_t</ref>, const typename object_t::key_type &amp;, KeyType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_comparable_with_object_key =  detail::is_comparable &lt; object_comparator_t, const typename object_t::key_type&amp;, KeyType &gt;</definition>
        <argsstring></argsstring>
        <name>is_comparable_with_object_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21514" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a96d2f51d8300e987422052ff3f4a4064" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::conditional&lt; <ref refid="structdetail_1_1is__c__string" kindref="compound">detail::is_c_string_uncvref</ref>&lt; ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref>, typename std::decay&lt; ValueType &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value_return_type =  std::conditional &lt; detail::is_c_string_uncvref&lt;ValueType&gt;::value, string_t, typename std::decay&lt;ValueType&gt;::type &gt;</definition>
        <argsstring></argsstring>
        <name>value_return_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21518" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9737aa07030fa0c9e2909d2c5c03f460" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::has_erase_with_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase_internal</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase_internal</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21873" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21873" bodyend="21882"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9737aa07030fa0c9e2909d2c5c03f460" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; !detail::has_erase_with_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase_internal</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase_internal</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21886" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21886" bodyend="21901"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a899e4623fe377af5c9ad14c40c64280c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21241" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21241" bodyend="21260"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af076d8a80f4263cf821da2033d5773b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21264" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21264" bodyend="21283"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1accafaaf23f60bb245ddb1fa0972b33a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21287" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21287" bodyend="21301"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4cd9ba2f2164d9cee83b07f76d40843f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21307" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21307" bodyend="21321"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aba9a21714e81e98fc5786a2339ea1665" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>at</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21325" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21325" bodyend="21339"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7ae6267ca4bd85e25f61dc5ba30204da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>at</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21345" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21345" bodyend="21359"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab4f511db82b9d5eba85d5b2b8e1c6dbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21363" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21363" bodyend="21405"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae369d1565482903c3af75bf99467776b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21409" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21409" bodyend="21418"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9c5825034534bf9256a33d2dd995c25a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(typename object_t::key_type key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>typename object_t::key_type</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21422" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21422" bodyend="21440"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3d3ea17617e94886f3e86ac921095a13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21444" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21444" bodyend="21455"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a87cae3810ae0a9c56b17842b06fc405e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(T *key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21460" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21460" bodyend="21463"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab12a4386e6913012ca4dffa0245fdf99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(T *key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21466" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21466" bodyend="21469"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a06fe1a1c7aa8c193c73aa40b17ee5f68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21475" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21475" bodyend="21493"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2e11a3f2a234cd296b515173b6a3b986" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21499" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21499" bodyend="21510"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; !<ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1af12040e0663db54840d73d363979643a" kindref="member">object_comparator_t</ref> &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21529" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21529" bodyend="21545"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a56244e0ed0943ad62faf61b06e7ba139" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename value_return_type&lt;ValueType&gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; !<ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1af12040e0663db54840d73d363979643a" kindref="member">object_comparator_t</ref> &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ReturnType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21554" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21554" bodyend="21570"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1acbe572bbfbd4687a7a9167465e4d41f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1af12040e0663db54840d73d363979643a" kindref="member">object_comparator_t</ref> &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!<ref refid="structdetail_1_1is__specialization__of" kindref="compound">detail::is_json_pointer</ref>&lt; KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__comparable" kindref="compound">is_comparable_with_object_key</ref>&lt; KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value</definition>
        <argsstring>(KeyType &amp;&amp;key, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21580" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21580" bodyend="21596"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a694398741710ce1c22797ad47109898b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename value_return_type&lt;ValueType&gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1af12040e0663db54840d73d363979643a" kindref="member">object_comparator_t</ref> &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!<ref refid="structdetail_1_1is__specialization__of" kindref="compound">detail::is_json_pointer</ref>&lt; KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__comparable" kindref="compound">is_comparable_with_object_key</ref>&lt; KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ReturnType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value</definition>
        <argsstring>(KeyType &amp;&amp;key, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21607" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21607" bodyend="21623"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac63045992eb552c11f77fefddd801591" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21630" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21630" bodyend="21647"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1ab7b5edf8e5831195940f8d377a6ee3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename value_return_type&lt;ValueType&gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ReturnType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21655" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21655" bodyend="21672"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3b67977cfd161b73161fa9341f8a4158" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, detail::uncvref_t&lt; ValueType &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::JSON_HEDLEY_DEPRECATED_FOR</definition>
        <argsstring>(3.11.0, basic_json::json_pointer or nlohmann::json_pointer&lt; basic_json::string_t &gt;) ValueType value(const</argsstring>
        <name>JSON_HEDLEY_DEPRECATED_FOR</name>
        <param>
          <type>3.11.</type>
          <declname>0</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">basic_json::json_pointer</ref> or nlohmann::json_pointer&lt; <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">basic_json::string_t</ref> &gt;</type>
        </param>
        <briefdescription>
<para>access the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/front/">https://json.nlohmann.me/api/basic_json/front/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21678" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21678" bodyend="21700"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a162089e94f24182ba3e4484be63c0c1a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>access the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/front/">https://json.nlohmann.me/api/basic_json/front/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21704" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21704" bodyend="21707"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0d93dc1dbdf67a6ee3a5cf1d2439ca77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>access the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/back/">https://json.nlohmann.me/api/basic_json/back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21711" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21711" bodyend="21716"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a41eee3066cd1ebfea746f9f07fd03f6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>access the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/back/">https://json.nlohmann.me/api/basic_json/back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21720" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21720" bodyend="21725"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7d0fef086b1b72372113db6ce7446189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase</definition>
        <argsstring>(IteratorType pos)</argsstring>
        <name>erase</name>
        <param>
          <type>IteratorType</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>remove element given an iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21732" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21732" bodyend="21795"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a437b81c6e968a4192a22bc0de6c4df80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>erase</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>remove elements given an iterator range </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21802" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21802" bodyend="21868"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a05da3b93f2d4a7164589abffaa9acb33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON object given a key </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21907" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21907" bodyend="21912"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5f763336e84232f38e2d80e142f9820e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON object given a key </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21918" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21918" bodyend="21921"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac2c58b5f34c2ff56e27630214f5a9df4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::erase</definition>
        <argsstring>(const size_type idx)</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON array given an index </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21925" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21925" bodyend="21941"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>exceptions</header>
      <description><para>Classes to implement user-defined exceptions. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1a4ed57fa411e69ae5741bc2f333a967c9" prot="public" static="no">
        <type><ref refid="classdetail_1_1exception" kindref="compound">detail::exception</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::exception =  detail::exception</definition>
        <argsstring></argsstring>
        <name>exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19491" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a0fe1802a6a2de032f3c4e4f0f555ae10" prot="public" static="no">
        <type><ref refid="classdetail_1_1parse__error" kindref="compound">detail::parse_error</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::parse_error =  detail::parse_error</definition>
        <argsstring></argsstring>
        <name>parse_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19492" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a34b69b2a91df080e00cc8f36c342bb6b" prot="public" static="no">
        <type><ref refid="classdetail_1_1invalid__iterator" kindref="compound">detail::invalid_iterator</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::invalid_iterator =  detail::invalid_iterator</definition>
        <argsstring></argsstring>
        <name>invalid_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19493" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2c52f112e54d1be294055ea9186a1c35" prot="public" static="no">
        <type><ref refid="classdetail_1_1type__error" kindref="compound">detail::type_error</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::type_error =  detail::type_error</definition>
        <argsstring></argsstring>
        <name>type_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19494" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aa45e2d88a6cf9236c1f45a1fad18442d" prot="public" static="no">
        <type><ref refid="classdetail_1_1out__of__range" kindref="compound">detail::out_of_range</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::out_of_range =  detail::out_of_range</definition>
        <argsstring></argsstring>
        <name>out_of_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19495" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1adb2d18607e0835c4695f53996b181379" prot="public" static="no">
        <type><ref refid="classdetail_1_1other__error" kindref="compound">detail::other_error</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::other_error =  detail::other_error</definition>
        <argsstring></argsstring>
        <name>other_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19496" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19496" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>container types</header>
      <description><para>The canonic container types to use <ref refid="classbasic__json" kindref="compound">basic_json</ref> like any other STL container. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1a0d9e6a7acee2992e310ea21a7b59c67a" prot="public" static="no">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value_type =  basic_json</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>the type of elements in a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19510" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" prot="public" static="no">
        <type><ref refid="classbasic__json_1a0d9e6a7acee2992e310ea21a7b59c67a" kindref="member">value_type</ref> &amp;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>the type of an element reference </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19513" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a31370bb451b78198d42c86dd31955deb" prot="public" static="no">
        <type>const <ref refid="classbasic__json_1a0d9e6a7acee2992e310ea21a7b59c67a" kindref="member">value_type</ref> &amp;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::const_reference =  const value_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>the type of an element const reference </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19515" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ae45e8f7ce7c3e62035cd097a39910399" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>a type to represent differences between iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19518" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>a type to represent container sizes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19520" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a83f845db2d54cedad97279bad70aea52" prot="public" static="no">
        <type>AllocatorType&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::allocator_type =  AllocatorType&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
<para>the allocator type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19523" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a84279673ab13fb6360cf17173a29a1f1" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classbasic__json_1a83f845db2d54cedad97279bad70aea52" kindref="member">allocator_type</ref> &gt;::<ref refid="classbasic__json_1a84279673ab13fb6360cf17173a29a1f1" kindref="member">pointer</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::pointer =  typename std::allocator_traits&lt;allocator_type&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>the type of an element pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19526" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2862fa42527f5c14d9f737411e0facd4" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classbasic__json_1a83f845db2d54cedad97279bad70aea52" kindref="member">allocator_type</ref> &gt;::<ref refid="classbasic__json_1a2862fa42527f5c14d9f737411e0facd4" kindref="member">const_pointer</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::const_pointer =  typename std::allocator_traits&lt;allocator_type&gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>the type of an element const pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19528" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" prot="public" static="no">
        <type>iter_impl&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::iterator =  iter_impl&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>an iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19531" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" prot="public" static="no">
        <type>iter_impl&lt; const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::const_iterator =  iter_impl&lt;const basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>a const iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19533" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aedc059cdae078322bb0d434b2127d1cf" prot="public" static="no">
        <type>json_reverse_iterator&lt; typename <ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">basic_json::iterator</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::reverse_iterator =  json_reverse_iterator&lt;typename basic_json::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>a reverse iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19535" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a240f61567d8acffe831532f4f9b379cb" prot="public" static="no">
        <type>json_reverse_iterator&lt; typename <ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">basic_json::const_iterator</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::const_reverse_iterator =  json_reverse_iterator&lt;typename basic_json::const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>a const reverse iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19537" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19537" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON value data types</header>
      <description><para>The data types to store a JSON value. These types are derived from the template arguments passed to class <ref refid="classbasic__json" kindref="compound">basic_json</ref>. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1a991d005e7f648cbf37bb36daf85183ca" prot="public" static="no">
        <type>std::less&lt; StringType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::default_object_comparator_t =  std::less&lt;StringType&gt;</definition>
        <argsstring></argsstring>
        <name>default_object_comparator_t</name>
        <briefdescription>
<para>default object key comparator type The actual object key comparator type (<ref refid="classbasic__json_1af12040e0663db54840d73d363979643a" kindref="member">object_comparator_t</ref>) may be different. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/default_object_comparator_t/">https://json.nlohmann.me/api/basic_json/default_object_comparator_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19631" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" prot="public" static="no">
        <type>ObjectType&lt; StringType, <ref refid="classbasic__json" kindref="compound">basic_json</ref>, <ref refid="classbasic__json_1a991d005e7f648cbf37bb36daf85183ca" kindref="member">default_object_comparator_t</ref>, AllocatorType&lt; std::pair&lt; const StringType, <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt;&gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::object_t =  ObjectType&lt;StringType, basic_json, default_object_comparator_t, AllocatorType&lt;std::pair&lt;const StringType, basic_json&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>object_t</name>
        <briefdescription>
<para>a type for an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/object_t/">https://json.nlohmann.me/api/basic_json/object_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19636" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" prot="public" static="no">
        <type>ArrayType&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, AllocatorType&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::array_t =  ArrayType&lt;basic_json, AllocatorType&lt;basic_json&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>array_t</name>
        <briefdescription>
<para>a type for an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/array_t/">https://json.nlohmann.me/api/basic_json/array_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19644" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" prot="public" static="no">
        <type>StringType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::string_t =  StringType</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
<para>a type for a string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/string_t/">https://json.nlohmann.me/api/basic_json/string_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19648" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" prot="public" static="no">
        <type>BooleanType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::boolean_t =  BooleanType</definition>
        <argsstring></argsstring>
        <name>boolean_t</name>
        <briefdescription>
<para>a type for a boolean </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/boolean_t/">https://json.nlohmann.me/api/basic_json/boolean_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19652" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" prot="public" static="no">
        <type>NumberIntegerType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::number_integer_t =  NumberIntegerType</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
<para>a type for a number (integer) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/number_integer_t/">https://json.nlohmann.me/api/basic_json/number_integer_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19656" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" prot="public" static="no">
        <type>NumberUnsignedType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::number_unsigned_t =  NumberUnsignedType</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
<para>a type for a number (unsigned) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/number_unsigned_t/">https://json.nlohmann.me/api/basic_json/number_unsigned_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19660" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" prot="public" static="no">
        <type>NumberFloatType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::number_float_t =  NumberFloatType</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
<para>a type for a number (floating-point) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/number_float_t/">https://json.nlohmann.me/api/basic_json/number_float_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19664" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" prot="public" static="no">
        <type>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary_t =  nlohmann::byte_container_with_subtype&lt;BinaryType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_t</name>
        <briefdescription>
<para>a type for a packed binary type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary_t/">https://json.nlohmann.me/api/basic_json/binary_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19668" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1af12040e0663db54840d73d363979643a" prot="public" static="no">
        <type>detail::actual_object_comparator_t&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::object_comparator_t =  detail::actual_object_comparator_t&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>object_comparator_t</name>
        <briefdescription>
<para>object key comparator type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/object_comparator_t/">https://json.nlohmann.me/api/basic_json/object_comparator_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19672" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19672" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>modifiers</header>
      <description><para>checks whether the container is empty.</para>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/empty/">https://json.nlohmann.me/api/basic_json/empty/</ulink></para>
</simplesect>
returns the number of elements <simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/size/">https://json.nlohmann.me/api/basic_json/size/</ulink></para>
</simplesect>
returns the maximum possible number of elements <simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/max_size/">https://json.nlohmann.me/api/basic_json/max_size/</ulink> </para>
</simplesect>
</para>
</description>
      <memberdef kind="friend" id="classbasic__json_1a44c98b48b8a0b5e53087776fbb63961f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(reference left, reference right) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;//NOLINT(cppcoreguidelines-noexcept-swap, performance-noexcept-swap) std::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22782" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22782" bodyend="22790"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac444a656905e3f207ad9fc19275faf25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator+=</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22416" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22416" bodyend="22420"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aca01ca3a9bc310e5c5d067a39dca6933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::push_back</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22424" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22424" bodyend="22444"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4475e951f51506808ca6fe7e77eb38ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator+=</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22448" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22448" bodyend="22452"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af17fe93acad9b0b991600225dabd42be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::push_back</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22456" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22456" bodyend="22475"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a996a58d60e4badd9beadfd3e2e7ffdc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator+=</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22479" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22479" bodyend="22483"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4fcacc90f17b156f0b6c8e0430624853" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::push_back</definition>
        <argsstring>(initializer_list_t init)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22487" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22487" bodyend="22499"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3af74b651da5642cd8b77a3ecc635331" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator+=</definition>
        <argsstring>(initializer_list_t init)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22503" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22503" bodyend="22507"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac5f0a15957842b188826aea98a9cfd3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/emplace_back/">https://json.nlohmann.me/api/basic_json/emplace_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22512" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22512" bodyend="22532"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac366495e80b2f51a09f07471006cde28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref>, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an object if key does not exist </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/emplace/">https://json.nlohmann.me/api/basic_json/emplace/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22537" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22537" bodyend="22563"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af8c5ca19d22a32054452470669c43bb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert_iterator</definition>
        <argsstring>(const_iterator pos, Args &amp;&amp;... args)</argsstring>
        <name>insert_iterator</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper for insertion of an iterator <simplesect kind="note"><para>: This uses std::distance to support GCC 4.8, see <ulink url="https://github.com/nlohmann/json/pull/1257">https://github.com/nlohmann/json/pull/1257</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22569" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22569" bodyend="22584"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7f3817060c2bec896a99cb2c236b9c27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert</definition>
        <argsstring>(const_iterator pos, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22588" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22588" bodyend="22604"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae5da62116a40a0f86e87f11fdd54e9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert</definition>
        <argsstring>(const_iterator pos, basic_json &amp;&amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22608" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22608" bodyend="22611"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a47b623200562da188886a385c716d101" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert</definition>
        <argsstring>(const_iterator pos, size_type cnt, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts copies of element into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22615" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22615" bodyend="22631"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a68e1707248a00a2608a304da5ae5c911" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert</definition>
        <argsstring>(const_iterator pos, const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts range of elements into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22635" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22635" bodyend="22662"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abdfee6a3db80431a24c68bfaf038c47d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert</definition>
        <argsstring>(const_iterator pos, initializer_list_t ilist)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" kindref="member">initializer_list_t</ref></type>
          <declname>ilist</declname>
        </param>
        <briefdescription>
<para>inserts elements from initializer list into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22666" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22666" bodyend="22682"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aaf55c485c75ddd7bd5f9791e59d3aec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::insert</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts range of elements into object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22686" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22686" bodyend="22707"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3819f393e82396782ccc22785575b01d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::update</definition>
        <argsstring>(const_reference j, bool merge_objects=false)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>merge_objects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>updates a JSON object from another object, overwriting existing keys </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/update/">https://json.nlohmann.me/api/basic_json/update/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22711" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22711" bodyend="22714"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4ea2b8cef5e4aba5b92d14e6ebe25936" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::update</definition>
        <argsstring>(const_iterator first, const_iterator last, bool merge_objects=false)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>merge_objects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>updates a JSON object from another object, overwriting existing keys </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/update/">https://json.nlohmann.me/api/basic_json/update/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22718" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22718" bodyend="22761"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1a94e5348ebb34852092d51a44e21d24" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::swap</definition>
        <argsstring>(reference other) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;//NOLINT(cppcoreguidelines-noexcept-swap, performance-noexcept-swap) std::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22765" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22765" bodyend="22778"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac1e32c91d5e641c25c52486341f5a9db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::swap</definition>
        <argsstring>(array_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22794" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22794" bodyend="22806"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abc9ea6dec87e254de172c2bfeaeef7df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::swap</definition>
        <argsstring>(object_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22810" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22810" bodyend="22822"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aeac8816c033c659ef8b43a5f03d5f553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::swap</definition>
        <argsstring>(string_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22826" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22826" bodyend="22838"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3624e1bbc880bd196e3fa4a220554755" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::swap</definition>
        <argsstring>(binary_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22842" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22842" bodyend="22854"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa987625005046c81e7748dca1e84a0e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::swap</definition>
        <argsstring>(typename binary_t::container_type &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type>typename binary_t::container_type &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22858" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22858" bodyend="22870"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>lexicographical comparison operators</header>
      <memberdef kind="variable" id="classbasic__json_1a7dd56e6dab5328365a3c9b9d15f98e1b" prot="public" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::__pad3__</definition>
        <argsstring></argsstring>
        <name>__pad3__</name>
        <bitfield> static bool compares_unordered(const_reference lhs</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22954" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a3a549b97cc690cd390145249335d3768" prot="public" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED <ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::rhs</definition>
        <argsstring></argsstring>
        <name>rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22960" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a54aba2f4314135e3ccf511fb17ca45a5" prot="public" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED <ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref> bool</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const_reference bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::inverse</definition>
        <argsstring></argsstring>
        <name>inverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22960" column="27" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22960" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>value access</header>
      <description><para>Direct access to the stored value of a JSON value. </para>
</description>
      <memberdef kind="function" id="classbasic__json_1a575865972fb7567c9ccba814b65dbcf6" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__default__constructible" kindref="compound">detail::is_default_constructible</ref>&lt; ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 0 &gt;) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), std::declval&lt; ValueType &amp; &gt;())))</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
<para>get a value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink> and <ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the json_serializer&lt;ValueType&gt; <computeroutput>from_json()</computeroutput> method.</para>
<para>The function is equivalent to executing <programlisting filename=".cpp"><codeline><highlight class="normal">ValueType<sp/>ret;</highlight></codeline>
<codeline><highlight class="normal">JSONSerializer&lt;ValueType&gt;::from_json(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
</programlisting></para>
<para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="classbasic__json" kindref="compound">basic_json</ref>,</para>
</listitem><listitem><para>json_serializer&lt;ValueType&gt; has a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>void from_json(const basic_json&amp;, ValueType&amp;)</computeroutput>, and</para>
</listitem><listitem><para>json_serializer&lt;ValueType&gt; does not have a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>ValueType from_json(const basic_json&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>json_serializer&lt;ValueType&gt; <computeroutput>from_json()</computeroutput> method throws</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,get__ValueType_const}</para>
<para><simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20909" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20909" bodyend="20915"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac5bc0a2ccdfb1293eb199aece69833e4" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1has__non__default__from__json" kindref="compound">detail::has_non_default_from_json</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 1 &gt;) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;())))</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
<para>get a value (explicit); special case </para>
        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <bold>not</bold> <ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink> and <bold>not</bold> <ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the json_serializer&lt;ValueType&gt; <computeroutput>from_json()</computeroutput> method.</para>
<para>The function is equivalent to executing <programlisting filename=".cpp"><codeline><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JSONSerializer&lt;ValueType&gt;::from_json(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="classbasic__json" kindref="compound">basic_json</ref> and</para>
</listitem><listitem><para>json_serializer&lt;ValueType&gt; has a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>ValueType from_json(const basic_json&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>If json_serializer&lt;ValueType&gt; has both overloads of <computeroutput>from_json()</computeroutput>, this one is chosen.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>json_serializer&lt;ValueType&gt; <computeroutput>from_json()</computeroutput> method throws</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20951" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20951" bodyend="20955"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a76f1255b2138773aa57bf2e22c71a315" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>BasicJsonType</type>
        <definition>BasicJsonType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 2 &gt;) const</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
<para>get special-case overload </para>
        </briefdescription>
        <detaileddescription>
<para>This overloads converts the current <ref refid="classbasic__json" kindref="compound">basic_json</ref> in a different <ref refid="classbasic__json" kindref="compound">basic_json</ref> type</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="classbasic__json" kindref="compound">basic_json</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this, converted into <emphasis>BasicJsonType</emphasis> </para>
</simplesect>
@complexity Depending on the implementation of the called <computeroutput>from_json()</computeroutput> method.</para>
<para><simplesect kind="since"><para>version 3.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20976" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20976" bodyend="20979"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2632e75860da5fd88f079de332a77059" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_same&lt; BasicJsonType, basic_json_t &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 3 &gt;) const</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
<para>get special-case overload </para>
        </briefdescription>
        <detaileddescription>
<para>This overloads avoids a lot of template boilerplate, it can be seen as the identity method</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="classbasic__json" kindref="compound">basic_json</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this</para>
</simplesect>
@complexity Constant.</para>
<para><simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20999" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20999" bodyend="21002"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abd6324fe3dbffceb76ce0d33d2e762ec" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 4 &gt;) const noexcept -&gt; decltype(std::declval&lt; const basic_json_t &amp; &gt;().template get_ptr&lt; PointerType &gt;())</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 4 &gt;</type>
        </param>
        <briefdescription>
<para>get a pointer value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>get a pointer value (explicit) Explicit pointer access to the internally stored JSON value. No copies are made.</para>
<para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref>, <ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref>, <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref>, <ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref>, <ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref>, <ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref>, or <ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</simplesect>
@complexity Constant.</para>
<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>
<para><simplesect kind="see"><para>see <ref refid="classbasic__json_1aba60354728e2f7f64e3e5c6b02c5b820" kindref="member">get_ptr()</ref> for explicit pointer-member access</para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21012" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21012" bodyend="21017"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aba60354728e2f7f64e3e5c6b02c5b820" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_ptr</definition>
        <argsstring>() noexcept -&gt; decltype(std::declval&lt; basic_json_t &amp; &gt;().get_impl_ptr(std::declval&lt; PointerType &gt;()))</argsstring>
        <name>get_ptr</name>
        <briefdescription>
<para>get a pointer value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ptr/">https://json.nlohmann.me/api/basic_json/get_ptr/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20848" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20848" bodyend="20852"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9db8d5e59277a70a736f899c4aec0af0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref> &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_ptr</definition>
        <argsstring>() const noexcept -&gt; decltype(std::declval&lt; const basic_json_t &amp; &gt;().get_impl_ptr(std::declval&lt; PointerType &gt;()))</argsstring>
        <name>get_ptr</name>
        <briefdescription>
<para>get a pointer value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ptr/">https://json.nlohmann.me/api/basic_json/get_ptr/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20859" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20859" bodyend="20863"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0ab31c7fdbab38898070bca01637f886" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeCV</type>
          </param>
          <param>
            <type>typename ValueType</type>
            <defval>detail::uncvref_t&lt;ValueTypeCV&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get</definition>
        <argsstring>() const noexcept(noexcept(std::declval&lt; const basic_json_t &amp; &gt;().template get_impl&lt; ValueType &gt;(detail::priority_tag&lt; 4 &gt; {}))) -&gt; decltype(std::declval&lt; const basic_json_t &amp; &gt;().template get_impl&lt; ValueType &gt;(detail::priority_tag&lt; 4 &gt; {}))</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a (pointer) value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Performs explicit type conversion between the JSON value and a compatible value if required.</para>
<para><itemizedlist>
<listitem><para>If the requested type is a pointer to the internally stored JSON value that pointer is returned. No copies are made.</para>
</listitem><listitem><para>If the requested type is the current <ref refid="classbasic__json" kindref="compound">basic_json</ref>, or a different <ref refid="classbasic__json" kindref="compound">basic_json</ref> convertible from the current <ref refid="classbasic__json" kindref="compound">basic_json</ref>.</para>
</listitem><listitem><para>Otherwise the value is converted by calling the json_serializer&lt;ValueType&gt; <computeroutput>from_json()</computeroutput> method.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueTypeCV</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>if necessary</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>json_serializer&lt;ValueType&gt; <computeroutput>from_json()</computeroutput> method throws if conversion is required</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21047" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21047" bodyend="21057"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab11f66d4edc50a209fab3f8c48664a53" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get</definition>
        <argsstring>() noexcept -&gt; decltype(std::declval&lt; basic_json_t &amp; &gt;().template get_ptr&lt; PointerType &gt;())</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a pointer value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para>
<para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref>, <ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref>, <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref>, <ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref>, <ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref>, <ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref>, or <ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</simplesect>
@complexity Constant.</para>
<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>
<para><simplesect kind="see"><para>see <ref refid="classbasic__json_1aba60354728e2f7f64e3e5c6b02c5b820" kindref="member">get_ptr()</ref> for explicit pointer-member access</para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21088" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21088" bodyend="21092"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a055a78a155eef5fbf05d40899cc7eff9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; !<ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; basic_json_t, ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_to</definition>
        <argsstring>(ValueType &amp;v) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), v)))</argsstring>
        <name>get_to</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get a value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_to/">https://json.nlohmann.me/api/basic_json/get_to/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21101" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21101" bodyend="21106"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a81b5d8cbbde2eb425b55690024b1a5a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_to</definition>
        <argsstring>(ValueType &amp;v) const</argsstring>
        <name>get_to</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21114" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21114" bodyend="21118"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab8ffeca3b8431bbc7bab0280f843f79e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename Array</type>
            <defval>T (&amp;)[N]</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; basic_json_t, Array &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Array</type>
        <definition>Array basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_to</definition>
        <argsstring>(T(&amp;v)[N]) const noexcept(noexcept(JSONSerializer&lt; Array &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), v)))</argsstring>
        <name>get_to</name>
        <param>
          <type>T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21125" column="11" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21125" bodyend="21131"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3697078e748abc4a99c23e36e321b439" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_ref</definition>
        <argsstring>()</argsstring>
        <name>get_ref</name>
        <briefdescription>
<para>get a reference value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ref/">https://json.nlohmann.me/api/basic_json/get_ref/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21137" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21137" bodyend="21141"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a39c5dbafcc6eef79143c251096827549" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref> &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_ref</definition>
        <argsstring>() const</argsstring>
        <name>get_ref</name>
        <briefdescription>
<para>get a reference value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ref/">https://json.nlohmann.me/api/basic_json/get_ref/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21148" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21148" bodyend="21152"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a747e3e19891143442991bbdb33edb917" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structdetail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_pointer&lt; ValueType &gt;&gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, std::nullptr_t &gt;&gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, <ref refid="classdetail_1_1json__ref" kindref="compound">detail::json_ref</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;&gt;&gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, typename string_t::value_type &gt;&gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;&gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;&gt;, <ref refid="structdetail_1_1is__detected__lazy" kindref="compound">detail::is_detected_lazy</ref>&lt; detail::get_template_function, const basic_json_t &amp;, ValueType &gt; &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>JSON_EXPLICIT</type>
        <definition>JSON_EXPLICIT basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator ValueType</definition>
        <argsstring>() const</argsstring>
        <name>operator ValueType</name>
        <briefdescription>
<para>get a value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <ref refid="classbasic__json_1a0ab31c7fdbab38898070bca01637f886" kindref="member">get() const</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>non-pointer type compatible to the JSON value, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. The character type of <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <computeroutput>std::string</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to type <emphasis>ValueType</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ValueType</emphasis> is incompatible to the JSON value type (e.g., the JSON value is of type boolean, but a string is requested); see example below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@complexity Linear in the size of the JSON value.</para>
<para>@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,operator__ValueType}</para>
<para><simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21199" column="55" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21199" bodyend="21203"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac55de1b3601085c32e4a1dc32ef6d32d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> &amp;</type>
        <definition>binary_t&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_binary</definition>
        <argsstring>()</argsstring>
        <name>get_binary</name>
        <briefdescription>
<para>get a binary value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_binary/">https://json.nlohmann.me/api/basic_json/get_binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21207" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21207" bodyend="21215"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4ab13e0430cfea76c05ccd062aa528ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> &amp;</type>
        <definition>const binary_t&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_binary</definition>
        <argsstring>() const</argsstring>
        <name>get_binary</name>
        <briefdescription>
<para>get a binary value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_binary/">https://json.nlohmann.me/api/basic_json/get_binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21219" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21219" bodyend="21227"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>constructors and destructors</header>
      <description><para>Constructors of class <ref refid="classbasic__json" kindref="compound">basic_json</ref>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </para>
</description>
      <memberdef kind="function" id="classbasic__json_1a743ac3bcbc4b0f7897244d4cea387eee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary</definition>
        <argsstring>(const typename binary_t::container_type &amp;init)</argsstring>
        <name>binary</name>
        <param>
          <type>const typename binary_t::container_type &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (without subtype) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20264" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20264" bodyend="20270"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a45e65e73d9ecf780537d632372fa2c51" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary</definition>
        <argsstring>(const typename binary_t::container_type &amp;init, typename binary_t::subtype_type subtype)</argsstring>
        <name>binary</name>
        <param>
          <type>const typename binary_t::container_type &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>typename binary_t::subtype_type</type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (with subtype) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20275" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20275" bodyend="20281"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5af2196a9acde33f742ef054e7c2109c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;init)</argsstring>
        <name>binary</name>
        <param>
          <type>typename binary_t::container_type &amp;&amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20286" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20286" bodyend="20292"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac00a2a38929ce21eae65f9dd09b03ce3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;init, typename binary_t::subtype_type subtype)</argsstring>
        <name>binary</name>
        <param>
          <type>typename binary_t::container_type &amp;&amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>typename binary_t::subtype_type</type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (with subtype) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20297" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20297" bodyend="20303"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac736994a792cb8460a30a3f4dd86fd78" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::array</definition>
        <argsstring>(initializer_list_t init={})</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>explicitly create an array from an initializer list </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/array/">https://json.nlohmann.me/api/basic_json/array/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20308" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20308" bodyend="20311"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a50a0e8dacc0f4aa12162da666595e6fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::object</definition>
        <argsstring>(initializer_list_t init={})</argsstring>
        <name>object</name>
        <param>
          <type><ref refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>explicitly create an object from an initializer list </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/object/">https://json.nlohmann.me/api/basic_json/object/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20316" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20316" bodyend="20319"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae2d5bc42270881ed3e219e8b1456fec5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(const value_t v)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>create an empty value with a given type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20118" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20118" bodyend="20122"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5b1fab9ded0a2a182837bd66c0e5189e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(std::nullptr_t=nullptr) noexcept</argsstring>
        <name>basic_json</name>
        <param>
          <type>std::nullptr_t</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>create a null object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20126" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20126" bodyend="20130"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0f24e66b152203259eaf05c33ebaeed4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompatibleType</type>
          </param>
          <param>
            <type>typename U</type>
            <defval>detail::uncvref_t&lt;CompatibleType&gt;</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; !<ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; U &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;<ref refid="structdetail_1_1is__compatible__type" kindref="compound">detail::is_compatible_type</ref>&lt; basic_json_t, U &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(CompatibleType &amp;&amp;val) noexcept(noexcept(//NOLINT(bugprone-forwarding-reference-overload, bugprone-exception-escape) JSONSerializer&lt; U &gt;::to_json(std::declval&lt; basic_json_t &amp; &gt;(), std::forward&lt; CompatibleType &gt;(val))))</argsstring>
        <name>basic_json</name>
        <param>
          <type>CompatibleType &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value from compatible types </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20138" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20138" bodyend="20145"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aeaf10402e79a1acce9a74f5a9654d403" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(const BasicJsonType &amp;val)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value from an existing one </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20152" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20152" bodyend="20201"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa911d47d3c99184a301bf4fd304199b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(initializer_list_t init, bool type_deduction=true, value_t manual_type=value_t::array)</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>type_deduction</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>manual_type</declname>
          <defval><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632af1f713c9e000f5d3f280adbd124df4f5" kindref="member">value_t::array</ref></defval>
        </param>
        <briefdescription>
<para>create a container (array or object) from an initializer list </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20205" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20205" bodyend="20259"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7b6f0605b09a002567fd18a289cef31b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(size_type cnt, const basic_json &amp;val)</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>construct an array with count copies of given value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20323" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20323" bodyend="20328"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af97b4fcd01509076c8a7b32ec1a10aec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>||std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;::<ref refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(InputIT first, InputIT last)</argsstring>
        <name>basic_json</name>
        <param>
          <type>InputIT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIT</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>construct a JSON container given an iterator range </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20335" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20335" bodyend="20435"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab6712795591ec744415b50bc01d768ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename JsonRef</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structdetail_1_1is__json__ref" kindref="compound">detail::is_json_ref</ref>&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;&gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(const JsonRef &amp;ref)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const JsonRef &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20444" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20444" bodyend="20444"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af15244e1249b6e7282127d460b5b2e3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(const basic_json &amp;other)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20448" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20448" bodyend="20513"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae18629aae4bd76e6f7920cf4e7b4dd60" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json</definition>
        <argsstring>(basic_json &amp;&amp;other) noexcept</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20517" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20517" bodyend="20530"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab0b20f4ac45a0f6e5ac2a2fb6138c19f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
        <definition>basic_json&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator=</definition>
        <argsstring>(basic_json other) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_base_class_t &gt;::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy assignment </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator=/">https://json.nlohmann.me/api/basic_json/operator=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20534" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20534" bodyend="20553"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9f3bcb6dc54f447ad95085715104494e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::~basic_json</definition>
        <argsstring>() noexcept</argsstring>
        <name>~basic_json</name>
        <briefdescription>
<para>destructor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/~basic_json/">https://json.nlohmann.me/api/basic_json/~basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20557" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20557" bodyend="20560"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>binary serialization/deserialization support</header>
      <memberdef kind="function" id="classbasic__json_1a9bea2fdeaff0956562cafd89fdba9139" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt;std::uint8_t&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23540" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23540" bodyend="23545"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a706ccab0e47bd75cd36911db84451cd1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23549" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23549" bodyend="23552"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af31f5ee23264fb21bd31e16bc27adab2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23556" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23556" bodyend="23559"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad317526e90c898957af9ce1c8c011caa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt;std::uint8_t&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23563" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23563" bodyend="23568"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af46fdac62559d4c38e623d99ad7064e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23572" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23572" bodyend="23575"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a51da13ff4e850d4ad1cf23ce4f3b9e4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23579" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23579" bodyend="23582"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afa6d27aedd29bed0cd145638f4f32fdc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt;std::uint8_t&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23586" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23586" bodyend="23593"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ada3d71f1dcfea24465d364b815d11445" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23597" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23597" bodyend="23601"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab8b6c6cc3ba1b49af628fe0ec8c73b77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23605" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23605" bodyend="23609"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af410354f1c82a34f388e438cc47c31f8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt;std::uint8_t&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_bjdata</definition>
        <argsstring>(const basic_json &amp;j, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_bjdata</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a BJData serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23613" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23613" bodyend="23620"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2736658c256401394059599f97139ee9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_bjdata</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_bjdata</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a BJData serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23624" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23624" bodyend="23628"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1fa9828fcbe4e33c9a036834564f7dbd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_bjdata</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_bjdata</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a BJData serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23632" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23632" bodyend="23636"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae0945ada0a9b5afd776b2d6ea2c048a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt;std::uint8_t&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_bson</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a BSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23640" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23640" bodyend="23645"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afd718b745034da1f4eea4c69f45cebda" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</argsstring>
        <name>to_bson</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a BSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23649" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23649" bodyend="23652"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a71794547dde3dd67e444aa45131ca861" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_bson</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a BSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23656" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23656" bodyend="23659"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5bc3c67eaf6e9b22c8b446f9695249e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_cbor</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in CBOR format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_cbor/">https://json.nlohmann.me/api/basic_json/from_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23665" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23665" bodyend="23675"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a08ab03513b96f5a864bf623aeb70f122" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_cbor</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in CBOR format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_cbor/">https://json.nlohmann.me/api/basic_json/from_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23681" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23681" bodyend="23691"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a89a8b31922ebb7a637e723ac7873fa4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_cbor</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23696" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23696" bodyend="23702"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8680ff0784c185b6898839a98de88486" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_cbor</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23706" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23706" bodyend="23717"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab0c025488572f913ca5529a2ef62d066" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_msgpack</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in MessagePack format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_msgpack/">https://json.nlohmann.me/api/basic_json/from_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23723" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23723" bodyend="23732"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af7d84b161b2d93f9b2b3ac8d68afeb96" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_msgpack</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in MessagePack format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_msgpack/">https://json.nlohmann.me/api/basic_json/from_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23738" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23738" bodyend="23747"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2a721efc291300b45ac410ab75b8478b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_msgpack</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23752" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23752" bodyend="23757"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae8c5fdb783d4f97a9062ab41809ec0c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_msgpack</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23761" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23761" bodyend="23771"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4588941095d03624ada4f0023d93944a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_ubjson</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in UBJSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_ubjson/">https://json.nlohmann.me/api/basic_json/from_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23777" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23777" bodyend="23786"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5dd7470a3be83b27cf162c0261e6b63d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_ubjson</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in UBJSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_ubjson/">https://json.nlohmann.me/api/basic_json/from_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23792" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23792" bodyend="23801"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa375318d8ef6052fd4d606d596d9c424" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_ubjson</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23806" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23806" bodyend="23811"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad915ce03b8ec612764bb67d09e658a0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_ubjson</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23815" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23815" bodyend="23825"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a59327f708c0555e2928487bcddf71293" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_bjdata</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bjdata</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BJData format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bjdata/">https://json.nlohmann.me/api/basic_json/from_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23831" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23831" bodyend="23840"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1accf7ae6f9b2fee171484c5ef54f08d1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_bjdata</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bjdata</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BJData format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bjdata/">https://json.nlohmann.me/api/basic_json/from_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23846" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23846" bodyend="23855"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4b0dfca88b11ea59a2568707767622d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_bson</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bson/">https://json.nlohmann.me/api/basic_json/from_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23861" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23861" bodyend="23870"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2513159e8df9a81bf03ed34e1147b42e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_bson</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bson/">https://json.nlohmann.me/api/basic_json/from_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23876" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23876" bodyend="23885"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7e33baaab9ab497f0fe6b797134c9524" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_bson</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23890" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23890" bodyend="23895"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aed9761fba9571455a96309f7ba647757" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::from_bson</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23899" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23899" bodyend="23909"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Patch functions</header>
      <description><para>return flattened JSON value</para>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/flatten/">https://json.nlohmann.me/api/basic_json/flatten/</ulink></para>
</simplesect>
unflatten a previously flattened JSON value <simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/unflatten/">https://json.nlohmann.me/api/basic_json/unflatten/</ulink> </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classbasic__json_1a699ef418df577e75f28dfce6b04d6c2f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::diff</definition>
        <argsstring>(const basic_json &amp;source, const basic_json &amp;target, const std::string &amp;path=&quot;&quot;)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>creates a diff as a JSON patch </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/diff/">https://json.nlohmann.me/api/basic_json/diff/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="24283" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="24283" bodyend="24413"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a145a004c0a2fa5be84b260ecc98ab5d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::patch</definition>
        <argsstring>(const basic_json &amp;json_patch) const</argsstring>
        <name>patch</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>json_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON patch to a copy of the current object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/patch/">https://json.nlohmann.me/api/basic_json/patch/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="24273" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="24273" bodyend="24278"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>object inspection</header>
      <description><para>Functions to inspect the type of a JSON value. </para>
</description>
      <memberdef kind="function" id="classbasic__json_1a85df48caed9e341bb14d98ab88891d1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref></type>
        <definition>string_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::dump</definition>
        <argsstring>(const int indent=-1, const char indent_char=&apos; &apos;, const bool ensure_ascii=false, const error_handler_t error_handler=error_handler_t::strict) const</argsstring>
        <name>dump</name>
        <param>
          <type>const int</type>
          <declname>indent</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const char</type>
          <declname>indent_char</declname>
          <defval>&apos; &apos;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" kindref="member">error_handler_t</ref></type>
          <declname>error_handler</declname>
          <defval>error_handler_t::strict</defval>
        </param>
        <briefdescription>
<para>serialization </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/dump/">https://json.nlohmann.me/api/basic_json/dump/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20575" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20575" bodyend="20593"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
        <definition>constexpr value_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
<para>return the type of the JSON value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/type/">https://json.nlohmann.me/api/basic_json/type/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20597" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20597" bodyend="20600"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad650dd5a7e019b970abce3d8864b5654" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_primitive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_primitive</name>
        <briefdescription>
<para>return whether type is primitive </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_primitive/">https://json.nlohmann.me/api/basic_json/is_primitive/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20604" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20604" bodyend="20607"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2d3a5f8761bc6f163f4119bddaf7b092" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_structured</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_structured</name>
        <briefdescription>
<para>return whether type is structured </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_structured/">https://json.nlohmann.me/api/basic_json/is_structured/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20611" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20611" bodyend="20614"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad8789d0a365d5afaab61e7492908d8b2" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_null</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_null</name>
        <briefdescription>
<para>return whether value is null </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_null/">https://json.nlohmann.me/api/basic_json/is_null/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20618" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20618" bodyend="20621"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1acfe2e3c359b545f8edbb72f6bd78718c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_boolean</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_boolean</name>
        <briefdescription>
<para>return whether value is a boolean </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_boolean/">https://json.nlohmann.me/api/basic_json/is_boolean/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20625" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20625" bodyend="20628"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aacf244be5088fb183f4ba21a66af9631" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_number</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number</name>
        <briefdescription>
<para>return whether value is a number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number/">https://json.nlohmann.me/api/basic_json/is_number/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20632" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20632" bodyend="20635"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2330e35cda16540058fef090abc709bf" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_number_integer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_integer</name>
        <briefdescription>
<para>return whether value is an integer number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number_integer/">https://json.nlohmann.me/api/basic_json/is_number_integer/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20639" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20639" bodyend="20642"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4de72635745144ee519157d23fe7189a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_number_unsigned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_unsigned</name>
        <briefdescription>
<para>return whether value is an unsigned integer number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number_unsigned/">https://json.nlohmann.me/api/basic_json/is_number_unsigned/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20646" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20646" bodyend="20649"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8d5bb82dfc8cceae1753b52a588eef92" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_number_float</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_float</name>
        <briefdescription>
<para>return whether value is a floating-point number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number_float/">https://json.nlohmann.me/api/basic_json/is_number_float/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20653" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20653" bodyend="20656"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af355a2b131068acf3d623eb6d80a711c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_object</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_object</name>
        <briefdescription>
<para>return whether value is an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_object/">https://json.nlohmann.me/api/basic_json/is_object/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20660" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20660" bodyend="20663"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a184ba4a6b47e6da3703af19349bd776f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_array</name>
        <briefdescription>
<para>return whether value is an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_array/">https://json.nlohmann.me/api/basic_json/is_array/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20667" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20667" bodyend="20670"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a007ecebde9a7d40714e300ce0ff52908" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_string</name>
        <briefdescription>
<para>return whether value is a string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_string/">https://json.nlohmann.me/api/basic_json/is_string/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20674" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20674" bodyend="20677"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abbdd993df08641faa3e24b5d2151e8f8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_binary</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_binary</name>
        <briefdescription>
<para>return whether value is a binary array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_binary/">https://json.nlohmann.me/api/basic_json/is_binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20681" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20681" bodyend="20684"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a39e4946a414cc978b88939ed1b343d46" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::is_discarded</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_discarded</name>
        <briefdescription>
<para>return whether value is discarded </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_discarded/">https://json.nlohmann.me/api/basic_json/is_discarded/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20688" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20688" bodyend="20691"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a70e1c8fbdb62f3f8bc04e69eef9cc9cf" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator value_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator value_t</name>
        <briefdescription>
<para>return the type of the JSON value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_value_t/">https://json.nlohmann.me/api/basic_json/operator_value_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20695" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20695" bodyend="20698"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>lookup</header>
      <memberdef kind="function" id="classbasic__json_1a727e3cfb5a874314d8deb12cb53a8105" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::find</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21954" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21954" bodyend="21964"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7bf93ae61eb63a9e543cafb3f723900c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::find</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>find</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21968" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21968" bodyend="21978"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a89dd769ce700326266883ba96a98a8f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::find</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="21984" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="21984" bodyend="21994"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afe1bb257797042aef7142c91f35390d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::find</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>find</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22000" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22000" bodyend="22010"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad1e1eff03a320299e6a8639a7579ca46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::count</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>count</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the number of occurrences of a key in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/count/">https://json.nlohmann.me/api/basic_json/count/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22014" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22014" bodyend="22018"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1ba1cd73d36a2cd58a9da7021b0f7317" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::count</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>count</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the number of occurrences of a key in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/count/">https://json.nlohmann.me/api/basic_json/count/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22024" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22024" bodyend="22028"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afd5ea67fe1a4778be5189423e2545d7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::contains</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>contains</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22032" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22032" bodyend="22035"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7053bdd8e9ee2fcb0ca9c54ec85f1297" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_basic_json_key_type&lt; basic_json_t, KeyType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::contains</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>contains</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22041" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22041" bodyend="22044"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac4c37affef3aa8c79cab9f3bfa2cb5e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::contains</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object given a JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="22048" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="22048" bodyend="22051"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Pointer functions</header>
      <memberdef kind="function" id="classbasic__json_1a274307158c76b820701077dd471cc75b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23921" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23921" bodyend="23924"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af9ef76e450ec1bf467c72535becc0be6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::JSON_HEDLEY_DEPRECATED_FOR</definition>
        <argsstring>(3.11.0, basic_json::json_pointer or nlohmann::json_pointer&lt; basic_json::string_t &gt;) reference operator[](const</argsstring>
        <name>JSON_HEDLEY_DEPRECATED_FOR</name>
        <param>
          <type>3.11.</type>
          <declname>0</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">basic_json::json_pointer</ref> or nlohmann::json_pointer&lt; <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">basic_json::string_t</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23927" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23927" bodyend="23931"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6aedef6230f66b1271d71a6f77e7fed3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23935" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23935" bodyend="23938"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a174114f78e24693f61dae1840af50979" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::JSON_HEDLEY_DEPRECATED_FOR</definition>
        <argsstring>(3.11.0, basic_json::json_pointer or nlohmann::json_pointer&lt; basic_json::string_t &gt;) const _reference operator[](const</argsstring>
        <name>JSON_HEDLEY_DEPRECATED_FOR</name>
        <param>
          <type>3.11.</type>
          <declname>0</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">basic_json::json_pointer</ref> or nlohmann::json_pointer&lt; <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">basic_json::string_t</ref> &gt;</type>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23941" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23941" bodyend="23952"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2c01c57845336ed472ccc68be13c364c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::JSON_HEDLEY_DEPRECATED_FOR</definition>
        <argsstring>(3.11.0, basic_json::json_pointer or nlohmann::json_pointer&lt; basic_json::string_t &gt;) reference at(const</argsstring>
        <name>JSON_HEDLEY_DEPRECATED_FOR</name>
        <param>
          <type>3.11.</type>
          <declname>0</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">basic_json::json_pointer</ref> or nlohmann::json_pointer&lt; <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">basic_json::string_t</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23955" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23955" bodyend="23959"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5a3a35d456e3250640a90c6f7a7fd555" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23963" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23963" bodyend="23966"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Merge Patch functions</header>
      <memberdef kind="function" id="classbasic__json_1a8676ac2433fe299b8d420f00a0741395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::merge_patch</definition>
        <argsstring>(const basic_json &amp;apply_patch)</argsstring>
        <name>merge_patch</name>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>apply_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON Merge Patch </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/merge_patch/">https://json.nlohmann.me/api/basic_json/merge_patch/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="24425" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="24425" bodyend="24449"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classbasic__json_1aeb9caf9b95ef9e29b440dd1f0c822f74" prot="private" static="no">
        <type>NLOHMANN_BASIC_JSON_TPL</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::basic_json_t =  NLOHMANN_BASIC_JSON_TPL</definition>
        <argsstring></argsstring>
        <name>basic_json_t</name>
        <briefdescription>
<para>workaround type for MSVC </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19427" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2539b2d00d469e0ff753617abf22e6ce" prot="private" static="no">
        <type>::nlohmann::detail::json_base_class&lt; CustomBaseClass &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_base_class_t =  ::nlohmann::detail::json_base_class&lt;CustomBaseClass&gt;</definition>
        <argsstring></argsstring>
        <name>json_base_class_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19428" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a632f199bc4b79371487f529cfdcc267c" prot="private" static="no">
        <type>::nlohmann::detail::primitive_iterator_t</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::primitive_iterator_t =  ::nlohmann::detail::primitive_iterator_t</definition>
        <argsstring></argsstring>
        <name>primitive_iterator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19447" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a959fc432c8d609d2bebb998fb6b6a1a7" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::internal_iterator&lt; BasicJsonType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::internal_iterator =  ::nlohmann::detail::internal_iterator&lt;BasicJsonType&gt;</definition>
        <argsstring></argsstring>
        <name>internal_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19449" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a397adf6b027ef3c202ec3aa6f6c1f149" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::iter_impl =  ::nlohmann::detail::iter_impl&lt;BasicJsonType&gt;</definition>
        <argsstring></argsstring>
        <name>iter_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19451" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a0b10619e48d72b3257ddd92bb5e3cab2" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::iteration_proxy&lt; Iterator &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::iteration_proxy =  ::nlohmann::detail::iteration_proxy&lt;Iterator&gt;</definition>
        <argsstring></argsstring>
        <name>iteration_proxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19453" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a40b525218bf76ba0c3d75bb4c1e30a3a" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::json_reverse_iterator&lt; Base &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_reverse_iterator =  ::nlohmann::detail::json_reverse_iterator&lt;Base&gt;</definition>
        <argsstring></argsstring>
        <name>json_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19454" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a3b84a1efe204d891a06767be452fdf60" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::output_adapter_t&lt; CharType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::output_adapter_t =  ::nlohmann::detail::output_adapter_t&lt;CharType&gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19457" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a70b96a2315625383ea8d6dbc466978a9" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::binary_reader&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, InputType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary_reader =  ::nlohmann::detail::binary_reader&lt;basic_json, InputType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19460" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aed0261c797ae5126681e4a68d1e8eacc" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::binary_writer&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, CharType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary_writer =  ::nlohmann::detail::binary_writer&lt;basic_json, CharType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19461" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classbasic__json_1a966e900415e66f3ab60f7b5ef52fd63b" prot="public" static="no">
        <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">detail::value_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::value_t =  detail::value_t</definition>
        <argsstring></argsstring>
        <name>value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19467" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1afe66720a34c11920f359394a4430a16e" prot="public" static="no">
        <type>::nlohmann::json_pointer&lt; StringType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_pointer =  ::nlohmann::json_pointer&lt;StringType&gt;</definition>
        <argsstring></argsstring>
        <name>json_pointer</name>
        <briefdescription>
<para>JSON Pointer, see nlohmann::json_pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19469" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ab75fd791f0b8fca724e5ed70b4956414" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SFINAE</type>
          </param>
        </templateparamlist>
        <type>JSONSerializer&lt; T, SFINAE &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_serializer =  JSONSerializer&lt;T, SFINAE&gt;</definition>
        <argsstring></argsstring>
        <name>json_serializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19471" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2ebde9badb4f1b4cf6517f6b8e302d0d" prot="public" static="no">
        <type><ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" kindref="member">detail::error_handler_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::error_handler_t =  detail::error_handler_t</definition>
        <argsstring></argsstring>
        <name>error_handler_t</name>
        <briefdescription>
<para>how to treat decoding errors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19473" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a067b4f0e63e55055272fec0a26b5b991" prot="public" static="no">
        <type><ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">detail::cbor_tag_handler_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::cbor_tag_handler_t =  detail::cbor_tag_handler_t</definition>
        <argsstring></argsstring>
        <name>cbor_tag_handler_t</name>
        <briefdescription>
<para>how to treat CBOR tags </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19475" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" prot="public" static="no">
        <type>std::initializer_list&lt; <ref refid="classdetail_1_1json__ref" kindref="compound">detail::json_ref</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::initializer_list_t =  std::initializer_list&lt;detail::json_ref&lt;basic_json&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>initializer_list_t</name>
        <briefdescription>
<para>helper type for initializer lists of <ref refid="classbasic__json" kindref="compound">basic_json</ref> values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19477" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a143e447269d8beb1d02400093eccd018" prot="public" static="no">
        <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">detail::input_format_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::input_format_t =  detail::input_format_t</definition>
        <argsstring></argsstring>
        <name>input_format_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19479" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1acefb05e1022be791038db86c9963cec7" prot="public" static="no">
        <type><ref refid="structjson__sax" kindref="compound">json_sax</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_sax_t =  json_sax&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>json_sax_t</name>
        <briefdescription>
<para>SAX interface type, see nlohmann::json_sax. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19481" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a53b6bf8ee18c48f4609c8bdd4bb95107" prot="public" static="no">
        <type><ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312ef" kindref="member">detail::parse_event_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::parse_event_t =  detail::parse_event_t</definition>
        <argsstring></argsstring>
        <name>parse_event_t</name>
        <briefdescription>
<para>parser event types </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/parse_event_t/">https://json.nlohmann.me/api/basic_json/parse_event_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20101" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a50644d655c9283aaf0e2a0f3a5428867" prot="public" static="no">
        <type>detail::parser_callback_t&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::parser_callback_t =  detail::parser_callback_t&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <briefdescription>
<para>per-element parser callback type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/parser_callback_t/">https://json.nlohmann.me/api/basic_json/parser_callback_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20105" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classbasic__json_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">detail::value_t</ref></type>
          </param>
        </templateparamlist>
        <type>struct</type>
        <definition>friend struct detail::external_constructor</definition>
        <argsstring></argsstring>
        <name>detail::external_constructor</name>
        <param>
          <type><ref refid="structdetail_1_1external__constructor" kindref="compound">detail::external_constructor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19404" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a43f901b14cf3f7135269b0c75c9ac233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::json_pointer</definition>
        <argsstring></argsstring>
        <name>::nlohmann::json_pointer</name>
        <param>
          <type>::nlohmann::json_pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19407" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1ac8f3125911eb018ef4ab00d879487baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::parser</name>
        <param>
          <type>::nlohmann::detail::parser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19412" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a842e5c7ca096025c18b11e715d3401f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::iter_impl</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::iter_impl</name>
        <param>
          <type>::nlohmann::detail::iter_impl</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19415" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a69d491bbda88ade6d3c7a2b11309e8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::binary_writer</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::binary_writer</name>
        <param>
          <type>::nlohmann::detail::binary_writer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19417" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1aa226ed5103dfd10e27e562d35a3a106b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::binary_reader</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::binary_reader</name>
        <param>
          <type>::nlohmann::detail::binary_reader</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19419" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::json_sax_dom_parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::json_sax_dom_parser</name>
        <param>
          <type>::nlohmann::detail::json_sax_dom_parser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19421" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a95574da8d12905ea99dc348934c837da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::json_sax_dom_callback_parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::json_sax_dom_callback_parser</name>
        <param>
          <type>::nlohmann::detail::json_sax_dom_callback_parser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19423" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1abdcb15d025676b4d3db0f32a50f4393f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ::nlohmann::detail::exception</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::exception</name>
        <param>
          <type>::nlohmann::detail::exception</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19424" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a60ca396028b8d9714c6e10efbf475af6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&lt;&lt;</definition>
        <argsstring>(basic_json &amp;j, std::istream &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_gtgt/">https://json.nlohmann.me/api/basic_json/operator_gtgt/</ulink> </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated since 3.0.0 and will be removed in version 4.0.0 of the library. Please use <ref refid="classbasic__json_1aaf363408931d76472ded14017e59c9e8" kindref="member">operator&gt;&gt;(std::istream&amp;, basic_json&amp;)</ref> instead; that is, replace calls like <computeroutput>j &lt;&lt; i;</computeroutput> with <computeroutput>i &gt;&gt; j;</computeroutput>. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23439" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23439" bodyend="23442"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1aaf363408931d76472ded14017e59c9e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;i, basic_json &amp;j)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_gtgt/">https://json.nlohmann.me/api/basic_json/operator_gtgt/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23446" column="25" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23446" bodyend="23450"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbasic__json_1aa82137724f80ebaa92ec6544eb5e544a" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <bitfield> using lexer = ::nlohmann::detail::lexer_base&lt;basic_json&gt;</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19430" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1acb1d2f61621d0cb05507f5a48d25fb26" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::__pad1__</definition>
        <argsstring></argsstring>
        <name>__pad1__</name>
        <bitfield> using serializer = ::nlohmann::detail::serializer&lt;basic_json&gt;</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19463" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a4c0831d0e3207eb079fb274eb0d3dcc5" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::__pad2__</definition>
        <argsstring></argsstring>
        <name>__pad2__</name>
        <bitfield> union json_value { object_t* object</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19700" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a5299b166ebd27030235e2314a0cf5882" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> *</type>
        <definition>array_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::array</definition>
        <argsstring></argsstring>
        <name>array</name>
        <briefdescription>
<para>array (stored with pointer to save storage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19731" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a814cc0333d9ecea13eb0554fd35df8ec" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> *</type>
        <definition>string_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::string</definition>
        <argsstring></argsstring>
        <name>string</name>
        <briefdescription>
<para>string (stored with pointer to save storage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19733" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a8ba94a85b63eab2443e7fab8cb26d150" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> *</type>
        <definition>binary_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::binary</definition>
        <argsstring></argsstring>
        <name>binary</name>
        <briefdescription>
<para>binary (stored with pointer to save storage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19735" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1afe268377946f15ff7b309b887e8ef8ac" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref></type>
        <definition>boolean_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::boolean</definition>
        <argsstring></argsstring>
        <name>boolean</name>
        <briefdescription>
<para>boolean </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19737" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1acda00ee3da4d87072260cf07d1143f62" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref></type>
        <definition>number_integer_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::number_integer</definition>
        <argsstring></argsstring>
        <name>number_integer</name>
        <briefdescription>
<para>number (integer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19739" column="26" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a0a54245650ef57a6d8375592821a5344" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref></type>
        <definition>number_unsigned_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::number_unsigned</definition>
        <argsstring></argsstring>
        <name>number_unsigned</name>
        <briefdescription>
<para>number (unsigned integer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19741" column="27" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a10dca98c209830ac0cf1019fa99e0031" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref></type>
        <definition>number_float_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::number_float</definition>
        <argsstring></argsstring>
        <name>number_float</name>
        <briefdescription>
<para>number (floating-point) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19743" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19743" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classbasic__json_1a27054edf6738852b42e0218fe4337e1c" prot="public" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::__pad4__</definition>
        <argsstring></argsstring>
        <name>__pad4__</name>
        <bitfield> struct data { value_t m_type = value_t::null</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23487" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1acd0f167153f047a246b51858d7c921b8" prot="public" static="no" mutable="no">
        <type>json_value</type>
        <definition>json_value basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>the value of the current element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23498" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a4f7fd3c3afd2abb77797652506ab6bc0" prot="public" static="no" mutable="no">
        <type>data</type>
        <definition>data basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23523" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23523" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classbasic__json_1ac9a6dcbf8716e58f662a86c1bbcff565" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputAdapterType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::parser&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, InputAdapterType &gt;</type>
        <definition>static ::nlohmann::detail::parser&lt;basic_json, InputAdapterType&gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::parser</definition>
        <argsstring>(InputAdapterType adapter, detail::parser_callback_t&lt; basic_json &gt;cb=nullptr, const bool allow_exceptions=true, const bool ignore_comments=false)</argsstring>
        <name>parser</name>
        <param>
          <type>InputAdapterType</type>
          <declname>adapter</declname>
        </param>
        <param>
          <type>detail::parser_callback_t&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19435" column="39" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19435" bodyend="19444"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ade7d5a2a718ecaf2749c23e619897b75" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>()=default</argsstring>
        <name>json_value</name>
        <briefdescription>
<para>default constructor (for null values) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19746" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2d3c2791c6cac612eb49f44d8e83bb75" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(boolean_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for booleans </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19748" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19748" bodyend="19748"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3f8e46eb2120a8f7c63c8d9e62a5b105" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(number_integer_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (integer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19750" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19750" bodyend="19750"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5eff2f2def587632ebb64a2a1d921f39" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(number_unsigned_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (unsigned) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19752" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19752" bodyend="19752"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6b174d239bcc49866f2f4d2a5ed82a99" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(number_float_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (floating-point) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19754" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19754" bodyend="19754"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad919ffad986df2c11159792ba4f733f2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(value_t t)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>constructor for empty values of a given type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19756" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19756" bodyend="19825"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a668dcc1acf6c8872d9aea15c9946922f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(const string_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for strings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19828" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19828" bodyend="19828"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a578593b5d6dd782f1296b6a81acb57df" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(string_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue strings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19831" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19831" bodyend="19831"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa97b5eb40b7491b17a4707db9452603d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(const object_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19834" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19834" bodyend="19834"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a07fda1c2f595a47099c152caf497b715" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(object_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19837" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19837" bodyend="19837"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1472b1d7dccf1de47b28185457f7e08c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(const array_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19840" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19840" bodyend="19840"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4ea2025deef694f8bcf98b52b9c4a1da" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(array_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19843" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19843" bodyend="19843"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afe346424b682748764754e236cd8c89d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(const typename binary_t::container_type &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const typename binary_t::container_type &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for binary arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19846" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19846" bodyend="19846"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a08c04c85a95df9e2fcad67398fff07f2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>typename binary_t::container_type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue binary arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19849" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19849" bodyend="19849"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aeecd9db0d04a7981f6b09bbf67c3ebef" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(const binary_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for binary arrays (internal type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19852" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19852" bodyend="19852"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa47f2e94e50be0fe53a457f382f93a31" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::json_value</definition>
        <argsstring>(binary_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue binary arrays (internal type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19855" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19855" bodyend="19855"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5699c685383c0e4c824a084cb36e99ba" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::destroy</definition>
        <argsstring>(value_t t)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19857" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19857" bodyend="19963"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a54ffa8ef2d9d5971619fdac9012ae8dd" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::assert_invariant</definition>
        <argsstring>(bool check_parents=true) const noexcept</argsstring>
        <name>assert_invariant</name>
        <param>
          <type>bool</type>
          <declname>check_parents</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>checks the class invariants </para>
        </briefdescription>
        <detaileddescription>
<para>This function asserts the class invariants. It needs to be called at the end of every constructor to make sure that created objects respect the invariant. Furthermore, it has to be called each time the type of a JSON value is changed, because the invariant expresses a relationship between <emphasis>m_type</emphasis> and <emphasis>m_value</emphasis>.</para>
<para>Furthermore, the parent relation is checked for arrays and objects: If <emphasis>check_parents</emphasis> true and the value is an array or object, then the container&apos;s elements must have the current value as parent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">check_parents</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the parent relation should be checked. The value is true by default and should only be set to false during destruction of objects when the invariant does not need to hold. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19985" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19985" bodyend="20004"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a960be8bb5f127dd11c33d861622a5fa7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::set_parents</definition>
        <argsstring>()</argsstring>
        <name>set_parents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20006" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20006" bodyend="20041"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abd445a8a1ccb0ef0302b00529543a9ba" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::set_parents</definition>
        <argsstring>(iterator it, typename iterator::difference_type count_set_parents)</argsstring>
        <name>set_parents</name>
        <param>
          <type><ref refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" kindref="member">iterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type>typename iterator::difference_type</type>
          <declname>count_set_parents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20043" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20043" bodyend="20054"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a01f3fc8d1028c1bee49974c0b62b2611" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::set_parent</definition>
        <argsstring>(reference j, std::size_t old_capacity=static_cast&lt; std::size_t &gt;(-1))</argsstring>
        <name>set_parent</name>
        <param>
          <type><ref refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" kindref="member">reference</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>old_capacity</declname>
          <defval>static_cast&lt; std::size_t &gt;(-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20056" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20056" bodyend="20092"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2fda70d85381ed122d055de8ff66da3c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref></type>
        <definition>boolean_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl</definition>
        <argsstring>(boolean_t *) const</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a boolean (explicit) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20708" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20708" bodyend="20716"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0f697c50a38725496e42a802fa66bb4e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> *</type>
        <definition>object_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(object_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20719" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20719" bodyend="20722"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a62a08a020217904ff6ab57a6b038a53f" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> *</type>
        <definition>constexpr const object_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const object_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20725" column="30" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20725" bodyend="20728"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9296e26efdc92aef5abd921d0c60f06e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> *</type>
        <definition>array_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(array_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20731" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20731" bodyend="20734"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af05cb55fe32eacfada85a9e0d15efd90" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> *</type>
        <definition>constexpr const array_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const array_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20737" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20737" bodyend="20740"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae0a7ea5ec94c08d22a7a1005c9ba562b" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> *</type>
        <definition>string_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(string_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20743" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20743" bodyend="20746"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a650606981b67fc120771fb34c6b0f474" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> *</type>
        <definition>constexpr const string_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const string_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20749" column="30" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20749" bodyend="20752"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aecece12aa58729cc5fe4cf7f248a5b9e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref> *</type>
        <definition>boolean_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(boolean_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20755" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20755" bodyend="20758"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac8289f33035c6ae9bdf3d04ffcd2fcf8" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref> *</type>
        <definition>constexpr const boolean_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const boolean_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20761" column="31" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20761" bodyend="20764"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5a1d3f85882b53f0dea8b83e11d18af5" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref> *</type>
        <definition>number_integer_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(number_integer_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20767" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20767" bodyend="20770"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a77d69984f4830a270cde1f49684035fc" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref> *</type>
        <definition>constexpr const number_integer_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const number_integer_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20773" column="38" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20773" bodyend="20776"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a99ed866b63af3b306fc2ef938f0acd06" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref> *</type>
        <definition>number_unsigned_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(number_unsigned_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20779" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20779" bodyend="20782"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1ba5c2afc523f10792f36e3c2b16de25" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref> *</type>
        <definition>constexpr const number_unsigned_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const number_unsigned_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20785" column="39" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20785" bodyend="20788"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a843a72226992ad9cbe5d131249b5772d" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref> *</type>
        <definition>number_float_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(number_float_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20791" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20791" bodyend="20794"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a812bf5a6b4ff44ebef6542ed150a2244" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref> *</type>
        <definition>constexpr const number_float_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const number_float_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20797" column="36" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20797" bodyend="20800"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af366aaa5f0ba4591a334503219a32d4a" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> *</type>
        <definition>binary_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(binary_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (binary) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20803" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20803" bodyend="20806"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0065d89c2ba863b8a849e89389f6b947" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> *</type>
        <definition>constexpr const binary_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_impl_ptr</definition>
        <argsstring>(const binary_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" kindref="member">binary_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (binary) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20809" column="30" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20809" bodyend="20812"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classbasic__json_1a4bceecf563151eb58af179416d8e6299" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a83f845db2d54cedad97279bad70aea52" kindref="member">allocator_type</ref></type>
        <definition>static allocator_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_allocator</definition>
        <argsstring>()</argsstring>
        <name>get_allocator</name>
        <briefdescription>
<para>returns the allocator associated with the container </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_allocator/">https://json.nlohmann.me/api/basic_json/get_allocator/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19543" column="27" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19543" bodyend="19546"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7b435c2ed2db99cb1daa78ae3c6c4580" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_HEDLEY_WARN_UNUSED_RESULT <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::meta</definition>
        <argsstring>()</argsstring>
        <name>meta</name>
        <briefdescription>
<para>returns version information on the library </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/meta/">https://json.nlohmann.me/api/basic_json/meta/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19551" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19551" bodyend="19611"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1addedd5e53fa6eff6cd621f1615741c3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_PRIVATE_UNLESS_TESTED <ref refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" kindref="member">const_reference</ref> bool static SAX bool</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const_reference bool static SAX bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::sax_parse</definition>
        <argsstring>(InputType &amp;&amp;i, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23385" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23385" bodyend="23394"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a94cbf1844fef86e9301282ad8ca0f822" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>class SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::sax_parse</definition>
        <argsstring>(IteratorType first, IteratorType last, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate SAX events </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23400" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23400" bodyend="23409"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad018e709338c810c56eaad606186a77e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::sax_parse</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate SAX events </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</ulink> </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since 3.8.0 and will be removed in version 4.0.0 of the library. Please use sax_parse(ptr, ptr + len) instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23419" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23419" bodyend="23430"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classbasic__json_1a0647e7717e43d080e02aa762eedd33f7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_RETURNS_NON_NULL T *</type>
        <definition>static JSON_HEDLEY_RETURNS_NON_NULL T* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::create</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>create</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>helper for exception-safe object creation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19681" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19681" bodyend="19694"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3fb599679fd8e475a5c82a7098d2f693" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename ThisType</type>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>static ReferenceType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::get_ref_impl</definition>
        <argsstring>(ThisType &amp;obj)</argsstring>
        <name>get_ref_impl</name>
        <param>
          <type>ThisType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>helper function to implement <ref refid="classbasic__json_1a3697078e748abc4a99c23e36e321b439" kindref="member">get_ref()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>This function helps to implement <ref refid="classbasic__json_1a3697078e748abc4a99c23e36e321b439" kindref="member">get_ref()</ref> without code duplication for const and non-const overloads</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ThisType</parametername>
</parameternamelist>
<parameterdescription>
<para>will be deduced as <computeroutput><ref refid="classbasic__json" kindref="compound">basic_json</ref></computeroutput> or <computeroutput>const <ref refid="classbasic__json" kindref="compound">basic_json</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>if ReferenceType does not match underlying value type of the current JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="20826" column="26" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="20826" bodyend="20837"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbasic__json_1afb684c446c48759336dc227f16b7d3f4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>JSON_HEDLEY_RETURNS_NON_NULL const char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL const char* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::type_name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type_name</name>
        <briefdescription>
<para>return the type as string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/type_name/">https://json.nlohmann.me/api/basic_json/type_name/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23461" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23461" bodyend="23485"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab4b684342f67317a21b2d9e33ec8feb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::data</definition>
        <argsstring>(const value_t v)</argsstring>
        <name>data</name>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23500" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23500" bodyend="23503"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2430d63f0ffd335f276c085c33c11b17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::data</definition>
        <argsstring>(size_type cnt, const basic_json &amp;val)</argsstring>
        <name>data</name>
        <param>
          <type><ref refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23505" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23505" bodyend="23509"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac8aaf6afe755ea6c586ab9920389d6bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::data</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23511" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a08ad05755736ab9e3416f0556bb47a6a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::data</definition>
        <argsstring>(data &amp;&amp;) noexcept=default</argsstring>
        <name>data</name>
        <param>
          <type>data &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23512" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a416abf41e6c61061dd2be762a88cceb8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::data</definition>
        <argsstring>(const data &amp;) noexcept=delete</argsstring>
        <name>data</name>
        <param>
          <type>const data &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23513" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac8b114795c5e45d242a88d3e2306114c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>data &amp;</type>
        <definition>data&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator=</definition>
        <argsstring>(data &amp;&amp;) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>data &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23514" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a345d693c6d7e58a3e486a4436d60956a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>data &amp;</type>
        <definition>data&amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::operator=</definition>
        <argsstring>(const data &amp;) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const data &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23515" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1acdc878691d825f4376b4e177b2818b59" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;::~data</definition>
        <argsstring>() noexcept</argsstring>
        <name>~data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="23517" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="23517" bodyend="23520"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>namespace for Niels Lohmann </para>
    </briefdescription>
    <detaileddescription>
<para>a class to store JSON values <simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/">https://json.nlohmann.me/api/basic_json/</ulink></para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/nlohmann">https://github.com/nlohmann</ulink> </para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0</para>
</simplesect>
a class to store JSON values</para>
<para><simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;</label>
        <link refid="classbasic__json"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nlohmann::detail::json_base_class&lt; void  &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass &gt;</label>
        <link refid="classbasic__json"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>inverse</edgelabel>
          <edgelabel>rhs</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nlohmann::detail::json_base_class&lt; void  &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19400" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19402" bodyend="24452"/>
    <listofallmembers>
      <member refid="classbasic__json_1aa226ed5103dfd10e27e562d35a3a106b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::binary_reader</name></member>
      <member refid="classbasic__json_1a69d491bbda88ade6d3c7a2b11309e8bf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::binary_writer</name></member>
      <member refid="classbasic__json_1abdcb15d025676b4d3db0f32a50f4393f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::exception</name></member>
      <member refid="classbasic__json_1a842e5c7ca096025c18b11e715d3401f4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::iter_impl</name></member>
      <member refid="classbasic__json_1a95574da8d12905ea99dc348934c837da" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::json_sax_dom_callback_parser</name></member>
      <member refid="classbasic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::json_sax_dom_parser</name></member>
      <member refid="classbasic__json_1ac8f3125911eb018ef4ab00d879487baf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::parser</name></member>
      <member refid="classbasic__json_1a43f901b14cf3f7135269b0c75c9ac233" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::json_pointer</name></member>
      <member refid="classbasic__json_1aa82137724f80ebaa92ec6544eb5e544a" prot="private" virt="non-virtual"><scope>basic_json</scope><name>__pad0__</name></member>
      <member refid="classbasic__json_1acb1d2f61621d0cb05507f5a48d25fb26" prot="private" virt="non-virtual"><scope>basic_json</scope><name>__pad1__</name></member>
      <member refid="classbasic__json_1a4c0831d0e3207eb079fb274eb0d3dcc5" prot="private" virt="non-virtual"><scope>basic_json</scope><name>__pad2__</name></member>
      <member refid="classbasic__json_1a7dd56e6dab5328365a3c9b9d15f98e1b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>__pad3__</name></member>
      <member refid="classbasic__json_1a27054edf6738852b42e0218fe4337e1c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>__pad4__</name></member>
      <member refid="classbasic__json_1a83f845db2d54cedad97279bad70aea52" prot="public" virt="non-virtual"><scope>basic_json</scope><name>allocator_type</name></member>
      <member refid="classbasic__json_1a5299b166ebd27030235e2314a0cf5882" prot="private" virt="non-virtual"><scope>basic_json</scope><name>array</name></member>
      <member refid="classbasic__json_1ac736994a792cb8460a30a3f4dd86fd78" prot="public" virt="non-virtual"><scope>basic_json</scope><name>array</name></member>
      <member refid="classbasic__json_1a6b282cae56b331d222c7da4b05eab5e8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>array_t</name></member>
      <member refid="classbasic__json_1a54ffa8ef2d9d5971619fdac9012ae8dd" prot="private" virt="non-virtual"><scope>basic_json</scope><name>assert_invariant</name></member>
      <member refid="classbasic__json_1a899e4623fe377af5c9ad14c40c64280c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1af076d8a80f4263cf821da2033d5773b6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1accafaaf23f60bb245ddb1fa0972b33a3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1a4cd9ba2f2164d9cee83b07f76d40843f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1aba9a21714e81e98fc5786a2339ea1665" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1a7ae6267ca4bd85e25f61dc5ba30204da" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1a5a3a35d456e3250640a90c6f7a7fd555" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1a0d93dc1dbdf67a6ee3a5cf1d2439ca77" prot="public" virt="non-virtual"><scope>basic_json</scope><name>back</name></member>
      <member refid="classbasic__json_1a41eee3066cd1ebfea746f9f07fd03f6f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>back</name></member>
      <member refid="classbasic__json_1ae2d5bc42270881ed3e219e8b1456fec5" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a5b1fab9ded0a2a182837bd66c0e5189e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a0f24e66b152203259eaf05c33ebaeed4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1aeaf10402e79a1acce9a74f5a9654d403" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1aa911d47d3c99184a301bf4fd304199b2" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a7b6f0605b09a002567fd18a289cef31b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1af97b4fcd01509076c8a7b32ec1a10aec" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1ab6712795591ec744415b50bc01d768ed" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1af15244e1249b6e7282127d460b5b2e3e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1ae18629aae4bd76e6f7920cf4e7b4dd60" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1aeb9caf9b95ef9e29b440dd1f0c822f74" prot="private" virt="non-virtual"><scope>basic_json</scope><name>basic_json_t</name></member>
      <member refid="classbasic__json_1a8ba94a85b63eab2443e7fab8cb26d150" prot="private" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a743ac3bcbc4b0f7897244d4cea387eee" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a45e65e73d9ecf780537d632372fa2c51" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a5af2196a9acde33f742ef054e7c2109c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1ac00a2a38929ce21eae65f9dd09b03ce3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a70b96a2315625383ea8d6dbc466978a9" prot="private" virt="non-virtual"><scope>basic_json</scope><name>binary_reader</name></member>
      <member refid="classbasic__json_1a4c1b5ea434b48cf31097617bb1c1ca1e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary_t</name></member>
      <member refid="classbasic__json_1aed0261c797ae5126681e4a68d1e8eacc" prot="private" virt="non-virtual"><scope>basic_json</scope><name>binary_writer</name></member>
      <member refid="classbasic__json_1afe268377946f15ff7b309b887e8ef8ac" prot="private" virt="non-virtual"><scope>basic_json</scope><name>boolean</name></member>
      <member refid="classbasic__json_1a9301890c48e9b957edc07f9eb767bd10" prot="public" virt="non-virtual"><scope>basic_json</scope><name>boolean_t</name></member>
      <member refid="classbasic__json_1a067b4f0e63e55055272fec0a26b5b991" prot="public" virt="non-virtual"><scope>basic_json</scope><name>cbor_tag_handler_t</name></member>
      <member refid="classbasic__json_1a1f5af3d9d06d43b91fefe1767794b1e8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_iterator</name></member>
      <member refid="classbasic__json_1a2862fa42527f5c14d9f737411e0facd4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_pointer</name></member>
      <member refid="classbasic__json_1a31370bb451b78198d42c86dd31955deb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_reference</name></member>
      <member refid="classbasic__json_1a240f61567d8acffe831532f4f9b379cb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_reverse_iterator</name></member>
      <member refid="classbasic__json_1afd5ea67fe1a4778be5189423e2545d7a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1a7053bdd8e9ee2fcb0ca9c54ec85f1297" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1ac4c37affef3aa8c79cab9f3bfa2cb5e1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1ad1e1eff03a320299e6a8639a7579ca46" prot="public" virt="non-virtual"><scope>basic_json</scope><name>count</name></member>
      <member refid="classbasic__json_1a1ba1cd73d36a2cd58a9da7021b0f7317" prot="public" virt="non-virtual"><scope>basic_json</scope><name>count</name></member>
      <member refid="classbasic__json_1a0647e7717e43d080e02aa762eedd33f7" prot="private" virt="non-virtual"><scope>basic_json</scope><name>create</name></member>
      <member refid="classbasic__json_1ab4b684342f67317a21b2d9e33ec8feb0" prot="public" virt="non-virtual"><scope>basic_json</scope><name>data</name></member>
      <member refid="classbasic__json_1a2430d63f0ffd335f276c085c33c11b17" prot="public" virt="non-virtual"><scope>basic_json</scope><name>data</name></member>
      <member refid="classbasic__json_1ac8aaf6afe755ea6c586ab9920389d6bf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>data</name></member>
      <member refid="classbasic__json_1a08ad05755736ab9e3416f0556bb47a6a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>data</name></member>
      <member refid="classbasic__json_1a416abf41e6c61061dd2be762a88cceb8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>data</name></member>
      <member refid="classbasic__json_1a991d005e7f648cbf37bb36daf85183ca" prot="public" virt="non-virtual"><scope>basic_json</scope><name>default_object_comparator_t</name></member>
      <member refid="classbasic__json_1a5699c685383c0e4c824a084cb36e99ba" prot="private" virt="non-virtual"><scope>basic_json</scope><name>destroy</name></member>
      <member refid="classbasic__json_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>detail::external_constructor</name></member>
      <member refid="classbasic__json_1a699ef418df577e75f28dfce6b04d6c2f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>diff</name></member>
      <member refid="classbasic__json_1ae45e8f7ce7c3e62035cd097a39910399" prot="public" virt="non-virtual"><scope>basic_json</scope><name>difference_type</name></member>
      <member refid="classbasic__json_1a85df48caed9e341bb14d98ab88891d1e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>dump</name></member>
      <member refid="classbasic__json_1ac366495e80b2f51a09f07471006cde28" prot="public" virt="non-virtual"><scope>basic_json</scope><name>emplace</name></member>
      <member refid="classbasic__json_1ac5f0a15957842b188826aea98a9cfd3d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>emplace_back</name></member>
      <member refid="classbasic__json_1a7d0fef086b1b72372113db6ce7446189" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a437b81c6e968a4192a22bc0de6c4df80" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a05da3b93f2d4a7164589abffaa9acb33" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a5f763336e84232f38e2d80e142f9820e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1ac2c58b5f34c2ff56e27630214f5a9df4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a9737aa07030fa0c9e2909d2c5c03f460" prot="private" virt="non-virtual"><scope>basic_json</scope><name>erase_internal</name></member>
      <member refid="classbasic__json_1a9737aa07030fa0c9e2909d2c5c03f460" prot="private" virt="non-virtual"><scope>basic_json</scope><name>erase_internal</name></member>
      <member refid="classbasic__json_1a2ebde9badb4f1b4cf6517f6b8e302d0d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>error_handler_t</name></member>
      <member refid="classbasic__json_1a4ed57fa411e69ae5741bc2f333a967c9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>exception</name></member>
      <member refid="classbasic__json_1a727e3cfb5a874314d8deb12cb53a8105" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a7bf93ae61eb63a9e543cafb3f723900c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a89dd769ce700326266883ba96a98a8f2" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1afe1bb257797042aef7142c91f35390d8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a59327f708c0555e2928487bcddf71293" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bjdata</name></member>
      <member refid="classbasic__json_1accf7ae6f9b2fee171484c5ef54f08d1e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bjdata</name></member>
      <member refid="classbasic__json_1a4b0dfca88b11ea59a2568707767622d8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1a2513159e8df9a81bf03ed34e1147b42e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1a7e33baaab9ab497f0fe6b797134c9524" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1aed9761fba9571455a96309f7ba647757" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1a5bc3c67eaf6e9b22c8b446f9695249e9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1a08ab03513b96f5a864bf623aeb70f122" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1a89a8b31922ebb7a637e723ac7873fa4a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1a8680ff0784c185b6898839a98de88486" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1ab0c025488572f913ca5529a2ef62d066" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1af7d84b161b2d93f9b2b3ac8d68afeb96" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1a2a721efc291300b45ac410ab75b8478b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1ae8c5fdb783d4f97a9062ab41809ec0c6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1a4588941095d03624ada4f0023d93944a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1a5dd7470a3be83b27cf162c0261e6b63d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1aa375318d8ef6052fd4d606d596d9c424" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1ad915ce03b8ec612764bb67d09e658a0d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1a162089e94f24182ba3e4484be63c0c1a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>front</name></member>
      <member refid="classbasic__json_1a0ab31c7fdbab38898070bca01637f886" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get</name></member>
      <member refid="classbasic__json_1ab11f66d4edc50a209fab3f8c48664a53" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get</name></member>
      <member refid="classbasic__json_1a4bceecf563151eb58af179416d8e6299" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_allocator</name></member>
      <member refid="classbasic__json_1ac55de1b3601085c32e4a1dc32ef6d32d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_binary</name></member>
      <member refid="classbasic__json_1a4ab13e0430cfea76c05ccd062aa528ec" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_binary</name></member>
      <member refid="classbasic__json_1a2fda70d85381ed122d055de8ff66da3c" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a575865972fb7567c9ccba814b65dbcf6" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1ac5bc0a2ccdfb1293eb199aece69833e4" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a76f1255b2138773aa57bf2e22c71a315" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a2632e75860da5fd88f079de332a77059" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1abd6324fe3dbffceb76ce0d33d2e762ec" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a0f697c50a38725496e42a802fa66bb4e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a62a08a020217904ff6ab57a6b038a53f" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a9296e26efdc92aef5abd921d0c60f06e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1af05cb55fe32eacfada85a9e0d15efd90" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1ae0a7ea5ec94c08d22a7a1005c9ba562b" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a650606981b67fc120771fb34c6b0f474" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1aecece12aa58729cc5fe4cf7f248a5b9e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1ac8289f33035c6ae9bdf3d04ffcd2fcf8" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a5a1d3f85882b53f0dea8b83e11d18af5" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a77d69984f4830a270cde1f49684035fc" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a99ed866b63af3b306fc2ef938f0acd06" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a1ba5c2afc523f10792f36e3c2b16de25" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a843a72226992ad9cbe5d131249b5772d" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a812bf5a6b4ff44ebef6542ed150a2244" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1af366aaa5f0ba4591a334503219a32d4a" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a0065d89c2ba863b8a849e89389f6b947" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1aba60354728e2f7f64e3e5c6b02c5b820" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ptr</name></member>
      <member refid="classbasic__json_1a9db8d5e59277a70a736f899c4aec0af0" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ptr</name></member>
      <member refid="classbasic__json_1a3697078e748abc4a99c23e36e321b439" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ref</name></member>
      <member refid="classbasic__json_1a39c5dbafcc6eef79143c251096827549" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ref</name></member>
      <member refid="classbasic__json_1a3fb599679fd8e475a5c82a7098d2f693" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_ref_impl</name></member>
      <member refid="classbasic__json_1a055a78a155eef5fbf05d40899cc7eff9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_to</name></member>
      <member refid="classbasic__json_1a81b5d8cbbde2eb425b55690024b1a5a1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_to</name></member>
      <member refid="classbasic__json_1ab8ffeca3b8431bbc7bab0280f843f79e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_to</name></member>
      <member refid="classbasic__json_1a21f7c93f896d302ed0b62d983aac53c0" prot="public" virt="non-virtual"><scope>basic_json</scope><name>initializer_list_t</name></member>
      <member refid="classbasic__json_1a143e447269d8beb1d02400093eccd018" prot="public" virt="non-virtual"><scope>basic_json</scope><name>input_format_t</name></member>
      <member refid="classbasic__json_1a7f3817060c2bec896a99cb2c236b9c27" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1ae5da62116a40a0f86e87f11fdd54e9f0" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a47b623200562da188886a385c716d101" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a68e1707248a00a2608a304da5ae5c911" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1abdfee6a3db80431a24c68bfaf038c47d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1aaf55c485c75ddd7bd5f9791e59d3aec7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1af8c5ca19d22a32054452470669c43bb9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert_iterator</name></member>
      <member refid="classbasic__json_1a959fc432c8d609d2bebb998fb6b6a1a7" prot="private" virt="non-virtual"><scope>basic_json</scope><name>internal_iterator</name></member>
      <member refid="classbasic__json_1a34b69b2a91df080e00cc8f36c342bb6b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>invalid_iterator</name></member>
      <member refid="classbasic__json_1a54aba2f4314135e3ccf511fb17ca45a5" prot="public" virt="non-virtual"><scope>basic_json</scope><name>inverse</name></member>
      <member refid="classbasic__json_1a184ba4a6b47e6da3703af19349bd776f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_array</name></member>
      <member refid="classbasic__json_1abbdd993df08641faa3e24b5d2151e8f8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_binary</name></member>
      <member refid="classbasic__json_1acfe2e3c359b545f8edbb72f6bd78718c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_boolean</name></member>
      <member refid="classbasic__json_1a10771c460900f2f8cac0841d48ab3e30" prot="private" virt="non-virtual"><scope>basic_json</scope><name>is_comparable_with_object_key</name></member>
      <member refid="classbasic__json_1a39e4946a414cc978b88939ed1b343d46" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_discarded</name></member>
      <member refid="classbasic__json_1ad8789d0a365d5afaab61e7492908d8b2" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_null</name></member>
      <member refid="classbasic__json_1aacf244be5088fb183f4ba21a66af9631" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number</name></member>
      <member refid="classbasic__json_1a8d5bb82dfc8cceae1753b52a588eef92" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number_float</name></member>
      <member refid="classbasic__json_1a2330e35cda16540058fef090abc709bf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number_integer</name></member>
      <member refid="classbasic__json_1a4de72635745144ee519157d23fe7189a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number_unsigned</name></member>
      <member refid="classbasic__json_1af355a2b131068acf3d623eb6d80a711c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_object</name></member>
      <member refid="classbasic__json_1ad650dd5a7e019b970abce3d8864b5654" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_primitive</name></member>
      <member refid="classbasic__json_1a007ecebde9a7d40714e300ce0ff52908" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_string</name></member>
      <member refid="classbasic__json_1a2d3a5f8761bc6f163f4119bddaf7b092" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_structured</name></member>
      <member refid="classbasic__json_1a397adf6b027ef3c202ec3aa6f6c1f149" prot="private" virt="non-virtual"><scope>basic_json</scope><name>iter_impl</name></member>
      <member refid="classbasic__json_1a0b10619e48d72b3257ddd92bb5e3cab2" prot="private" virt="non-virtual"><scope>basic_json</scope><name>iteration_proxy</name></member>
      <member refid="classbasic__json_1ae206a491161d043f8efaa1330f1ccf97" prot="public" virt="non-virtual"><scope>basic_json</scope><name>iterator</name></member>
      <member refid="classbasic__json_1a2539b2d00d469e0ff753617abf22e6ce" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_base_class_t</name></member>
      <member refid="classbasic__json_1a3b67977cfd161b73161fa9341f8a4158" prot="public" virt="non-virtual"><scope>basic_json</scope><name>JSON_HEDLEY_DEPRECATED_FOR</name></member>
      <member refid="classbasic__json_1af9ef76e450ec1bf467c72535becc0be6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>JSON_HEDLEY_DEPRECATED_FOR</name></member>
      <member refid="classbasic__json_1a174114f78e24693f61dae1840af50979" prot="public" virt="non-virtual"><scope>basic_json</scope><name>JSON_HEDLEY_DEPRECATED_FOR</name></member>
      <member refid="classbasic__json_1a2c01c57845336ed472ccc68be13c364c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>JSON_HEDLEY_DEPRECATED_FOR</name></member>
      <member refid="classbasic__json_1afe66720a34c11920f359394a4430a16e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>json_pointer</name></member>
      <member refid="classbasic__json_1a40b525218bf76ba0c3d75bb4c1e30a3a" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_reverse_iterator</name></member>
      <member refid="classbasic__json_1acefb05e1022be791038db86c9963cec7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>json_sax_t</name></member>
      <member refid="classbasic__json_1ab75fd791f0b8fca724e5ed70b4956414" prot="public" virt="non-virtual"><scope>basic_json</scope><name>json_serializer</name></member>
      <member refid="classbasic__json_1ade7d5a2a718ecaf2749c23e619897b75" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a2d3c2791c6cac612eb49f44d8e83bb75" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a3f8e46eb2120a8f7c63c8d9e62a5b105" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a5eff2f2def587632ebb64a2a1d921f39" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a6b174d239bcc49866f2f4d2a5ed82a99" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1ad919ffad986df2c11159792ba4f733f2" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a668dcc1acf6c8872d9aea15c9946922f" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a578593b5d6dd782f1296b6a81acb57df" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1aa97b5eb40b7491b17a4707db9452603d" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a07fda1c2f595a47099c152caf497b715" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a1472b1d7dccf1de47b28185457f7e08c" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a4ea2025deef694f8bcf98b52b9c4a1da" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1afe346424b682748764754e236cd8c89d" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a08c04c85a95df9e2fcad67398fff07f2" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1aeecd9db0d04a7981f6b09bbf67c3ebef" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1aa47f2e94e50be0fe53a457f382f93a31" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a4f7fd3c3afd2abb77797652506ab6bc0" prot="public" virt="non-virtual"><scope>basic_json</scope><name>m_data</name></member>
      <member refid="classbasic__json_1acd0f167153f047a246b51858d7c921b8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>m_value</name></member>
      <member refid="classbasic__json_1a8676ac2433fe299b8d420f00a0741395" prot="public" virt="non-virtual"><scope>basic_json</scope><name>merge_patch</name></member>
      <member refid="classbasic__json_1a7b435c2ed2db99cb1daa78ae3c6c4580" prot="public" virt="non-virtual"><scope>basic_json</scope><name>meta</name></member>
      <member refid="classbasic__json_1a10dca98c209830ac0cf1019fa99e0031" prot="private" virt="non-virtual"><scope>basic_json</scope><name>number_float</name></member>
      <member refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" prot="public" virt="non-virtual"><scope>basic_json</scope><name>number_float_t</name></member>
      <member refid="classbasic__json_1acda00ee3da4d87072260cf07d1143f62" prot="private" virt="non-virtual"><scope>basic_json</scope><name>number_integer</name></member>
      <member refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" prot="public" virt="non-virtual"><scope>basic_json</scope><name>number_integer_t</name></member>
      <member refid="classbasic__json_1a0a54245650ef57a6d8375592821a5344" prot="private" virt="non-virtual"><scope>basic_json</scope><name>number_unsigned</name></member>
      <member refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" prot="public" virt="non-virtual"><scope>basic_json</scope><name>number_unsigned_t</name></member>
      <member refid="classbasic__json_1a50a0e8dacc0f4aa12162da666595e6fd" prot="public" virt="non-virtual"><scope>basic_json</scope><name>object</name></member>
      <member refid="classbasic__json_1af12040e0663db54840d73d363979643a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>object_comparator_t</name></member>
      <member refid="classbasic__json_1ac90f70623dc1ad761ea1c5013b2fee47" prot="public" virt="non-virtual"><scope>basic_json</scope><name>object_t</name></member>
      <member refid="classbasic__json_1a70e1c8fbdb62f3f8bc04e69eef9cc9cf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator value_t</name></member>
      <member refid="classbasic__json_1a747e3e19891143442991bbdb33edb917" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator ValueType</name></member>
      <member refid="classbasic__json_1ac444a656905e3f207ad9fc19275faf25" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1a4475e951f51506808ca6fe7e77eb38ca" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1a996a58d60e4badd9beadfd3e2e7ffdc1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1a3af74b651da5642cd8b77a3ecc635331" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1a60ca396028b8d9714c6e10efbf475af6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator&lt;&lt;</name></member>
      <member refid="classbasic__json_1ab0b20f4ac45a0f6e5ac2a2fb6138c19f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator=</name></member>
      <member refid="classbasic__json_1ac8b114795c5e45d242a88d3e2306114c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator=</name></member>
      <member refid="classbasic__json_1a345d693c6d7e58a3e486a4436d60956a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator=</name></member>
      <member refid="classbasic__json_1aaf363408931d76472ded14017e59c9e8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator&gt;&gt;</name></member>
      <member refid="classbasic__json_1ab4f511db82b9d5eba85d5b2b8e1c6dbb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1ae369d1565482903c3af75bf99467776b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a9c5825034534bf9256a33d2dd995c25a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a3d3ea17617e94886f3e86ac921095a13" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a87cae3810ae0a9c56b17842b06fc405e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1ab12a4386e6913012ca4dffa0245fdf99" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a06fe1a1c7aa8c193c73aa40b17ee5f68" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a2e11a3f2a234cd296b515173b6a3b986" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a274307158c76b820701077dd471cc75b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a6aedef6230f66b1271d71a6f77e7fed3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1adb2d18607e0835c4695f53996b181379" prot="public" virt="non-virtual"><scope>basic_json</scope><name>other_error</name></member>
      <member refid="classbasic__json_1aa45e2d88a6cf9236c1f45a1fad18442d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>out_of_range</name></member>
      <member refid="classbasic__json_1a3b84a1efe204d891a06767be452fdf60" prot="private" virt="non-virtual"><scope>basic_json</scope><name>output_adapter_t</name></member>
      <member refid="classbasic__json_1a0fe1802a6a2de032f3c4e4f0f555ae10" prot="public" virt="non-virtual"><scope>basic_json</scope><name>parse_error</name></member>
      <member refid="classbasic__json_1a53b6bf8ee18c48f4609c8bdd4bb95107" prot="public" virt="non-virtual"><scope>basic_json</scope><name>parse_event_t</name></member>
      <member refid="classbasic__json_1ac9a6dcbf8716e58f662a86c1bbcff565" prot="private" virt="non-virtual"><scope>basic_json</scope><name>parser</name></member>
      <member refid="classbasic__json_1a50644d655c9283aaf0e2a0f3a5428867" prot="public" virt="non-virtual"><scope>basic_json</scope><name>parser_callback_t</name></member>
      <member refid="classbasic__json_1a145a004c0a2fa5be84b260ecc98ab5d9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>patch</name></member>
      <member refid="classbasic__json_1a84279673ab13fb6360cf17173a29a1f1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>pointer</name></member>
      <member refid="classbasic__json_1a632f199bc4b79371487f529cfdcc267c" prot="private" virt="non-virtual"><scope>basic_json</scope><name>primitive_iterator_t</name></member>
      <member refid="classbasic__json_1aca01ca3a9bc310e5c5d067a39dca6933" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1af17fe93acad9b0b991600225dabd42be" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1a4fcacc90f17b156f0b6c8e0430624853" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1a6ca7bfb35987ce7cb8d27447cda5b80a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>reference</name></member>
      <member refid="classbasic__json_1aedc059cdae078322bb0d434b2127d1cf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>reverse_iterator</name></member>
      <member refid="classbasic__json_1a3a549b97cc690cd390145249335d3768" prot="public" virt="non-virtual"><scope>basic_json</scope><name>rhs</name></member>
      <member refid="classbasic__json_1addedd5e53fa6eff6cd621f1615741c3d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>sax_parse</name></member>
      <member refid="classbasic__json_1a94cbf1844fef86e9301282ad8ca0f822" prot="public" virt="non-virtual"><scope>basic_json</scope><name>sax_parse</name></member>
      <member refid="classbasic__json_1ad018e709338c810c56eaad606186a77e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>sax_parse</name></member>
      <member refid="classbasic__json_1a01f3fc8d1028c1bee49974c0b62b2611" prot="private" virt="non-virtual"><scope>basic_json</scope><name>set_parent</name></member>
      <member refid="classbasic__json_1a960be8bb5f127dd11c33d861622a5fa7" prot="private" virt="non-virtual"><scope>basic_json</scope><name>set_parents</name></member>
      <member refid="classbasic__json_1abd445a8a1ccb0ef0302b00529543a9ba" prot="private" virt="non-virtual"><scope>basic_json</scope><name>set_parents</name></member>
      <member refid="classbasic__json_1a2c086af43cf06b1b7118f5351cab3ec9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>size_type</name></member>
      <member refid="classbasic__json_1a814cc0333d9ecea13eb0554fd35df8ec" prot="private" virt="non-virtual"><scope>basic_json</scope><name>string</name></member>
      <member refid="classbasic__json_1ac8c9cde32146e6c343e1960aefc11fba" prot="public" virt="non-virtual"><scope>basic_json</scope><name>string_t</name></member>
      <member refid="classbasic__json_1a1a94e5348ebb34852092d51a44e21d24" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1a44c98b48b8a0b5e53087776fbb63961f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1ac1e32c91d5e641c25c52486341f5a9db" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1abc9ea6dec87e254de172c2bfeaeef7df" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1aeac8816c033c659ef8b43a5f03d5f553" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1a3624e1bbc880bd196e3fa4a220554755" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1aa987625005046c81e7748dca1e84a0e3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1af410354f1c82a34f388e438cc47c31f8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bjdata</name></member>
      <member refid="classbasic__json_1a2736658c256401394059599f97139ee9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bjdata</name></member>
      <member refid="classbasic__json_1a1fa9828fcbe4e33c9a036834564f7dbd" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bjdata</name></member>
      <member refid="classbasic__json_1ae0945ada0a9b5afd776b2d6ea2c048a5" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bson</name></member>
      <member refid="classbasic__json_1afd718b745034da1f4eea4c69f45cebda" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bson</name></member>
      <member refid="classbasic__json_1a71794547dde3dd67e444aa45131ca861" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bson</name></member>
      <member refid="classbasic__json_1a9bea2fdeaff0956562cafd89fdba9139" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_cbor</name></member>
      <member refid="classbasic__json_1a706ccab0e47bd75cd36911db84451cd1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_cbor</name></member>
      <member refid="classbasic__json_1af31f5ee23264fb21bd31e16bc27adab2" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_cbor</name></member>
      <member refid="classbasic__json_1ad317526e90c898957af9ce1c8c011caa" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_msgpack</name></member>
      <member refid="classbasic__json_1af46fdac62559d4c38e623d99ad7064e9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_msgpack</name></member>
      <member refid="classbasic__json_1a51da13ff4e850d4ad1cf23ce4f3b9e4a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_msgpack</name></member>
      <member refid="classbasic__json_1afa6d27aedd29bed0cd145638f4f32fdc" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_ubjson</name></member>
      <member refid="classbasic__json_1ada3d71f1dcfea24465d364b815d11445" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_ubjson</name></member>
      <member refid="classbasic__json_1ab8b6c6cc3ba1b49af628fe0ec8c73b77" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_ubjson</name></member>
      <member refid="classbasic__json_1ac5e52dbb3cb4e9fcabd1b88c37985aef" prot="public" virt="non-virtual"><scope>basic_json</scope><name>type</name></member>
      <member refid="classbasic__json_1a2c52f112e54d1be294055ea9186a1c35" prot="public" virt="non-virtual"><scope>basic_json</scope><name>type_error</name></member>
      <member refid="classbasic__json_1afb684c446c48759336dc227f16b7d3f4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>type_name</name></member>
      <member refid="classbasic__json_1a3819f393e82396782ccc22785575b01d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>update</name></member>
      <member refid="classbasic__json_1a4ea2b8cef5e4aba5b92d14e6ebe25936" prot="public" virt="non-virtual"><scope>basic_json</scope><name>update</name></member>
      <member refid="classbasic__json_1a80c2436388fd16a1529ce9afce8229ef" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a56244e0ed0943ad62faf61b06e7ba139" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1acbe572bbfbd4687a7a9167465e4d41f2" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a694398741710ce1c22797ad47109898b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1ac63045992eb552c11f77fefddd801591" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a1ab7b5edf8e5831195940f8d377a6ee3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a96d2f51d8300e987422052ff3f4a4064" prot="private" virt="non-virtual"><scope>basic_json</scope><name>value_return_type</name></member>
      <member refid="classbasic__json_1a966e900415e66f3ab60f7b5ef52fd63b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value_t</name></member>
      <member refid="classbasic__json_1a0d9e6a7acee2992e310ea21a7b59c67a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value_type</name></member>
      <member refid="classbasic__json_1a9f3bcb6dc54f447ad95085715104494e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>~basic_json</name></member>
      <member refid="classbasic__json_1acdc878691d825f4376b4e177b2818b59" prot="public" virt="non-virtual"><scope>basic_json</scope><name>~data</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
