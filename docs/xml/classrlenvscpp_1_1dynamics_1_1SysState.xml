<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrlenvscpp_1_1dynamics_1_1SysState" kind="class" language="C++" prot="public">
    <compoundname>rlenvscpp::dynamics::SysState</compoundname>
    <includes refid="system__state_8h" local="no">system_state.h</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrlenvscpp_1_1dynamics_1_1SysState_1a90e13b369b78fea5f9acd25fa3708b29" prot="public" static="no">
        <type>std::array&lt; std::pair&lt; std::string, <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt;, dim &gt;</type>
        <definition>typedef std::array&lt;std::pair&lt;std::string, real_t&gt;, dim&gt; rlenvscpp::dynamics::SysState&lt; dim &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>The type of the stored values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="35" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classrlenvscpp_1_1dynamics_1_1SysState_1af5a98e3389e307cdc2e6da5bb23b2dcf" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int rlenvscpp::dynamics::SysState&lt; dim &gt;::dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= dim</initializer>
        <briefdescription>
<para>The dimension of the state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="30" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrlenvscpp_1_1dynamics_1_1SysState_1a58b0d103239c7a313ebbdd05cde37ba0" prot="private" static="no" mutable="no">
        <type>std::array&lt; std::pair&lt; std::string, <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt;, dim &gt;</type>
        <definition>std::array&lt;std::pair&lt;std::string, real_t&gt;, dim&gt; rlenvscpp::dynamics::SysState&lt; dim &gt;::values_</definition>
        <argsstring></argsstring>
        <name>values_</name>
        <briefdescription>
<para>Returns a view of the values in [start, end) </para>
        </briefdescription>
        <detaileddescription>
<para>TODO: Add this in the future</para>
<para>values_. Array holding the values of the state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="227" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a465b91919dd1c303770e3948bb6dca0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim1</declname>
            <defname>dim1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>dim2</declname>
            <defname>dim2</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::extract</definition>
        <argsstring>(const SysState&lt; dim1 &gt; &amp;state, SysState&lt; dim2 &gt; &amp;other)</argsstring>
        <name>extract</name>
        <param>
          <type>const <ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&lt; dim1 &gt; &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&lt; dim2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Extract a state of different dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="41" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="234" bodyend="243"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlenvscpp::dynamics::SysState&lt; dim &gt;::SysState</definition>
        <argsstring>()</argsstring>
        <name>SysState</name>
        <briefdescription>
<para>Constructor. Initialize the state with no names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="46" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="246" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1aeb44588fdc15198affe178d7ebef3111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlenvscpp::dynamics::SysState&lt; dim &gt;::SysState</definition>
        <argsstring>(std::array&lt; std::pair&lt; std::string, real_t &gt;, dim &gt; &amp;&amp;values)</argsstring>
        <name>SysState</name>
        <param>
          <type>std::array&lt; std::pair&lt; std::string, <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt;, dim &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Constructor. Initialize the state with the given names and values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="51" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a1768ec97bb468141d6ada1e68e2c2d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlenvscpp::dynamics::SysState&lt; dim &gt;::SysState</definition>
        <argsstring>(std::array&lt; std::string, dim &gt; &amp;&amp;names, real_t val)</argsstring>
        <name>SysState</name>
        <param>
          <type>std::array&lt; std::string, dim &gt; &amp;&amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Constructor. Initialize the state with the given names all variables will be initialized with val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="57" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="265" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a364dfc0b6e5aa41399d1c980a178f8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlenvscpp::dynamics::SysState&lt; dim &gt;::SysState</definition>
        <argsstring>(const SysState&lt; dim &gt; &amp;other)</argsstring>
        <name>SysState</name>
        <param>
          <type>const <ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&lt; dim &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="62" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a9495de450e552da023b82f9ea8c07e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>other_dim</declname>
            <defname>other_dim</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rlenvscpp::dynamics::SysState&lt; dim &gt;::SysState</definition>
        <argsstring>(const SysState&lt; other_dim &gt; &amp;other)</argsstring>
        <name>SysState</name>
        <param>
          <type>const <ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&lt; other_dim &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="68" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="282" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1ad238b6c24ef7771ab3f3cb0e65edb3de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;</type>
        <definition>SysState&lt; dim &gt; &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator=</definition>
        <argsstring>(const SysState&lt; dim &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref>&lt; dim &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignement constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="73" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="298" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a3d9cd6d88bca75a0325b55dc0fd1ed62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlenvscpp::dynamics::SysState&lt; dim &gt;::SysState</definition>
        <argsstring>(SysState &amp;&amp;other)</argsstring>
        <name>SysState</name>
        <param>
          <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="78" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="309" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a86cb84ea82f4f8640b7e128d119f4112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;</type>
        <definition>SysState&lt; dim &gt; &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator=</definition>
        <argsstring>(SysState &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="83" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1abdfd1324c71e3ad9b9fa66db9a892bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;</type>
        <definition>SysState&lt; dim &gt; &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator+=</definition>
        <argsstring>(const DynVec&lt; real_t &gt; &amp;vec)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const DynVec&lt; <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Add to this state the entries of the give vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="89" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a7effe92048aacf541c5427413714f0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;</type>
        <definition>SysState&lt; dim &gt; &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator-=</definition>
        <argsstring>(const DynVec&lt; real_t &gt; &amp;vec)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const DynVec&lt; <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Subtract from this state the entries of the give vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="95" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a37c3ec25b9e992e82251bad2a345a8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> &amp;</type>
        <definition>SysState&lt; dim &gt; &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator*=</definition>
        <argsstring>(real_t val)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scale this state by the given factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="100" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a6ed1a278efdbba35835c1ae30cbcd4f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref></type>
        <definition>real_t rlenvscpp::dynamics::SysState&lt; dim &gt;::get</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the value for the variable name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="105" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="362" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a688071c902abf1cc861bfdd6f683027b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>DynVec&lt; <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt;</type>
        <definition>DynVec&lt; real_t &gt; rlenvscpp::dynamics::SysState&lt; dim &gt;::as_vector</definition>
        <argsstring>() const</argsstring>
        <name>as_vector</name>
        <briefdescription>
<para>Returns the entries of this state as a DynVec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="110" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="391" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1ab1d122c8cd8fccf081de7da3cef3cfaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::set</definition>
        <argsstring>(const std::string &amp;name, real_t val)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value for the variable name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="115" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="404" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a77793791e6876821131ed212f86a40e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::set</definition>
        <argsstring>(uint_t i, const std::pair&lt; std::string, real_t &gt; &amp;value)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the name and value of the i-th variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="120" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a1a85652b4c5155d88f472f2c03dacb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::add</definition>
        <argsstring>(const DynVec&lt; real_t &gt; &amp;container)</argsstring>
        <name>add</name>
        <param>
          <type>const DynVec&lt; <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt; &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Set the values of state variables container must be of size dim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="126" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="593" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1af2d13ee3547111134ad30d43903ac9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::add</definition>
        <argsstring>(const std::vector&lt; real_t &gt; &amp;container)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &gt; &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Set the values of state variables container must be of size dim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="132" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="608" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1ab1de050a473af719b0c0e6c948c403ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
        <definition>uint_t rlenvscpp::dynamics::SysState&lt; dim &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the size of the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="137" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a47ce9c603739c7c1402b1e2f86ae29c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::array&lt; <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref>, dim &gt;</type>
        <definition>const std::array&lt; real_t, dim &gt; rlenvscpp::dynamics::SysState&lt; dim &gt;::get_values</definition>
        <argsstring>() const</argsstring>
        <name>get_values</name>
        <briefdescription>
<para>Returns a copy of the state values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="142" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="534" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a3acb2c34b2aa1288e03630b9c0c0a894" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string_view &gt;</type>
        <definition>const std::vector&lt; std::string_view &gt; rlenvscpp::dynamics::SysState&lt; dim &gt;::get_names</definition>
        <argsstring>() const</argsstring>
        <name>get_names</name>
        <briefdescription>
<para>Returns a copy of the state names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="147" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="547" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a086f268bb6d17850fda4777b26ef028c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>real_t &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator[]</definition>
        <argsstring>(uint_t)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="152" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="456" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a724a2364a7d50c56ba676266c2d1ffe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>const real_t &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator[]</definition>
        <argsstring>(uint_t) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="157" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a92ff17381d28194efb68058aaecf8331" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>real_t&amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator[]</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="162" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a5af9187eca28fb2423d0c49671f23793" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>const real_t&amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator[]</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="167" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>real_t &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator()</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="172" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="468" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a30948e7b6489d1decff8ee8efb65ad01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>const real_t &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator()</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="177" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="496" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a06fc915ceb12ed73bcc238abbf722ef9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>real_t&amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator()</definition>
        <argsstring>(const std::string_view name)</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="182" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a520073408e159029d2b44b6456dd353d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref> &amp;</type>
        <definition>const real_t&amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::operator()</definition>
        <argsstring>(const std::string_view name) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="187" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a24470f3566b8325326a5eefe461a6794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clear the state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="192" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="524" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a602703851f860a795a831e4b9b656623" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rlenvscpp::dynamics::SysState&lt; dim &gt;::print</definition>
        <argsstring>(std::ostream &amp;out) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Print the state at the given stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="197" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="561" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1aec8ea05f13cf6caf8583fc3363d25178" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string rlenvscpp::dynamics::SysState&lt; dim &gt;::as_string</definition>
        <argsstring>() const</argsstring>
        <name>as_string</name>
        <briefdescription>
<para>Return the state as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="202" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="575" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1a1b31be679959735b0ed1f409149aac71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::scale</definition>
        <argsstring>(real_t val)</argsstring>
        <name>scale</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scale the values of the state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="207" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="352" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classrlenvscpp_1_1dynamics_1_1SysState_1ad33269ed730db88b17808bbad1eabc79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlenvscpp::dynamics::SysState&lt; dim &gt;::set</definition>
        <argsstring>(const Container &amp;container)</argsstring>
        <name>set</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Set the values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="213" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="433" bodyend="446"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classrlenvscpp_1_1dynamics_1_1SysState" kindref="compound">SysState</ref> utility class describing the state of a system. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" line="22" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/dynamics/system_state.h" bodystart="23" bodyend="229"/>
    <listofallmembers>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1a85652b4c5155d88f472f2c03dacb83" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>add</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1af2d13ee3547111134ad30d43903ac9d1" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>add</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1aec8ea05f13cf6caf8583fc3363d25178" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>as_string</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a688071c902abf1cc861bfdd6f683027b" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>as_vector</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a24470f3566b8325326a5eefe461a6794" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>clear</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1af5a98e3389e307cdc2e6da5bb23b2dcf" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>dimension</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a465b91919dd1c303770e3948bb6dca0b" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>extract</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a6ed1a278efdbba35835c1ae30cbcd4f8" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>get</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a3acb2c34b2aa1288e03630b9c0c0a894" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>get_names</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a47ce9c603739c7c1402b1e2f86ae29c8" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>get_values</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90686a2cc7e3b46ff2d5e48c17474eb3" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator()</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a30948e7b6489d1decff8ee8efb65ad01" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator()</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a06fc915ceb12ed73bcc238abbf722ef9" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator()</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a520073408e159029d2b44b6456dd353d" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator()</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a37c3ec25b9e992e82251bad2a345a8f7" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator*=</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1abdfd1324c71e3ad9b9fa66db9a892bda" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator+=</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a7effe92048aacf541c5427413714f0ad" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator-=</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1ad238b6c24ef7771ab3f3cb0e65edb3de" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator=</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a86cb84ea82f4f8640b7e128d119f4112" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator=</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a086f268bb6d17850fda4777b26ef028c" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator[]</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a724a2364a7d50c56ba676266c2d1ffe4" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator[]</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a92ff17381d28194efb68058aaecf8331" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator[]</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a5af9187eca28fb2423d0c49671f23793" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>operator[]</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a602703851f860a795a831e4b9b656623" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>print</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1b31be679959735b0ed1f409149aac71" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>scale</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1d122c8cd8fccf081de7da3cef3cfaa" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>set</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a77793791e6876821131ed212f86a40e6" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>set</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1ad33269ed730db88b17808bbad1eabc79" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>set</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1ab1de050a473af719b0c0e6c948c403ed" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>size</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a66a387372640d6579587c2b8cb48814f" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>SysState</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1aeb44588fdc15198affe178d7ebef3111" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>SysState</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a1768ec97bb468141d6ada1e68e2c2d74" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>SysState</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a364dfc0b6e5aa41399d1c980a178f8e9" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>SysState</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a9495de450e552da023b82f9ea8c07e3d" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>SysState</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a3d9cd6d88bca75a0325b55dc0fd1ed62" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>SysState</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a90e13b369b78fea5f9acd25fa3708b29" prot="public" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>value_type</name></member>
      <member refid="classrlenvscpp_1_1dynamics_1_1SysState_1a58b0d103239c7a313ebbdd05cde37ba0" prot="private" virt="non-virtual"><scope>rlenvscpp::dynamics::SysState</scope><name>values_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
