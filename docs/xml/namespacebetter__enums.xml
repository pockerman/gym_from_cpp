<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacebetter__enums" kind="namespace" language="C++">
    <compoundname>better_enums</compoundname>
    <innerclass refid="structbetter__enums_1_1optional" prot="public">better_enums::optional</innerclass>
    <innerclass refid="structbetter__enums_1_1__eat__assign" prot="public">better_enums::_eat_assign</innerclass>
    <innerclass refid="structbetter__enums_1_1__iterable" prot="public">better_enums::_iterable</innerclass>
    <innerclass refid="structbetter__enums_1_1__initialize__at__program__start" prot="public">better_enums::_initialize_at_program_start</innerclass>
    <innerclass refid="structbetter__enums_1_1map__compare" prot="public">better_enums::map_compare</innerclass>
    <innerclass refid="structbetter__enums_1_1map__compare_3_01const_01char_01_5_01_4" prot="public">better_enums::map_compare&lt; const char * &gt;</innerclass>
    <innerclass refid="structbetter__enums_1_1map__compare_3_01const_01wchar__t_01_5_01_4" prot="public">better_enums::map_compare&lt; const wchar_t * &gt;</innerclass>
    <innerclass refid="structbetter__enums_1_1map" prot="public">better_enums::map</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="enum_8h_1a93ec15c5aa546b66def6eeb141c1f90c" prot="public" static="yes" mutable="no">
        <type>BETTER_ENUMS_CONSTEXPR_ const char *</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ const char* better_enums::_name_enders</definition>
        <argsstring></argsstring>
        <name>_name_enders</name>
        <initializer>= &quot;= \t\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="453" column="49" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="enum_8h_1a4f1bb6e33bc209d4f3e95d43a826d1d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ T</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ T better_enums::_default</definition>
        <argsstring>()</argsstring>
        <name>_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="315" column="34" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a375cbb94afd973fe9a4f463422a3a14f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ const char *</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ const char* better_enums::_default&lt; const char * &gt;</definition>
        <argsstring>()</argsstring>
        <name>_default&lt; const char * &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="321" column="38" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a458a57eb9a82b9b8c1e6028b49b87f56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ std::size_t</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ std::size_t better_enums::_default&lt; std::size_t &gt;</definition>
        <argsstring>()</argsstring>
        <name>_default&lt; std::size_t &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="327" column="32" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1aa88b3980f0f6cfde383d9e06d47b082a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CastTo</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ <ref refid="structbetter__enums_1_1optional" kindref="compound">optional</ref>&lt; CastTo &gt;</type>
        <definition>static BETTER_ENUMS_CONSTEXPR_ optional&lt;CastTo&gt; better_enums::_map_index</definition>
        <argsstring>(const Element *array, optional&lt; std::size_t &gt; index)</argsstring>
        <name>_map_index</name>
        <param>
          <type>const Element *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structbetter__enums_1_1optional" kindref="compound">optional</ref>&lt; std::size_t &gt;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="353" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a23417a58e2830e58b6d409095b9012ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>better_enums::BETTER_ENUMS_IF_EXCEPTIONS</definition>
        <argsstring>(template&lt; typename T &gt; BETTER_ENUMS_CONSTEXPR_ static T _or_throw(optional&lt; T &gt; maybe, const char *message) { BETTER_ENUMS_OR_THROW }) template&lt; typename T &gt; BETTER_ENUMS_CONSTEXPR_ static T *_or_null(optional&lt; T * &gt; maybe)</argsstring>
        <name>BETTER_ENUMS_IF_EXCEPTIONS</name>
        <param>
          <type>template&lt; typename T &gt; BETTER_ENUMS_CONSTEXPR_ static T _or_throw(<ref refid="structbetter__enums_1_1optional" kindref="compound">optional</ref>&lt; T &gt; maybe, const char *message) { BETTER_ENUMS_OR_THROW }</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="373" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="373" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a7e9c530cb968a0b599ae9ed6d4124c2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ T</type>
        <definition>static BETTER_ENUMS_CONSTEXPR_ T better_enums::_or_zero</definition>
        <argsstring>(optional&lt; T &gt; maybe)</argsstring>
        <name>_or_zero</name>
        <param>
          <type><ref refid="structbetter__enums_1_1optional" kindref="compound">optional</ref>&lt; T &gt;</type>
          <declname>maybe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="389" column="34" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1ad74f794da6b22ed22b021fffe1a46b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ U</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ U better_enums::continue_with</definition>
        <argsstring>(T, U value)</argsstring>
        <name>continue_with</name>
        <param>
          <type>T</type>
        </param>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="403" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="403" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a30503c6d0e4871dfa52fde9bb515903f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ bool</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ bool better_enums::_ends_name</definition>
        <argsstring>(char c, std::size_t index=0)</argsstring>
        <name>_ends_name</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="455" column="37" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="455" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a9f325b8d097599d0529c1fde530adfab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ bool</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ bool better_enums::_has_initializer</definition>
        <argsstring>(const char *s, std::size_t index=0)</argsstring>
        <name>_has_initializer</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="463" column="37" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="463" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1ad44f0fdc429311d9301d933e0e2953d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ std::size_t</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ std::size_t better_enums::_constant_length</definition>
        <argsstring>(const char *s, std::size_t index=0)</argsstring>
        <name>_constant_length</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="473" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a9d3f1ff4fa870174a2e7456f6f297214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ char</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ char better_enums::_select</definition>
        <argsstring>(const char *from, std::size_t from_length, std::size_t index)</argsstring>
        <name>_select</name>
        <param>
          <type>const char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>from_length</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="479" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a281e8269fa7da68d68c937ad9205f5b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ char</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ char better_enums::_to_lower_ascii</definition>
        <argsstring>(char c)</argsstring>
        <name>_to_lower_ascii</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="484" column="37" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a55572a154e665d346ff54a7f3fae97be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ bool</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ bool better_enums::_names_match</definition>
        <argsstring>(const char *stringizedName, const char *referenceName, std::size_t index=0)</argsstring>
        <name>_names_match</name>
        <param>
          <type>const char *</type>
          <declname>stringizedName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>referenceName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="489" column="37" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="489" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a05f9c94b194edf158078e65d00834d3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BETTER_ENUMS_CONSTEXPR_ bool</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ bool better_enums::_names_match_nocase</definition>
        <argsstring>(const char *stringizedName, const char *referenceName, std::size_t index=0)</argsstring>
        <name>_names_match_nocase</name>
        <param>
          <type>const char *</type>
          <declname>stringizedName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>referenceName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="501" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="501" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a8687d1e2909ae8f3a63eff46d5623347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void better_enums::_trim_names</definition>
        <argsstring>(const char *const *raw_names, const char **trimmed_names, char *storage, std::size_t count)</argsstring>
        <name>_trim_names</name>
        <param>
          <type>const char *const *</type>
          <declname>raw_names</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>trimmed_names</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>storage</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="512" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="512" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="enum_8h_1a26b5d5243a88b0e85e75636e14b09ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>BETTER_ENUMS_CONSTEXPR_ <ref refid="structbetter__enums_1_1map" kindref="compound">map</ref>&lt; Enum, T &gt;</type>
        <definition>BETTER_ENUMS_CONSTEXPR_ map&lt;Enum, T&gt; better_enums::make_map</definition>
        <argsstring>(T(*f)(Enum))</argsstring>
        <name>make_map</name>
        <param>
          <type>T(*)(Enum)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="1308" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" bodystart="1308" bodyend="1311"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/enum.h" line="309" column="1"/>
  </compounddef>
</doxygen>
