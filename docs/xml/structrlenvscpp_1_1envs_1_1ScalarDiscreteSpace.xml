<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace" kind="struct" language="C++" prot="public">
    <compoundname>rlenvscpp::envs::ScalarDiscreteSpace</compoundname>
    <includes refid="space__type_8h" local="no">space_type.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
        <declname>s</declname>
        <defname>s</defname>
      </param>
      <param>
        <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
        <declname>e</declname>
        <defname>e</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" prot="public" static="no">
        <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
        <definition>typedef uint_t rlenvscpp::envs::ScalarDiscreteSpace&lt; s, e &gt;::space_item_type</definition>
        <argsstring></argsstring>
        <name>space_item_type</name>
        <briefdescription>
<para>item_t </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="24" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a4b2cf64e5eb56cf2bead3b512bd9afe9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange</ref>&lt; s, e &gt;</type>
        <definition>constexpr IntegralRange&lt;s, e&gt; rlenvscpp::envs::ScalarDiscreteSpace&lt; s, e &gt;::limits</definition>
        <argsstring></argsstring>
        <name>limits</name>
        <initializer>= <ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange</ref>&lt;s, e&gt;()</initializer>
        <briefdescription>
<para>The limits of the space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="29" column="32" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a5f42da19b2972641a9c27eb83bccec92" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
        <definition>constexpr uint_t rlenvscpp::envs::ScalarDiscreteSpace&lt; s, e &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= <ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange</ref>&lt;s, e&gt;::size</initializer>
        <briefdescription>
<para>The overall size of the space meaning how many elements can potentially the space have. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="35" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">space_item_type</ref></type>
        <definition>ScalarDiscreteSpace&lt; s, e &gt;::space_item_type rlenvscpp::envs::ScalarDiscreteSpace&lt; s, e &gt;::sample</definition>
        <argsstring>(bool use_end)</argsstring>
        <name>sample</name>
        <param>
          <type>bool</type>
          <declname>use_end</declname>
        </param>
        <briefdescription>
<para>sample </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="41" column="28" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="61" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a68783fbe9c4e25ea5c7d1975fcec701c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">space_item_type</ref></type>
        <definition>ScalarDiscreteSpace&lt; s, e &gt;::space_item_type rlenvscpp::envs::ScalarDiscreteSpace&lt; s, e &gt;::sample</definition>
        <argsstring>(uint_t seed, bool use_end)</argsstring>
        <name>sample</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_end</declname>
        </param>
        <briefdescription>
<para>sample </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="48" column="28" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="77" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1ac8f13090439351db07b6c1186545ed5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">space_item_type</ref> &gt;</type>
        <definition>std::vector&lt; typename ScalarDiscreteSpace&lt; s, e &gt;::space_item_type &gt; rlenvscpp::envs::ScalarDiscreteSpace&lt; s, e &gt;::sample</definition>
        <argsstring>(uint_t seed, uint_t size, bool use_end)</argsstring>
        <name>sample</name>
        <param>
          <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_end</declname>
        </param>
        <briefdescription>
<para>sample </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="55" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="92" bodyend="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A scalar discrete space can be used to denote a space that only has a single value at each time. For example consider the FrozenLake environment then both the state and the action spaces are <ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace" kindref="compound">ScalarDiscreteSpace</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" line="19" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h" bodystart="19" bodyend="57"/>
    <listofallmembers>
      <member refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a4b2cf64e5eb56cf2bead3b512bd9afe9" prot="public" virt="non-virtual"><scope>rlenvscpp::envs::ScalarDiscreteSpace</scope><name>limits</name></member>
      <member refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" prot="public" virt="non-virtual"><scope>rlenvscpp::envs::ScalarDiscreteSpace</scope><name>sample</name></member>
      <member refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a68783fbe9c4e25ea5c7d1975fcec701c" prot="public" virt="non-virtual"><scope>rlenvscpp::envs::ScalarDiscreteSpace</scope><name>sample</name></member>
      <member refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1ac8f13090439351db07b6c1186545ed5c" prot="public" virt="non-virtual"><scope>rlenvscpp::envs::ScalarDiscreteSpace</scope><name>sample</name></member>
      <member refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a5f42da19b2972641a9c27eb83bccec92" prot="public" virt="non-virtual"><scope>rlenvscpp::envs::ScalarDiscreteSpace</scope><name>size</name></member>
      <member refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" prot="public" virt="non-virtual"><scope>rlenvscpp::envs::ScalarDiscreteSpace</scope><name>space_item_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
