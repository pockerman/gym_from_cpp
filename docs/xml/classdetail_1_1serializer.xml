<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdetail_1_1serializer" kind="class" language="C++" prot="public">
    <compoundname>detail::serializer</compoundname>
    <templateparamlist>
      <param>
        <type>typename BasicJsonType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classdetail_1_1serializer_1aac47594d3c641fbde34f97badb149be2" prot="private" static="no">
        <type>typename BasicJsonType::string_t</type>
        <definition>using detail::serializer&lt; BasicJsonType &gt;::string_t =  typename BasicJsonType::string_t</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18062" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1serializer_1a9557e99e8e13c7239c5613cd5f0706de" prot="private" static="no">
        <type>typename BasicJsonType::number_float_t</type>
        <definition>using detail::serializer&lt; BasicJsonType &gt;::number_float_t =  typename BasicJsonType::number_float_t</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18063" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1serializer_1a8b88ea030c1aae84d0e2ecb562c5285b" prot="private" static="no">
        <type>typename BasicJsonType::number_integer_t</type>
        <definition>using detail::serializer&lt; BasicJsonType &gt;::number_integer_t =  typename BasicJsonType::number_integer_t</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18064" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1serializer_1a3a55fb2d953e0e60a673d3db320c2177" prot="private" static="no">
        <type>typename BasicJsonType::number_unsigned_t</type>
        <definition>using detail::serializer&lt; BasicJsonType &gt;::number_unsigned_t =  typename BasicJsonType::number_unsigned_t</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18065" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1serializer_1a1ac757c21b1db6c1147ae5ff486132f0" prot="private" static="no">
        <type>typename BasicJsonType::binary_t::value_type</type>
        <definition>using detail::serializer&lt; BasicJsonType &gt;::binary_char_t =  typename BasicJsonType::binary_t::value_type</definition>
        <argsstring></argsstring>
        <name>binary_char_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18066" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18066" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdetail_1_1serializer_1ae438db375240b68486babdd41798d0e7" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::uint8_t</type>
        <definition>constexpr std::uint8_t detail::serializer&lt; BasicJsonType &gt;::UTF8_ACCEPT</definition>
        <argsstring></argsstring>
        <name>UTF8_ACCEPT</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18067" column="35" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a5d2ff388d1b974d55b4032a6226d5dbe" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::uint8_t</type>
        <definition>constexpr std::uint8_t detail::serializer&lt; BasicJsonType &gt;::UTF8_REJECT</definition>
        <argsstring></argsstring>
        <name>UTF8_REJECT</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18068" column="35" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18068" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdetail_1_1serializer_1aae0aca92f2f35e72aac9c7d22e01312b" prot="public" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED detail::serializer&lt; BasicJsonType &gt;::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <bitfield> void dump_escaped(const string_t&amp; s</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18385" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a414071fcc39c97fa8e64455a222d8d08" prot="public" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED const bool</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const bool detail::serializer&lt; BasicJsonType &gt;::ensure_ascii</definition>
        <argsstring></argsstring>
        <name>ensure_ascii</name>
        <initializer>{
        std::uint32_t codepoint{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18400" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a2db3d61cfc616f83763b6d4a03d0d772" prot="public" static="no" mutable="no">
        <type>std::uint8_t</type>
        <definition>std::uint8_t detail::serializer&lt; BasicJsonType &gt;::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= UTF8_ACCEPT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18403" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1ae08644483db303ce3d1580332ff0a458" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t detail::serializer&lt; BasicJsonType &gt;::bytes</definition>
        <argsstring></argsstring>
        <name>bytes</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18404" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a3c23eca4cc58a835a0a08ff580dcaae0" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t detail::serializer&lt; BasicJsonType &gt;::bytes_after_last_accept</definition>
        <argsstring></argsstring>
        <name>bytes_after_last_accept</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18407" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a44a05646a5ac7caec54f97ba17cb893b" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t detail::serializer&lt; BasicJsonType &gt;::undumped_chars</definition>
        <argsstring></argsstring>
        <name>undumped_chars</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18408" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a1cef7f1e504d729887dc828910497cd2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::else</definition>
        <argsstring></argsstring>
        <name>else</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18607" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1ace18a55b8304310fee309d31e54a3e27" prot="public" static="no" mutable="no">
        <type>std::array&lt; char, 64 &gt;</type>
        <definition>std::array&lt;char, 64&gt; detail::serializer&lt; BasicJsonType &gt;::number_buffer</definition>
        <argsstring></argsstring>
        <name>number_buffer</name>
        <initializer>{{}}</initializer>
        <briefdescription>
<para>a (hopefully) large enough character buffer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18975" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a80ca90565eec446d377ab65a023297ab" prot="public" static="no" mutable="no">
        <type>const std::lconv *</type>
        <definition>const std::lconv* detail::serializer&lt; BasicJsonType &gt;::loc</definition>
        <argsstring></argsstring>
        <name>loc</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>the locale </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18978" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a5b75b99511362e4e5d011c8a961e96bb" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char detail::serializer&lt; BasicJsonType &gt;::thousands_sep</definition>
        <argsstring></argsstring>
        <name>thousands_sep</name>
        <initializer>= &apos;\0&apos;</initializer>
        <briefdescription>
<para>the locale&apos;s thousand separator character </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18980" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a5f01fcbf64cb1e5f36d8853ebcd96412" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char detail::serializer&lt; BasicJsonType &gt;::decimal_point</definition>
        <argsstring></argsstring>
        <name>decimal_point</name>
        <initializer>= &apos;\0&apos;</initializer>
        <briefdescription>
<para>the locale&apos;s decimal point character </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18982" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a27a61728ed0fbc65de009286531a6e70" prot="public" static="no" mutable="no">
        <type>std::array&lt; char, 512 &gt;</type>
        <definition>std::array&lt;char, 512&gt; detail::serializer&lt; BasicJsonType &gt;::string_buffer</definition>
        <argsstring></argsstring>
        <name>string_buffer</name>
        <initializer>{{}}</initializer>
        <briefdescription>
<para>string buffer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18985" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1acf6f783e3299d8b18ce4b5d9746f39f6" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char detail::serializer&lt; BasicJsonType &gt;::indent_char</definition>
        <argsstring></argsstring>
        <name>indent_char</name>
        <briefdescription>
<para>the indentation character </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18988" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a7f6f1d36859514ab42984deb28d2521e" prot="public" static="no" mutable="no">
        <type>string_t</type>
        <definition>string_t detail::serializer&lt; BasicJsonType &gt;::indent_string</definition>
        <argsstring></argsstring>
        <name>indent_string</name>
        <briefdescription>
<para>the indentation string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18990" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1serializer_1a79d25c7416dd71a0db8b10988ec360f7" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" kindref="member">error_handler_t</ref></type>
        <definition>const error_handler_t detail::serializer&lt; BasicJsonType &gt;::error_handler</definition>
        <argsstring></argsstring>
        <name>error_handler</name>
        <briefdescription>
<para>error_handler how to react on decoding errors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18993" column="27" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18993" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdetail_1_1serializer_1a3d025f3aa1e8661554858b8aaab08c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::serializer</definition>
        <argsstring>(output_adapter_t&lt; char &gt; s, const char ichar, error_handler_t error_handler_=error_handler_t::strict)</argsstring>
        <name>serializer</name>
        <param>
          <type><ref refid="namespacedetail_1a160eb5d333fe01b259af32d3d4798a7b" kindref="member">output_adapter_t</ref>&lt; char &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>ichar</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" kindref="member">error_handler_t</ref></type>
          <declname>error_handler_</declname>
          <defval><ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a2133fd717402a7966ee88d06f9e0b792" kindref="member">error_handler_t::strict</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream to serialize to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ichar</parametername>
</parameternamelist>
<parameterdescription>
<para>indentation character to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">error_handler_</parametername>
</parameternamelist>
<parameterdescription>
<para>how to react on decoding errors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18076" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18076" bodyend="18085"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1aee27a802605bff8959928c98c2d81e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::serializer</definition>
        <argsstring>(const serializer &amp;)=delete</argsstring>
        <name>serializer</name>
        <param>
          <type>const <ref refid="classdetail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18088" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1a8e880742faf02f6a513239c6441cb5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdetail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        <definition>serializer&amp; detail::serializer&lt; BasicJsonType &gt;::operator=</definition>
        <argsstring>(const serializer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdetail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18089" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1af84deb8c14f27012063e02ce6b7a9c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::serializer</definition>
        <argsstring>(serializer &amp;&amp;)=delete</argsstring>
        <name>serializer</name>
        <param>
          <type><ref refid="classdetail_1_1serializer" kindref="compound">serializer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18090" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1a01d644f10c6d827d1a0e3c23b609902a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdetail_1_1serializer" kindref="compound">serializer</ref> &amp;</type>
        <definition>serializer&amp; detail::serializer&lt; BasicJsonType &gt;::operator=</definition>
        <argsstring>(serializer &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdetail_1_1serializer" kindref="compound">serializer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18091" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1a6da545edc260d2582353b5cd58964a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::~serializer</definition>
        <argsstring>()=default</argsstring>
        <name>~serializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18092" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1ae73c1bac64bcc810923b9f1261af8b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void detail::serializer&lt; BasicJsonType &gt;::dump</definition>
        <argsstring>(const BasicJsonType &amp;val, const bool pretty_print, const bool ensure_ascii, const unsigned int indent_step, const unsigned int current_indent=0)</argsstring>
        <name>dump</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>pretty_print</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>indent_step</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>current_indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>internal implementation of the serialization function </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the public member function dump and organizes the serialization internally. The indentation level is propagated as additional parameter. In case of arrays and objects, the function is called recursively.</para>
<para><itemizedlist>
<listitem><para>strings and object keys are escaped using <computeroutput>escape_string()</computeroutput></para>
</listitem><listitem><para>integer numbers are converted implicitly via <computeroutput>operator&lt;&lt;</computeroutput></para>
</listitem><listitem><para>floating-point numbers are converted to a string using <computeroutput>&quot;%g&quot;</computeroutput> format</para>
</listitem><listitem><para>binary values are serialized as objects containing the subtype and the byte array</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pretty_print</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the output shall be pretty-printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ensure_ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>If <emphasis>ensure_ascii</emphasis> is true, all non-ASCII characters in the output are escaped with <computeroutput>\uXXXX</computeroutput> sequences, and the result consists of ASCII characters only. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent_step</parametername>
</parameternamelist>
<parameterdescription>
<para>the indent level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">current_indent</parametername>
</parameternamelist>
<parameterdescription>
<para>the current indent level (only used internally) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18116" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18116" bodyend="18383"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1a491abc2de2affbc9c3490bde110b7f07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::for</definition>
        <argsstring>(std::size_t i=0;i&lt; s.size();++i)</argsstring>
        <name>for</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18410" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18410" bodyend="18596"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1serializer_1a167710da81ad08541c61bc5640d15688" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>detail::serializer&lt; BasicJsonType &gt;::if</definition>
        <argsstring>(JSON_HEDLEY_LIKELY(state==UTF8_ACCEPT))</argsstring>
        <name>if</name>
        <param>
          <type>JSON_HEDLEY_LIKELY(state==UTF8_ACCEPT)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18599" column="9" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18599" bodyend="18606"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18060" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18061" bodyend="18994"/>
    <listofallmembers>
      <member refid="classdetail_1_1serializer_1aae0aca92f2f35e72aac9c7d22e01312b" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>__pad0__</name></member>
      <member refid="classdetail_1_1serializer_1a1ac757c21b1db6c1147ae5ff486132f0" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>binary_char_t</name></member>
      <member refid="classdetail_1_1serializer_1ae08644483db303ce3d1580332ff0a458" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>bytes</name></member>
      <member refid="classdetail_1_1serializer_1a3c23eca4cc58a835a0a08ff580dcaae0" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>bytes_after_last_accept</name></member>
      <member refid="classdetail_1_1serializer_1a5f01fcbf64cb1e5f36d8853ebcd96412" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>decimal_point</name></member>
      <member refid="classdetail_1_1serializer_1ae73c1bac64bcc810923b9f1261af8b09" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>dump</name></member>
      <member refid="classdetail_1_1serializer_1a1cef7f1e504d729887dc828910497cd2" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>else</name></member>
      <member refid="classdetail_1_1serializer_1a414071fcc39c97fa8e64455a222d8d08" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>ensure_ascii</name></member>
      <member refid="classdetail_1_1serializer_1a79d25c7416dd71a0db8b10988ec360f7" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>error_handler</name></member>
      <member refid="classdetail_1_1serializer_1a491abc2de2affbc9c3490bde110b7f07" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>for</name></member>
      <member refid="classdetail_1_1serializer_1a167710da81ad08541c61bc5640d15688" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>if</name></member>
      <member refid="classdetail_1_1serializer_1acf6f783e3299d8b18ce4b5d9746f39f6" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>indent_char</name></member>
      <member refid="classdetail_1_1serializer_1a7f6f1d36859514ab42984deb28d2521e" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>indent_string</name></member>
      <member refid="classdetail_1_1serializer_1a80ca90565eec446d377ab65a023297ab" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>loc</name></member>
      <member refid="classdetail_1_1serializer_1ace18a55b8304310fee309d31e54a3e27" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>number_buffer</name></member>
      <member refid="classdetail_1_1serializer_1a9557e99e8e13c7239c5613cd5f0706de" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>number_float_t</name></member>
      <member refid="classdetail_1_1serializer_1a8b88ea030c1aae84d0e2ecb562c5285b" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>number_integer_t</name></member>
      <member refid="classdetail_1_1serializer_1a3a55fb2d953e0e60a673d3db320c2177" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>number_unsigned_t</name></member>
      <member refid="classdetail_1_1serializer_1a8e880742faf02f6a513239c6441cb5af" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>operator=</name></member>
      <member refid="classdetail_1_1serializer_1a01d644f10c6d827d1a0e3c23b609902a" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>operator=</name></member>
      <member refid="classdetail_1_1serializer_1a3d025f3aa1e8661554858b8aaab08c3b" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>serializer</name></member>
      <member refid="classdetail_1_1serializer_1aee27a802605bff8959928c98c2d81e8f" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>serializer</name></member>
      <member refid="classdetail_1_1serializer_1af84deb8c14f27012063e02ce6b7a9c86" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>serializer</name></member>
      <member refid="classdetail_1_1serializer_1a2db3d61cfc616f83763b6d4a03d0d772" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>state</name></member>
      <member refid="classdetail_1_1serializer_1a27a61728ed0fbc65de009286531a6e70" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>string_buffer</name></member>
      <member refid="classdetail_1_1serializer_1aac47594d3c641fbde34f97badb149be2" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>string_t</name></member>
      <member refid="classdetail_1_1serializer_1a5b75b99511362e4e5d011c8a961e96bb" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>thousands_sep</name></member>
      <member refid="classdetail_1_1serializer_1a44a05646a5ac7caec54f97ba17cb893b" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>undumped_chars</name></member>
      <member refid="classdetail_1_1serializer_1ae438db375240b68486babdd41798d0e7" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>UTF8_ACCEPT</name></member>
      <member refid="classdetail_1_1serializer_1a5d2ff388d1b974d55b4032a6226d5dbe" prot="private" virt="non-virtual"><scope>detail::serializer</scope><name>UTF8_REJECT</name></member>
      <member refid="classdetail_1_1serializer_1a6da545edc260d2582353b5cd58964a20" prot="public" virt="non-virtual"><scope>detail::serializer</scope><name>~serializer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
