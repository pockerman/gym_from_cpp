<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="space__type_8h" kind="file" language="C++">
    <compoundname>space_type.h</compoundname>
    <includes refid="rlenvs__types__v2_8h" local="yes">rlenvs/rlenvs_types_v2.h</includes>
    <includes local="no">random</includes>
    <includes local="no">vector</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="env__types_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/env_types.h</includedby>
    <includedby refid="grid__world__env_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/grid_world/grid_world_env.h</includedby>
    <includedby refid="acrobot__vec__env_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/vector/acrobot_vec_env.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="3">
        <label>rlenvs/rlenvscpp_config.h</label>
        <link refid="rlenvscpp__config_8h_source"/>
      </node>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h</label>
        <link refid="space__type_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>random</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="2">
        <label>rlenvs/rlenvs_types_v2.h</label>
        <link refid="rlenvs__types__v2_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/toy_text/taxi_env.h</label>
        <link refid="taxi__env_8h_source"/>
      </node>
      <node id="11">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/vector/acrobot_vec_env.h</label>
        <link refid="acrobot__vec__env_8h_source"/>
      </node>
      <node id="3">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/connect2/connect2_env.h</label>
        <link refid="connect2__env_8h_source"/>
      </node>
      <node id="10">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/gymnasium_vector_env_base.h</label>
        <link refid="gymnasium__vector__env__base_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/toy_text/black_jack_env.h</label>
        <link refid="black__jack__env_8h_source"/>
      </node>
      <node id="14">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/toy_text/cliff_world_env.h</label>
        <link refid="cliff__world__env_8h_source"/>
      </node>
      <node id="17">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/grid_world/grid_world_env.h</label>
        <link refid="grid__world__env_8h_source"/>
      </node>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h</label>
        <link refid="space__type_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/toy_text/frozen_lake_env.h</label>
        <link refid="frozen__lake__env_8h_source"/>
      </node>
      <node id="6">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/cart_pole_env.h</label>
        <link refid="cart__pole__env_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/state_aggregation_cart_pole_env.h</label>
        <link refid="state__aggregation__cart__pole__env_8h_source"/>
      </node>
      <node id="8">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/mountain_car_env.h</label>
        <link refid="mountain__car__env_8h_source"/>
      </node>
      <node id="12">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/toy_text/toy_text_base.h</label>
        <link refid="toy__text__base_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/acrobot_env.h</label>
        <link refid="acrobot__env_8h_source"/>
      </node>
      <node id="9">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gymnasium/classic_control/pendulum_env.h</label>
        <link refid="pendulum__env_8h_source"/>
      </node>
      <node id="4">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/gdrl/gym_walk.h</label>
        <link refid="gym__walk_8h_source"/>
      </node>
      <node id="2">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/env_types.h</label>
        <link refid="env__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace" prot="public">rlenvscpp::envs::ScalarDiscreteSpace</innerclass>
    <innerclass refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace" prot="public">rlenvscpp::envs::ContinuousScalareSpace</innerclass>
    <innerclass refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace" prot="public">rlenvscpp::envs::BoundedContinuousScalarSpace</innerclass>
    <innerclass refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace" prot="public">rlenvscpp::envs::ContinuousVectorSpace</innerclass>
    <innerclass refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace" prot="public">rlenvscpp::envs::DiscreteVectorSpace</innerclass>
    <innernamespace refid="namespacerlenvscpp">rlenvscpp</innernamespace>
    <innernamespace refid="namespacerlenvscpp_1_1envs">rlenvscpp::envs</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SPACE_TYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPACE_TYPE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rlenvs/rlenvs_types_v2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerlenvscpp" kindref="compound">rlenvscpp</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">envs{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>s,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>e&gt;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="19" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace" kindref="compound">ScalarDiscreteSpace</ref>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">space_item_type</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a4b2cf64e5eb56cf2bead3b512bd9afe9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a4b2cf64e5eb56cf2bead3b512bd9afe9" kindref="member">limits</ref><sp/>=<sp/><ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a5f42da19b2972641a9c27eb83bccec92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a5f42da19b2972641a9c27eb83bccec92" kindref="member">size</ref><sp/>=<sp/><ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::size</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">space_item_type</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" kindref="member">sample</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_end);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">space_item_type</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" kindref="member">sample</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>seed,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_end);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;space_item_type&gt;<sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" kindref="member">sample</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>seed,<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a5f42da19b2972641a9c27eb83bccec92" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_end);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>s,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>e&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">ScalarDiscreteSpace&lt;s, e&gt;::space_item_type</ref></highlight></codeline>
<codeline lineno="61" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" refkind="member"><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" kindref="member">ScalarDiscreteSpace&lt;s, e&gt;::sample</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_end){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>E<sp/>=<sp/><ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::E</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!use_end){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(<ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::S</ref>,<sp/>E);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(rd());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist(gen);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>s,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>e&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1adf96cb5d4e92b211720b6991f28b93f6" kindref="member">ScalarDiscreteSpace&lt;s, e&gt;::space_item_type</ref></highlight></codeline>
<codeline lineno="77" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a68783fbe9c4e25ea5c7d1975fcec701c" refkind="member"><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" kindref="member">ScalarDiscreteSpace&lt;s, e&gt;::sample</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>seed,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_end){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>E<sp/>=<sp/><ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::E</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!use_end){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(<ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::S</ref>,<sp/>E);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(seed);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist(gen);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>s,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>e&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">std::vector&lt;typename<sp/>ScalarDiscreteSpace&lt;s,<sp/>e&gt;::space_item_type&gt;</highlight></codeline>
<codeline lineno="92" refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1ac8f13090439351db07b6c1186545ed5c" refkind="member"><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1ScalarDiscreteSpace_1a1276b7c7eb787900e671ec8b86d3f202" kindref="member">ScalarDiscreteSpace&lt;s, e&gt;::sample</ref>(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>seed,<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_end){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>E<sp/>=<sp/><ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::E</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!use_end){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>ScalarDiscreteSpace&lt;s,<sp/>e&gt;::space_item_type&gt;<sp/>vals_;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>vals_.reserve(size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(<ref refid="structrlenvscpp_1_1IntegralRange" kindref="compound">IntegralRange&lt;s, e&gt;::S</ref>,<sp/>E);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(seed);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>i=0;<sp/>i&lt;size;<sp/>++i){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals_.push_back(dist(gen));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vals_;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>Size&gt;</highlight></codeline>
<codeline lineno="115" refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace" kindref="compound">ContinuousScalareSpace</ref></highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120" refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace_1ac0c05ccc5883e0e4075024cd11e55dbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace_1ac0c05ccc5883e0e4075024cd11e55dbd" kindref="member">space_item_type</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace_1a658d4b2a9d4d63893dffe8044aef5da7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ContinuousScalareSpace_1a658d4b2a9d4d63893dffe8044aef5da7" kindref="member">size</ref><sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keyword">template</highlight><highlight class="normal">&lt;real_t<sp/>S,<sp/>real_t<sp/>E&gt;</highlight></codeline>
<codeline lineno="133" refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace" kindref="compound">BoundedContinuousScalarSpace</ref></highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138" refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace_1ade5619bbd9c2fbc62a314562ba7465bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace_1ade5619bbd9c2fbc62a314562ba7465bd" kindref="member">space_item_type</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144" refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace_1a1492417146f05ef0507d8aa374b834bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace_1a1492417146f05ef0507d8aa374b834bc" kindref="member">size</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149" refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace_1ad80e0feb90cbf6bce1dcab1526113a87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structrlenvscpp_1_1RealRange" kindref="compound">RealRange&lt;S, E&gt;</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1BoundedContinuousScalarSpace_1ad80e0feb90cbf6bce1dcab1526113a87" kindref="member">limits</ref><sp/>=<sp/><ref refid="structrlenvscpp_1_1RealRange" kindref="compound">RealRange&lt;S, E&gt;</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>Size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T=real_t&gt;</highlight></codeline>
<codeline lineno="154" refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace" kindref="compound">ContinuousVectorSpace</ref></highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_floating_point_v&lt;T&gt;<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Floating<sp/>point<sp/>type<sp/>is<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162" refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace_1ae084ddd1e6a365db33ec415f98533246" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace_1ae084ddd1e6a365db33ec415f98533246" kindref="member">size</ref><sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167" refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace_1a7b632ae4bacbc9751359477877594a56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/><ref refid="structrlenvscpp_1_1envs_1_1ContinuousVectorSpace_1a7b632ae4bacbc9751359477877594a56" kindref="member">space_item_type</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*template&lt;uint_t<sp/>SpaceSize&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="comment">typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type</highlight></codeline>
<codeline lineno="176"><highlight class="comment">DiscreteSpace&lt;SpaceSize&gt;::sample(uint_t<sp/>seed){</highlight></codeline>
<codeline lineno="177"><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(0,<sp/>SpaceSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(seed);</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>dist(gen);</highlight></codeline>
<codeline lineno="181"><highlight class="comment">}</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="comment">std::vector&lt;typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type&gt;</highlight></codeline>
<codeline lineno="185"><highlight class="comment">DiscreteSpace&lt;SpaceSize&gt;::sample(uint_t<sp/>seed,<sp/>uint_t<sp/>size){</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type&gt;<sp/>vals_;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/>vals_.reserve(size);</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(0,<sp/>SpaceSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(seed);</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;size;<sp/>++i){</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals_.push_back(dist(gen));</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>vals_;</highlight></codeline>
<codeline lineno="198"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="201"><highlight class="comment">template&lt;typename<sp/>T=real_t&gt;<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="comment">struct<sp/>ScalarContinuousSpace</highlight></codeline>
<codeline lineno="203"><highlight class="comment">{</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>static_assert(std::is_floating_point_v&lt;T&gt;<sp/>==<sp/>true<sp/>&amp;&amp;<sp/>&quot;Floating<sp/>point<sp/>type<sp/>is<sp/>expected&quot;);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>T<sp/>space_item_type;</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>uint_t<sp/>size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="comment">};</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">template&lt;typename<sp/>uint_t<sp/>SpaceSize,<sp/>typename<sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="comment">struct<sp/>DiscreteVectorSpace;</highlight></codeline>
<codeline lineno="227"><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize,<sp/>typename<sp/>T=uint_t&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="comment">struct<sp/>DiscreteVectorSpace&lt;SpaceSize,<sp/>DynVec&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="comment">{</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>static_assert(std::is_integral_v&lt;T&gt;<sp/>==<sp/>true<sp/>&amp;&amp;<sp/>&quot;Integral<sp/>type<sp/>is<sp/>expected&quot;);</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>std::vector&lt;T&gt;<sp/>space_item_type;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>uint_t<sp/>size<sp/>=<sp/>SpaceSize;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>space_item_type<sp/>sample();</highlight></codeline>
<codeline lineno="249"><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>space_item_type<sp/>sample(uint_t<sp/>seed);</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>std::vector&lt;space_item_type&gt;<sp/>sample(uint_t<sp/>seed,<sp/>uint_t<sp/>size);</highlight></codeline>
<codeline lineno="263"><highlight class="comment">};</highlight></codeline>
<codeline lineno="264"><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize,<sp/>typename<sp/>T=uint_t&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="comment">struct<sp/>DiscreteVectorSpace&lt;SpaceSize,<sp/>std::vector&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="268"><highlight class="comment">{</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/>static_assert(std::is_integral_v&lt;T&gt;<sp/>==<sp/>true<sp/>&amp;&amp;<sp/>&quot;Integral<sp/>type<sp/>is<sp/>expected&quot;);</highlight></codeline>
<codeline lineno="271"><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>std::vector&lt;T&gt;<sp/>space_item_type;</highlight></codeline>
<codeline lineno="276"><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>uint_t<sp/>size<sp/>=<sp/>SpaceSize;</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>space_item_type<sp/>sample();</highlight></codeline>
<codeline lineno="288"><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>space_item_type<sp/>sample(uint_t<sp/>seed);</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>std::vector&lt;space_item_type&gt;<sp/>sample(uint_t<sp/>seed,<sp/>uint_t<sp/>size);</highlight></codeline>
<codeline lineno="302"><highlight class="comment">};</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize&gt;</highlight></codeline>
<codeline lineno="305"><highlight class="comment">typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type</highlight></codeline>
<codeline lineno="306"><highlight class="comment">DiscreteSpace&lt;SpaceSize&gt;::sample(){</highlight></codeline>
<codeline lineno="307"><highlight class="comment"></highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(0,<sp/>SpaceSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(rd());</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>dist(gen);</highlight></codeline>
<codeline lineno="312"><highlight class="comment">}</highlight></codeline>
<codeline lineno="313"><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize&gt;</highlight></codeline>
<codeline lineno="315"><highlight class="comment">typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type</highlight></codeline>
<codeline lineno="316"><highlight class="comment">DiscreteSpace&lt;SpaceSize&gt;::sample(uint_t<sp/>seed){</highlight></codeline>
<codeline lineno="317"><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(0,<sp/>SpaceSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(seed);</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>dist(gen);</highlight></codeline>
<codeline lineno="321"><highlight class="comment">}</highlight></codeline>
<codeline lineno="322"><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize&gt;</highlight></codeline>
<codeline lineno="324"><highlight class="comment">std::vector&lt;typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type&gt;</highlight></codeline>
<codeline lineno="325"><highlight class="comment">DiscreteSpace&lt;SpaceSize&gt;::sample(uint_t<sp/>seed,<sp/>uint_t<sp/>size){</highlight></codeline>
<codeline lineno="326"><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>DiscreteSpace&lt;SpaceSize&gt;::space_item_type&gt;<sp/>vals_;</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>vals_.reserve(size);</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(0,<sp/>SpaceSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(seed);</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/>for(uint_t<sp/>i=0;<sp/>i&lt;size;<sp/>++i){</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals_.push_back(dist(gen));</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>vals_;</highlight></codeline>
<codeline lineno="338"><highlight class="comment">}</highlight></codeline>
<codeline lineno="339"><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment">template&lt;uint_t<sp/>SpaceSize,<sp/>typename<sp/>ItemType<sp/>=<sp/>std::vector&lt;real_t&gt;&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="comment">struct<sp/>ContinuousSpace{</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>std::vector&lt;real_t&gt;<sp/>space_item_type;</highlight></codeline>
<codeline lineno="347"><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>uint_t<sp/>size<sp/>=<sp/>SpaceSize;</highlight></codeline>
<codeline lineno="352"><highlight class="comment">};</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment">//template&lt;uint_t<sp/>SpaceSize&gt;</highlight></codeline>
<codeline lineno="358"><highlight class="comment">//struct<sp/>ContinuousSpace&lt;SpaceSize,<sp/>std::vector&lt;real_t&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="359"><highlight class="comment">//{</highlight></codeline>
<codeline lineno="360"><highlight class="comment">//<sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline lineno="361"><highlight class="comment">//<sp/><sp/><sp/><sp/>///<sp/>\brief<sp/>item_t</highlight></codeline>
<codeline lineno="362"><highlight class="comment">//<sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline lineno="363"><highlight class="comment">//<sp/><sp/><sp/><sp/>typedef<sp/>std::vector&lt;real_t&gt;<sp/>space_item_type;</highlight></codeline>
<codeline lineno="364"><highlight class="comment">//</highlight></codeline>
<codeline lineno="365"><highlight class="comment">//<sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline lineno="366"><highlight class="comment">//<sp/><sp/><sp/><sp/>///<sp/>\brief<sp/>size.<sp/>The<sp/>number<sp/>of<sp/>members<sp/>in<sp/>the<sp/>space</highlight></codeline>
<codeline lineno="367"><highlight class="comment">//<sp/><sp/><sp/><sp/>///</highlight></codeline>
<codeline lineno="368"><highlight class="comment">//<sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>uint_t<sp/>size<sp/>=<sp/>SpaceSize;</highlight></codeline>
<codeline lineno="369"><highlight class="comment">//</highlight></codeline>
<codeline lineno="370"><highlight class="comment">//};</highlight></codeline>
<codeline lineno="371"><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment">template&lt;&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="comment">struct<sp/>ContinuousSpace&lt;1,<sp/>Null&gt;</highlight></codeline>
<codeline lineno="376"><highlight class="comment">{</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>real_t<sp/>space_item_type;</highlight></codeline>
<codeline lineno="382"><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>uint_t<sp/>size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="387"><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment">};</highlight></codeline>
<codeline lineno="389"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t<sp/>SpaceSize,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T=u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t&gt;</highlight></codeline>
<codeline lineno="392" refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace" kindref="compound">DiscreteVectorSpace</ref></highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_integral_v&lt;T&gt;<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Integral<sp/>type<sp/>is<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399" refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace_1a4af80c3d827605d2802b70aea9a75ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/><ref refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace_1a4af80c3d827605d2802b70aea9a75ba7" kindref="member">space_item_type</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="405" refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace_1a711d5f50554acb85de2c2b2f91c9d7e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1envs_1_1DiscreteVectorSpace_1a711d5f50554acb85de2c2b2f91c9d7e0" kindref="member">size</ref><sp/>=<sp/>SpaceSize;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">};</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/envs/space_type.h"/>
  </compounddef>
</doxygen>
