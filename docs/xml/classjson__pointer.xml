<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classjson__pointer" kind="class" language="C++" prot="public">
    <compoundname>json_pointer</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <innerclass refid="structjson__pointer_1_1string__t__helper" prot="private">json_pointer::string_t_helper</innerclass>
    <innerclass refid="structjson__pointer_1_1string__t__helper_3_01NLOHMANN__BASIC__JSON__TPL_01_4" prot="private">json_pointer::string_t_helper&lt; NLOHMANN_BASIC_JSON_TPL &gt;</innerclass>
    <templateparamlist>
      <param>
        <type>typename RefStringType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classjson__pointer_1a21dae78c5120aa3044d4c0fa1d970291" prot="public" static="no">
        <type>typename string_t_helper&lt; RefStringType &gt;::type</type>
        <definition>using json_pointer&lt; RefStringType &gt;::string_t =  typename string_t_helper&lt;RefStringType&gt;::type</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13864" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13864" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classjson__pointer_1ada3100cdb8700566051828f1355fa745" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class basic_json</definition>
        <argsstring></argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13845" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1ab0a623288bc1272870149ad50f799a73" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class json_pointer</definition>
        <argsstring></argsstring>
        <name>json_pointer</name>
        <param>
          <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13848" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1a62704db931cb4b53651066935b03f2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const json_pointer &amp;ptr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>write string representation of the JSON pointer to stream </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_ltlt/">https://json.nlohmann.me/api/basic_json/operator_ltlt/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13895" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13895" bodyend="13899"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1a90a11fe6c7f37b1746a3ff9cb24b0d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer operator/</definition>
        <argsstring>(const json_pointer &amp;lhs, const json_pointer &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_slash/">https://json.nlohmann.me/api/json_pointer/operator_slash/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13929" column="25" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13929" bodyend="13933"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1a116956f4487af44732dd685e970679b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer operator/</definition>
        <argsstring>(const json_pointer &amp;lhs, string_t token)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>string_t</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>create a new JSON pointer by appending the unescaped token at the end of the JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_slash/">https://json.nlohmann.me/api/json_pointer/operator_slash/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13937" column="25" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13937" bodyend="13940"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1a29f6d4b492e784b9d196b05a4048c289" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer operator/</definition>
        <argsstring>(const json_pointer &amp;lhs, std::size_t array_idx)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>array_idx</declname>
        </param>
        <briefdescription>
<para>create a new JSON pointer by appending the array-index-token at the end of the JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_slash/">https://json.nlohmann.me/api/json_pointer/operator_slash/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13944" column="25" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13944" bodyend="13947"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1a613a4889154f7ab2ee4efbe0fe147cf2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeLhs</type>
          </param>
          <param>
            <type>typename RefStringTypeRhs</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const json_pointer&lt; RefStringTypeLhs &gt; &amp;lhs, const json_pointer&lt; RefStringTypeRhs &gt; &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeLhs &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeRhs &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares two JSON pointers for equality </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_eq/">https://json.nlohmann.me/api/json_pointer/operator_eq/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14684" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14737" bodyend="14741"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1af6bf727798ad49870a709094e5ff981c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeLhs</type>
          </param>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const json_pointer&lt; RefStringTypeLhs &gt; &amp;lhs, const StringType &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeLhs &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares JSON pointer and string for equality </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_eq/">https://json.nlohmann.me/api/json_pointer/operator_eq/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14691" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14746" bodyend="14750"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1ae7aabbb2a365ddaac5192ccea3226bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeRhs</type>
          </param>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const StringType &amp;lhs, const json_pointer&lt; RefStringTypeRhs &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const StringType &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeRhs &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares string and JSON pointer for equality </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_eq/">https://json.nlohmann.me/api/json_pointer/operator_eq/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14698" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14755" bodyend="14759"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1aa72a84c70e970b738f1262cfd8a66b4d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeLhs</type>
          </param>
          <param>
            <type>typename RefStringTypeRhs</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const json_pointer&lt; RefStringTypeLhs &gt; &amp;lhs, const json_pointer&lt; RefStringTypeRhs &gt; &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeLhs &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeRhs &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares two JSON pointers for inequality </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_ne/">https://json.nlohmann.me/api/json_pointer/operator_ne/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14705" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14762" bodyend="14766"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1ae0bb92b1f034ac1738d44eb7540f8f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeLhs</type>
          </param>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const json_pointer&lt; RefStringTypeLhs &gt; &amp;lhs, const StringType &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeLhs &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares JSON pointer and string for inequality </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_ne/">https://json.nlohmann.me/api/json_pointer/operator_ne/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14712" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14771" bodyend="14775"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1a32b28c0ef5f1c96b646817a0c360d7e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeRhs</type>
          </param>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const StringType &amp;lhs, const json_pointer&lt; RefStringTypeRhs &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const StringType &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeRhs &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares string and JSON pointer for inequality </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_ne/">https://json.nlohmann.me/api/json_pointer/operator_ne/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14719" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14780" bodyend="14784"/>
      </memberdef>
      <memberdef kind="friend" id="classjson__pointer_1af8c9bbaed20be0634a2e522f54265d96" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RefStringTypeLhs</type>
          </param>
          <param>
            <type>typename RefStringTypeRhs</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const json_pointer&lt; RefStringTypeLhs &gt; &amp;lhs, const json_pointer&lt; RefStringTypeRhs &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeLhs &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; RefStringTypeRhs &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>compares two JSON pointer for less-than </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14725" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14787" bodyend="14791"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classjson__pointer_1a626b4db30d345112e392109e32017133" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED json_pointer&lt; RefStringType &gt;::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <bitfield> json_pointer top() const { if (JSON_HEDLEY_UNLIKELY(empty())) { JSON_THROW(detail::out_of_range::create(405</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14057" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classjson__pointer_1a1fa1e6f1f590e0e5a22d452b2ff3b2c7" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED JSON pointer has no</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED JSON pointer has no json_pointer&lt; RefStringType &gt;::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14062" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classjson__pointer_1ac83389e2672a3e91ce4630fbe0d76c7a" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED JSON pointer has no</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED JSON pointer has no json_pointer&lt; RefStringType &gt;::nullptr</definition>
        <argsstring></argsstring>
        <name>nullptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14062" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classjson__pointer_1a33019992e4459fdc96eabc3a20e5bfc0" prot="private" static="no" mutable="no">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer json_pointer&lt; RefStringType &gt;::result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <initializer>= *this</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14065" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classjson__pointer_1a380cb51cbf54cbbf45f1a2feebe46f6c" prot="private" static="no" mutable="no">
        <type>result</type>
        <definition>result json_pointer&lt; RefStringType &gt;::reference_tokens</definition>
        <argsstring></argsstring>
        <name>reference_tokens</name>
        <initializer>= {reference_tokens[0]}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14066" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classjson__pointer_1a88fff5e5373d44f7eaeda17b63e9f1eb" prot="private" static="no" mutable="no">
        <type>return</type>
        <definition>return json_pointer&lt; RefStringType &gt;::result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14067" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classjson__pointer_1a72cfa27e3e39c209220162863e88f663" prot="private" static="no" mutable="no">
        <type>std::vector&lt; string_t &gt;</type>
        <definition>std::vector&lt;string_t&gt; json_pointer&lt; RefStringType &gt;::reference_tokens</definition>
        <argsstring></argsstring>
        <name>reference_tokens</name>
        <briefdescription>
<para>the reference tokens </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14731" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14731" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classjson__pointer_1a5288b8f5d6ff6faca37f664b98a16ecd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>json_pointer&lt; RefStringType &gt;::json_pointer</definition>
        <argsstring>(const string_t &amp;s=&quot;&quot;)</argsstring>
        <name>json_pointer</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>s</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>create JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/json_pointer/">https://json.nlohmann.me/api/json_pointer/json_pointer/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13868" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13868" bodyend="13870"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a6b94e2003be4cd72c4f145bcea2578ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>string_t</type>
        <definition>string_t json_pointer&lt; RefStringType &gt;::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>return a string representation of the JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/to_string/">https://json.nlohmann.me/api/json_pointer/to_string/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13874" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13874" bodyend="13882"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a97364e516620b02f1049f847b2ad43c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>json_pointer&lt; RefStringType &gt;::operator string_t</definition>
        <argsstring>() const</argsstring>
        <name>operator string_t</name>
        <briefdescription>
<para>return a string representation of the JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_string/">https://json.nlohmann.me/api/json_pointer/operator_string/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13887" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13887" bodyend="13890"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a415d14999d771d028ba689752969ce06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
        <definition>json_pointer&amp; json_pointer&lt; RefStringType &gt;::operator/=</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>append another JSON pointer at the end of this JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_slasheq/">https://json.nlohmann.me/api/json_pointer/operator_slasheq/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13904" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13904" bodyend="13910"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a1fbcd10c24010ef42bd931ace93b4491" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
        <definition>json_pointer&amp; json_pointer&lt; RefStringType &gt;::operator/=</definition>
        <argsstring>(string_t token)</argsstring>
        <name>operator/=</name>
        <param>
          <type>string_t</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>append an unescaped reference token at the end of this JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_slasheq/">https://json.nlohmann.me/api/json_pointer/operator_slasheq/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13914" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13914" bodyend="13918"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1afe333c4b304159cd623a0259a4881284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref> &amp;</type>
        <definition>json_pointer&amp; json_pointer&lt; RefStringType &gt;::operator/=</definition>
        <argsstring>(std::size_t array_idx)</argsstring>
        <name>operator/=</name>
        <param>
          <type>std::size_t</type>
          <declname>array_idx</declname>
        </param>
        <briefdescription>
<para>append an array index at the end of this JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/operator_slasheq/">https://json.nlohmann.me/api/json_pointer/operator_slasheq/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13922" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13922" bodyend="13925"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1aa03c0c1206e171342d27a4583258858b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer json_pointer&lt; RefStringType &gt;::parent_pointer</definition>
        <argsstring>() const</argsstring>
        <name>parent_pointer</name>
        <briefdescription>
<para>returns the parent of this JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/parent_pointer/">https://json.nlohmann.me/api/json_pointer/parent_pointer/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13951" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13951" bodyend="13961"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a662118b470c87a1b564946c2602c49ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void json_pointer&lt; RefStringType &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>remove last reference token </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/pop_back/">https://json.nlohmann.me/api/json_pointer/pop_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13965" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13965" bodyend="13973"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1ab68ba49f1b3c809b2c5c38cf03585e7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const string_t &amp;</type>
        <definition>const string_t&amp; json_pointer&lt; RefStringType &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>return last reference token </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/back/">https://json.nlohmann.me/api/json_pointer/back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13977" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13977" bodyend="13985"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1adbe97f9c00a221fb7be88d940b39a24f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void json_pointer&lt; RefStringType &gt;::push_back</definition>
        <argsstring>(const string_t &amp;token)</argsstring>
        <name>push_back</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>append an unescaped token at the end of the reference pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/push_back/">https://json.nlohmann.me/api/json_pointer/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13989" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13989" bodyend="13992"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a6fa4848eafc232ae1af91c3d2696897e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void json_pointer&lt; RefStringType &gt;::push_back</definition>
        <argsstring>(string_t &amp;&amp;token)</argsstring>
        <name>push_back</name>
        <param>
          <type>string_t &amp;&amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>append an unescaped token at the end of the reference pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/push_back/">https://json.nlohmann.me/api/json_pointer/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13996" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13996" bodyend="13999"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a5c3d08bd0a0e99c3377db33600c68a64" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool json_pointer&lt; RefStringType &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>return whether pointer points to the root document </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/empty/">https://json.nlohmann.me/api/json_pointer/empty/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14003" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14003" bodyend="14006"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classjson__pointer_1a2177a553764f3be9b0e565b922039d5d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>BasicJsonType::size_type</type>
        <definition>static BasicJsonType::size_type json_pointer&lt; RefStringType &gt;::array_index</definition>
        <argsstring>(const string_t &amp;s)</argsstring>
        <name>array_index</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>reference token to be converted into an array index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer representation of <emphasis>s</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins not with a digit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if string <emphasis>s</emphasis> could not be converted to an integer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.410</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index exceeds size_type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14020" column="46" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14020" bodyend="14055"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a3c44d736e76ee2dea2a18fbc98591d86" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; string_t &gt;</type>
        <definition>static std::vector&lt;string_t&gt; json_pointer&lt; RefStringType &gt;::split</definition>
        <argsstring>(const string_t &amp;reference_string)</argsstring>
        <name>split</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>reference_string</declname>
        </param>
        <briefdescription>
<para>split the string input to reference tokens </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is only called by the <ref refid="classjson__pointer" kindref="compound">json_pointer</ref> constructor. All exceptions below are documented there.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.107</parametername>
</parameternamelist>
<parameterdescription>
<para>if the pointer is not empty or begins with &apos;/&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.108</parametername>
</parameternamelist>
<parameterdescription>
<para>if character &apos;~&apos; is not followed by &apos;0&apos; or &apos;1&apos; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14472" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14472" bodyend="14530"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a89528f614c6b3c387d71abfee814be50" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void json_pointer&lt; RefStringType &gt;::flatten</definition>
        <argsstring>(const string_t &amp;reference_string, const BasicJsonType &amp;value, BasicJsonType &amp;result)</argsstring>
        <name>flatten</name>
        <param>
          <type>const string_t &amp;</type>
          <declname>reference_string</declname>
        </param>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reference_string</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference string to the current value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to consider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">result</parametername>
</parameternamelist>
<parameterdescription>
<para>the result object to insert values to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Empty objects or arrays are flattened to <computeroutput>null</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14541" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14541" bodyend="14599"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1aa12eb391d80f7d3d9e8be26aaac45c9e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>BasicJsonType</type>
        <definition>static BasicJsonType json_pointer&lt; RefStringType &gt;::unflatten</definition>
        <argsstring>(const BasicJsonType &amp;value)</argsstring>
        <name>unflatten</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>flattened JSON</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unflattened JSON</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if array index is not a number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.314</parametername>
</parameternamelist>
<parameterdescription>
<para>if value is not an object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.315</parametername>
</parameternamelist>
<parameterdescription>
<para>if object values are not primitive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.313</parametername>
</parameternamelist>
<parameterdescription>
<para>if value cannot be unflattened </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14613" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14613" bodyend="14638"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classjson__pointer_1a896ab122552add0a1afe6baccb4f2ec8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>BasicJsonType &amp;</type>
        <definition>BasicJsonType&amp; json_pointer&lt; RefStringType &gt;::get_and_create</definition>
        <argsstring>(BasicJsonType &amp;j) const</argsstring>
        <name>get_and_create</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create and return a reference to the pointed to value </para>
        </briefdescription>
        <detaileddescription>
<para>@complexity Linear in the number of reference tokens.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if array index is not a number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.313</parametername>
</parameternamelist>
<parameterdescription>
<para>if value cannot be unflattened </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14080" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14080" bodyend="14138"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a801e50b883dc303786386952f97e8548" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>BasicJsonType &amp;</type>
        <definition>BasicJsonType&amp; json_pointer&lt; RefStringType &gt;::get_unchecked</definition>
        <argsstring>(BasicJsonType *ptr) const</argsstring>
        <name>get_unchecked</name>
        <param>
          <type>BasicJsonType *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>return a reference to the pointed to value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This version does not throw if a value is not present, but tries to create nested values instead. For instance, calling this function with pointer <computeroutput>&quot;/this/that&quot;</computeroutput> on a null value is equivalent to calling <computeroutput>operator[](&quot;this&quot;).operator[](&quot;that&quot;)</computeroutput> on that value, effectively changing the null value to an object.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the JSON value pointed to by the JSON pointer</para>
</simplesect>
@complexity Linear in the length of the JSON pointer.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14160" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14160" bodyend="14219"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a1b7dab7d88094e60dadb3266fd9c8b6a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>BasicJsonType &amp;</type>
        <definition>BasicJsonType&amp; json_pointer&lt; RefStringType &gt;::get_checked</definition>
        <argsstring>(BasicJsonType *ptr) const</argsstring>
        <name>get_checked</name>
        <param>
          <type>BasicJsonType *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14228" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14228" bodyend="14270"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a0cc089064df9327a4c1cbc83b25a6b82" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>const BasicJsonType &amp;</type>
        <definition>const BasicJsonType&amp; json_pointer&lt; RefStringType &gt;::get_unchecked</definition>
        <argsstring>(const BasicJsonType *ptr) const</argsstring>
        <name>get_unchecked</name>
        <param>
          <type>const BasicJsonType *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>return a const reference to the pointed to value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the JSON value pointed to by the JSON pointer</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14286" column="25" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14286" bodyend="14326"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1a84db1f60993fa81121918eb007ecaafc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>const BasicJsonType &amp;</type>
        <definition>const BasicJsonType&amp; json_pointer&lt; RefStringType &gt;::get_checked</definition>
        <argsstring>(const BasicJsonType *ptr) const</argsstring>
        <name>get_checked</name>
        <param>
          <type>const BasicJsonType *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14335" column="25" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14335" bodyend="14377"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1af90d0086d40dc88aecc8d570873150a1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool json_pointer&lt; RefStringType &gt;::contains</definition>
        <argsstring>(const BasicJsonType *ptr) const</argsstring>
        <name>contains</name>
        <param>
          <type>const BasicJsonType *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14384" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14384" bodyend="14461"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1acaf078034c18d5d24737b665e22a32e6" prot="private" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; string_t &gt;</type>
        <definition>json_pointer&lt;string_t&gt; json_pointer&lt; RefStringType &gt;::convert</definition>
        <argsstring>() const &amp;</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14641" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14641" bodyend="14646"/>
      </memberdef>
      <memberdef kind="function" id="classjson__pointer_1acac0381fbc4b466e39cc930d3d4ad013" prot="private" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classjson__pointer" kindref="compound">json_pointer</ref>&lt; string_t &gt;</type>
        <definition>json_pointer&lt;string_t&gt; json_pointer&lt; RefStringType &gt;::convert</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14648" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14648" bodyend="14653"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>JSON Pointer defines a string syntax for identifying a specific value within a JSON document. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/json_pointer/">https://json.nlohmann.me/api/json_pointer/</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13841" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13842" bodyend="14732"/>
    <listofallmembers>
      <member refid="classjson__pointer_1a626b4db30d345112e392109e32017133" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>__pad0__</name></member>
      <member refid="classjson__pointer_1a2177a553764f3be9b0e565b922039d5d" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>array_index</name></member>
      <member refid="classjson__pointer_1ab68ba49f1b3c809b2c5c38cf03585e7d" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>back</name></member>
      <member refid="classjson__pointer_1ada3100cdb8700566051828f1355fa745" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>basic_json</name></member>
      <member refid="classjson__pointer_1af90d0086d40dc88aecc8d570873150a1" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>contains</name></member>
      <member refid="classjson__pointer_1acaf078034c18d5d24737b665e22a32e6" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>convert</name></member>
      <member refid="classjson__pointer_1acac0381fbc4b466e39cc930d3d4ad013" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>convert</name></member>
      <member refid="classjson__pointer_1a5c3d08bd0a0e99c3377db33600c68a64" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>empty</name></member>
      <member refid="classjson__pointer_1a89528f614c6b3c387d71abfee814be50" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>flatten</name></member>
      <member refid="classjson__pointer_1a896ab122552add0a1afe6baccb4f2ec8" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>get_and_create</name></member>
      <member refid="classjson__pointer_1a1b7dab7d88094e60dadb3266fd9c8b6a" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>get_checked</name></member>
      <member refid="classjson__pointer_1a84db1f60993fa81121918eb007ecaafc" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>get_checked</name></member>
      <member refid="classjson__pointer_1a801e50b883dc303786386952f97e8548" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>get_unchecked</name></member>
      <member refid="classjson__pointer_1a0cc089064df9327a4c1cbc83b25a6b82" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>get_unchecked</name></member>
      <member refid="classjson__pointer_1ab0a623288bc1272870149ad50f799a73" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>json_pointer</name></member>
      <member refid="classjson__pointer_1a5288b8f5d6ff6faca37f664b98a16ecd" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>json_pointer</name></member>
      <member refid="classjson__pointer_1ac83389e2672a3e91ce4630fbe0d76c7a" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>nullptr</name></member>
      <member refid="classjson__pointer_1a97364e516620b02f1049f847b2ad43c9" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator string_t</name></member>
      <member refid="classjson__pointer_1aa72a84c70e970b738f1262cfd8a66b4d" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator!=</name></member>
      <member refid="classjson__pointer_1ae0bb92b1f034ac1738d44eb7540f8f66" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator!=</name></member>
      <member refid="classjson__pointer_1a32b28c0ef5f1c96b646817a0c360d7e6" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator!=</name></member>
      <member refid="classjson__pointer_1a90a11fe6c7f37b1746a3ff9cb24b0d53" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator/</name></member>
      <member refid="classjson__pointer_1a116956f4487af44732dd685e970679b0" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator/</name></member>
      <member refid="classjson__pointer_1a29f6d4b492e784b9d196b05a4048c289" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator/</name></member>
      <member refid="classjson__pointer_1a415d14999d771d028ba689752969ce06" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator/=</name></member>
      <member refid="classjson__pointer_1a1fbcd10c24010ef42bd931ace93b4491" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator/=</name></member>
      <member refid="classjson__pointer_1afe333c4b304159cd623a0259a4881284" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator/=</name></member>
      <member refid="classjson__pointer_1af8c9bbaed20be0634a2e522f54265d96" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator&lt;</name></member>
      <member refid="classjson__pointer_1a62704db931cb4b53651066935b03f2db" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator&lt;&lt;</name></member>
      <member refid="classjson__pointer_1a613a4889154f7ab2ee4efbe0fe147cf2" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator==</name></member>
      <member refid="classjson__pointer_1af6bf727798ad49870a709094e5ff981c" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator==</name></member>
      <member refid="classjson__pointer_1ae7aabbb2a365ddaac5192ccea3226bfb" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>operator==</name></member>
      <member refid="classjson__pointer_1a1fa1e6f1f590e0e5a22d452b2ff3b2c7" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>parent</name></member>
      <member refid="classjson__pointer_1aa03c0c1206e171342d27a4583258858b" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>parent_pointer</name></member>
      <member refid="classjson__pointer_1a662118b470c87a1b564946c2602c49ce" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>pop_back</name></member>
      <member refid="classjson__pointer_1adbe97f9c00a221fb7be88d940b39a24f" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>push_back</name></member>
      <member refid="classjson__pointer_1a6fa4848eafc232ae1af91c3d2696897e" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>push_back</name></member>
      <member refid="classjson__pointer_1a380cb51cbf54cbbf45f1a2feebe46f6c" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>reference_tokens</name></member>
      <member refid="classjson__pointer_1a72cfa27e3e39c209220162863e88f663" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>reference_tokens</name></member>
      <member refid="classjson__pointer_1a33019992e4459fdc96eabc3a20e5bfc0" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>result</name></member>
      <member refid="classjson__pointer_1a88fff5e5373d44f7eaeda17b63e9f1eb" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>result</name></member>
      <member refid="classjson__pointer_1a3c44d736e76ee2dea2a18fbc98591d86" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>split</name></member>
      <member refid="classjson__pointer_1a21dae78c5120aa3044d4c0fa1d970291" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>string_t</name></member>
      <member refid="classjson__pointer_1a6b94e2003be4cd72c4f145bcea2578ec" prot="public" virt="non-virtual"><scope>json_pointer</scope><name>to_string</name></member>
      <member refid="classjson__pointer_1aa12eb391d80f7d3d9e8be26aaac45c9e" prot="private" virt="non-virtual"><scope>json_pointer</scope><name>unflatten</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
