<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhttp_1_1Request" kind="class" language="C++" prot="public" final="yes">
    <compoundname>http::Request</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhttp_1_1Request_1a162e54423ed21531a985454aaa4aa091" prot="private" static="no" mutable="no">
        <type>InternetProtocol</type>
        <definition>InternetProtocol http::Request::internetProtocol</definition>
        <argsstring></argsstring>
        <name>internetProtocol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="1202" column="26" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhttp_1_1Request_1ade9ac6231587e91b9609f28e13e7b3ef" prot="private" static="no" mutable="no">
        <type><ref refid="structhttp_1_1Uri" kindref="compound">Uri</ref></type>
        <definition>Uri http::Request::uri</definition>
        <argsstring></argsstring>
        <name>uri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="1203" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="1203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhttp_1_1Request_1abd2e2df93978c16126a31fdd7e657d85" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>http::Request::Request</definition>
        <argsstring>(const std::string &amp;uriString, const InternetProtocol protocol=InternetProtocol::v4)</argsstring>
        <name>Request</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uriString</declname>
        </param>
        <param>
          <type>const InternetProtocol</type>
          <declname>protocol</declname>
          <defval>InternetProtocol::v4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="994" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="994" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classhttp_1_1Request_1ae1af1d5504155ea17c8aa8e4a7a58e54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhttp_1_1Response" kindref="compound">Response</ref></type>
        <definition>Response http::Request::send</definition>
        <argsstring>(const std::string &amp;method=&quot;GET&quot;, const std::string &amp;body=&quot;&quot;, const HeaderFields &amp;headerFields={}, const std::chrono::milliseconds timeout=std::chrono::milliseconds{-1})</argsstring>
        <name>send</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>method</declname>
          <defval>&quot;GET&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const HeaderFields &amp;</type>
          <declname>headerFields</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds{-1}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="1001" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="1001" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="classhttp_1_1Request_1a852d746fa12c254650e5a1ee1f3a5ddf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhttp_1_1Response" kindref="compound">Response</ref></type>
        <definition>Response http::Request::send</definition>
        <argsstring>(const std::string &amp;method, const std::vector&lt; uint8_t &gt; &amp;body, const HeaderFields &amp;headerFields={}, const std::chrono::milliseconds timeout=std::chrono::milliseconds{-1})</argsstring>
        <name>send</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>const HeaderFields &amp;</type>
          <declname>headerFields</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::chrono::milliseconds</type>
          <declname>timeout</declname>
          <defval>std::chrono::milliseconds{-1}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="1012" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="1012" bodyend="1196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="991" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="992" bodyend="1204"/>
    <listofallmembers>
      <member refid="classhttp_1_1Request_1a162e54423ed21531a985454aaa4aa091" prot="private" virt="non-virtual"><scope>http::Request</scope><name>internetProtocol</name></member>
      <member refid="classhttp_1_1Request_1abd2e2df93978c16126a31fdd7e657d85" prot="public" virt="non-virtual"><scope>http::Request</scope><name>Request</name></member>
      <member refid="classhttp_1_1Request_1ae1af1d5504155ea17c8aa8e4a7a58e54" prot="public" virt="non-virtual"><scope>http::Request</scope><name>send</name></member>
      <member refid="classhttp_1_1Request_1a852d746fa12c254650e5a1ee1f3a5ddf" prot="public" virt="non-virtual"><scope>http::Request</scope><name>send</name></member>
      <member refid="classhttp_1_1Request_1ade9ac6231587e91b9609f28e13e7b3ef" prot="private" virt="non-virtual"><scope>http::Request</scope><name>uri</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
