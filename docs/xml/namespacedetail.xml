<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacedetail" kind="namespace" language="C++">
    <compoundname>detail</compoundname>
    <innerclass refid="structdetail_1_1make__void" prot="public">detail::make_void</innerclass>
    <innerclass refid="structdetail_1_1nonesuch" prot="public">detail::nonesuch</innerclass>
    <innerclass refid="structdetail_1_1detector" prot="public">detail::detector</innerclass>
    <innerclass refid="structdetail_1_1detector_3_01Default_00_01void__t_3_01Op_3_01Args_8_8_8_01_4_01_4_00_01Op_00_01Args_8_8_8_01_4" prot="public">detail::detector&lt; Default, void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__detected__lazy" prot="public">detail::is_detected_lazy</innerclass>
    <innerclass refid="structdetail_1_1position__t" prot="public">detail::position_t</innerclass>
    <innerclass refid="structdetail_1_1integer__sequence" prot="public">detail::integer_sequence</innerclass>
    <innerclass refid="structdetail_1_1priority__tag" prot="public">detail::priority_tag</innerclass>
    <innerclass refid="structdetail_1_1priority__tag_3_010_01_4" prot="public">detail::priority_tag&lt; 0 &gt;</innerclass>
    <innerclass refid="structdetail_1_1static__const" prot="public">detail::static_const</innerclass>
    <innerclass refid="structdetail_1_1iterator__types" prot="public">detail::iterator_types</innerclass>
    <innerclass refid="structdetail_1_1iterator__types_3_01It_00_01void__t_3_01typename_01It_1_1difference__type_00_01tce77e1bdc2e5b392df295e4bdf270278" prot="public">detail::iterator_types&lt; It, void_t&lt; typename It::difference_type, typename It::value_type, typename It::pointer, typename It::reference, typename It::iterator_category &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1iterator__traits" prot="public">detail::iterator_traits</innerclass>
    <innerclass refid="structdetail_1_1iterator__traits_3_01T_00_01enable__if__t_3_01_9std_1_1is__pointer_3_01T_01_4_1_1value_01_4_01_4" prot="public">detail::iterator_traits&lt; T, enable_if_t&lt; !std::is_pointer&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1iterator__traits_3_01T_01_5_00_01enable__if__t_3_01std_1_1is__object_3_01T_01_4_1_1value_01_4_01_4" prot="public">detail::iterator_traits&lt; T *, enable_if_t&lt; std::is_object&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__basic__json" prot="public">detail::is_basic_json</innerclass>
    <innerclass refid="structdetail_1_1is__basic__json_3_01NLOHMANN__BASIC__JSON__TPL_01_4" prot="public">detail::is_basic_json&lt; NLOHMANN_BASIC_JSON_TPL &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__basic__json__context" prot="public">detail::is_basic_json_context</innerclass>
    <innerclass refid="classdetail_1_1json__ref" prot="public">detail::json_ref</innerclass>
    <innerclass refid="structdetail_1_1is__json__ref" prot="public">detail::is_json_ref</innerclass>
    <innerclass refid="structdetail_1_1is__json__ref_3_01json__ref_3_01T_01_4_01_4" prot="public">detail::is_json_ref&lt; json_ref&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__from__json" prot="public">detail::has_from_json</innerclass>
    <innerclass refid="structdetail_1_1is__getable" prot="public">detail::is_getable</innerclass>
    <innerclass refid="structdetail_1_1has__from__json_3_01BasicJsonType_00_01T_00_01enable__if__t_3_01_9is__basic__json_3_01T_01_4_1_1value_01_4_01_4" prot="public">detail::has_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__non__default__from__json" prot="public">detail::has_non_default_from_json</innerclass>
    <innerclass refid="structdetail_1_1has__non__default__from__json_3_01BasicJsonType_00_01T_00_01enable__if__t_3_01_912047717fa07cfa9d99fe9eafcf1e11e" prot="public">detail::has_non_default_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__to__json" prot="public">detail::has_to_json</innerclass>
    <innerclass refid="structdetail_1_1has__to__json_3_01BasicJsonType_00_01T_00_01enable__if__t_3_01_9is__basic__json_3_01T_01_4_1_1value_01_4_01_4" prot="public">detail::has_to_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__key__compare" prot="public">detail::has_key_compare</innerclass>
    <innerclass refid="structdetail_1_1actual__object__comparator" prot="public">detail::actual_object_comparator</innerclass>
    <innerclass refid="structdetail_1_1char__traits" prot="public">detail::char_traits</innerclass>
    <innerclass refid="structdetail_1_1char__traits_3_01unsigned_01char_01_4" prot="public">detail::char_traits&lt; unsigned char &gt;</innerclass>
    <innerclass refid="structdetail_1_1char__traits_3_01signed_01char_01_4" prot="public">detail::char_traits&lt; signed char &gt;</innerclass>
    <innerclass refid="structdetail_1_1conjunction" prot="public">detail::conjunction</innerclass>
    <innerclass refid="structdetail_1_1conjunction_3_01B_01_4" prot="public">detail::conjunction&lt; B &gt;</innerclass>
    <innerclass refid="structdetail_1_1conjunction_3_01B_00_01Bn_8_8_8_01_4" prot="public">detail::conjunction&lt; B, Bn... &gt;</innerclass>
    <innerclass refid="structdetail_1_1negation" prot="public">detail::negation</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible" prot="public">detail::is_default_constructible</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">detail::is_default_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01const_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">detail::is_default_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">detail::is_default_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01const_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">detail::is_default_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible" prot="public">detail::is_constructible</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">detail::is_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01const_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">detail::is_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">detail::is_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01const_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">detail::is_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__iterator__traits" prot="public">detail::is_iterator_traits</innerclass>
    <innerclass refid="structdetail_1_1is__iterator__traits_3_01iterator__traits_3_01T_01_4_01_4" prot="public">detail::is_iterator_traits&lt; iterator_traits&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__range" prot="public">detail::is_range</innerclass>
    <innerclass refid="structdetail_1_1is__complete__type" prot="public">detail::is_complete_type</innerclass>
    <innerclass refid="structdetail_1_1is__complete__type_3_01T_00_01decltype_07void_07sizeof_07T_08_08_08_4" prot="public">detail::is_complete_type&lt; T, decltype(void(sizeof(T)))&gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__object__type__impl" prot="public">detail::is_compatible_object_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__object__type__impl_3_01BasicJsonType_00_01CompatibleObjectType_01530c59509aa77cdb5f1e95cf109944f" prot="public">detail::is_compatible_object_type_impl&lt; BasicJsonType, CompatibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, CompatibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, CompatibleObjectType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__object__type" prot="public">detail::is_compatible_object_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__object__type__impl" prot="public">detail::is_constructible_object_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__object__type__impl_3_01BasicJsonType_00_01ConstructibleObject435b838380c31b9738383402f7bb5943" prot="public">detail::is_constructible_object_type_impl&lt; BasicJsonType, ConstructibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, ConstructibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, ConstructibleObjectType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__object__type" prot="public">detail::is_constructible_object_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__string__type" prot="public">detail::is_compatible_string_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__string__type" prot="public">detail::is_constructible_string_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__array__type__impl" prot="public">detail::is_compatible_array_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__array__type__impl_3_01BasicJsonType_00_01CompatibleArrayType_00_ba7b30737b5c65ad9adb609a3762b85a" prot="public">detail::is_compatible_array_type_impl&lt; BasicJsonType, CompatibleArrayType, enable_if_t&lt; is_detected&lt; iterator_t, CompatibleArrayType &gt;::value &amp;&amp;is_iterator_traits&lt; iterator_traits&lt; detected_t&lt; iterator_t, CompatibleArrayType &gt; &gt; &gt;::value &amp;&amp;!std::is_same&lt; CompatibleArrayType, detected_t&lt; range_value_t, CompatibleArrayType &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__array__type" prot="public">detail::is_compatible_array_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type__impl" prot="public">detail::is_constructible_array_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type__impl_3_01BasicJsonType_00_01ConstructibleArrayTyff4af2af9684a1cc8580410ec8c319a4" prot="public">detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type__impl_3_01BasicJsonType_00_01ConstructibleArrayTy3a773789b90b07cf1d15e358c6d585ac" prot="public">detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; !std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &amp;&amp;!is_compatible_string_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;is_default_constructible&lt; ConstructibleArrayType &gt;::value &amp;&amp;(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value||std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value)&amp;&amp;is_detected&lt; iterator_t, ConstructibleArrayType &gt;::value &amp;&amp;is_iterator_traits&lt; iterator_traits&lt; detected_t&lt; iterator_t, ConstructibleArrayType &gt; &gt; &gt;::value &amp;&amp;is_detected&lt; range_value_t, ConstructibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; ConstructibleArrayType, detected_t&lt; range_value_t, ConstructibleArrayType &gt; &gt;::value &amp;&amp;is_complete_type&lt; detected_t&lt; range_value_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type" prot="public">detail::is_constructible_array_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__integer__type__impl" prot="public">detail::is_compatible_integer_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__integer__type__impl_3_01RealIntegerType_00_01CompatibleNumberInt5b484fcfc2d1ae63b1211da72eabe33b" prot="public">detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__integer__type" prot="public">detail::is_compatible_integer_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__type__impl" prot="public">detail::is_compatible_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__type__impl_3_01BasicJsonType_00_01CompatibleType_00_01enable__if67e19080e9bd0cd565bd49f604895399" prot="public">detail::is_compatible_type_impl&lt; BasicJsonType, CompatibleType, enable_if_t&lt; is_complete_type&lt; CompatibleType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__type" prot="public">detail::is_compatible_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__tuple" prot="public">detail::is_constructible_tuple</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__tuple_3_01T1_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4" prot="public">detail::is_constructible_tuple&lt; T1, std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__json__iterator__of" prot="public">detail::is_json_iterator_of</innerclass>
    <innerclass refid="structdetail_1_1is__json__iterator__of_3_01BasicJsonType_00_01typename_01BasicJsonType_1_1iterator_01_4" prot="public">detail::is_json_iterator_of&lt; BasicJsonType, typename BasicJsonType::iterator &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__json__iterator__of_3_01BasicJsonType_00_01typename_01BasicJsonType_1_1const__iterator_01_4" prot="public">detail::is_json_iterator_of&lt; BasicJsonType, typename BasicJsonType::const_iterator &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__specialization__of" prot="public">detail::is_specialization_of</innerclass>
    <innerclass refid="structdetail_1_1is__specialization__of_3_01Primary_00_01Primary_3_01Args_8_8_8_01_4_01_4" prot="public">detail::is_specialization_of&lt; Primary, Primary&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__comparable" prot="public">detail::is_comparable</innerclass>
    <innerclass refid="structdetail_1_1is__comparable_3_01Compare_00_01A_00_01B_00_01void__t_3_01decltype_07std_1_1decle5e3400d312093eca0a7154409c6a227" prot="public">detail::is_comparable&lt; Compare, A, B, void_t&lt; decltype(std::declval&lt; Compare &gt;()(std::declval&lt; A &gt;(), std::declval&lt; B &gt;())), decltype(std::declval&lt; Compare &gt;()(std::declval&lt; B &gt;(), std::declval&lt; A &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__ordered__map" prot="public">detail::is_ordered_map</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2" prot="public">detail::value_in_range_of_impl2</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01OfType_00_01T_00_01false_00_01false_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, false, false &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01OfType_00_01T_00_01true_00_01false_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, true, false &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01OfType_00_01T_00_01false_00_01true_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, false, true &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01OfType_00_01T_00_01true_00_01true_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, true, true &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl1" prot="public">detail::value_in_range_of_impl1</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl1_3_01OfType_00_01T_00_01false_01_4" prot="public">detail::value_in_range_of_impl1&lt; OfType, T, false &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl1_3_01OfType_00_01T_00_01true_01_4" prot="public">detail::value_in_range_of_impl1&lt; OfType, T, true &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__c__string" prot="public">detail::is_c_string</innerclass>
    <innerclass refid="structdetail_1_1is__transparent" prot="public">detail::is_transparent</innerclass>
    <innerclass refid="classdetail_1_1exception" prot="public">detail::exception</innerclass>
    <innerclass refid="classdetail_1_1parse__error" prot="public">detail::parse_error</innerclass>
    <innerclass refid="classdetail_1_1invalid__iterator" prot="public">detail::invalid_iterator</innerclass>
    <innerclass refid="classdetail_1_1type__error" prot="public">detail::type_error</innerclass>
    <innerclass refid="classdetail_1_1out__of__range" prot="public">detail::out_of_range</innerclass>
    <innerclass refid="classdetail_1_1other__error" prot="public">detail::other_error</innerclass>
    <innerclass refid="structdetail_1_1identity__tag" prot="public">detail::identity_tag</innerclass>
    <innerclass refid="structdetail_1_1from__json__fn" prot="public">detail::from_json_fn</innerclass>
    <innerclass refid="classdetail_1_1iteration__proxy__value" prot="public">detail::iteration_proxy_value</innerclass>
    <innerclass refid="classdetail_1_1iteration__proxy" prot="public">detail::iteration_proxy</innerclass>
    <innerclass refid="structdetail_1_1external__constructor" prot="public">detail::external_constructor</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1boolean_01_4" prot="public">detail::external_constructor&lt; value_t::boolean &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1string_01_4" prot="public">detail::external_constructor&lt; value_t::string &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1binary_01_4" prot="public">detail::external_constructor&lt; value_t::binary &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1number__float_01_4" prot="public">detail::external_constructor&lt; value_t::number_float &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4" prot="public">detail::external_constructor&lt; value_t::number_unsigned &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1number__integer_01_4" prot="public">detail::external_constructor&lt; value_t::number_integer &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4" prot="public">detail::external_constructor&lt; value_t::array &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1object_01_4" prot="public">detail::external_constructor&lt; value_t::object &gt;</innerclass>
    <innerclass refid="structdetail_1_1to__json__fn" prot="public">detail::to_json_fn</innerclass>
    <innerclass refid="classdetail_1_1file__input__adapter" prot="public">detail::file_input_adapter</innerclass>
    <innerclass refid="classdetail_1_1input__stream__adapter" prot="public">detail::input_stream_adapter</innerclass>
    <innerclass refid="classdetail_1_1iterator__input__adapter" prot="public">detail::iterator_input_adapter</innerclass>
    <innerclass refid="structdetail_1_1wide__string__input__helper" prot="public">detail::wide_string_input_helper</innerclass>
    <innerclass refid="structdetail_1_1wide__string__input__helper_3_01BaseInputAdapter_00_014_01_4" prot="public">detail::wide_string_input_helper&lt; BaseInputAdapter, 4 &gt;</innerclass>
    <innerclass refid="structdetail_1_1wide__string__input__helper_3_01BaseInputAdapter_00_012_01_4" prot="public">detail::wide_string_input_helper&lt; BaseInputAdapter, 2 &gt;</innerclass>
    <innerclass refid="classdetail_1_1wide__string__input__adapter" prot="public">detail::wide_string_input_adapter</innerclass>
    <innerclass refid="structdetail_1_1iterator__input__adapter__factory" prot="public">detail::iterator_input_adapter_factory</innerclass>
    <innerclass refid="structdetail_1_1is__iterator__of__multibyte" prot="public">detail::is_iterator_of_multibyte</innerclass>
    <innerclass refid="structdetail_1_1iterator__input__adapter__factory_3_01IteratorType_00_01enable__if__t_3_01is__it379df2cab17a32e3e44924a3e0b8f300" prot="public">detail::iterator_input_adapter_factory&lt; IteratorType, enable_if_t&lt; is_iterator_of_multibyte&lt; IteratorType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classdetail_1_1span__input__adapter" prot="public">detail::span_input_adapter</innerclass>
    <innerclass refid="classdetail_1_1json__sax__dom__parser" prot="public">detail::json_sax_dom_parser</innerclass>
    <innerclass refid="classdetail_1_1json__sax__dom__callback__parser" prot="public">detail::json_sax_dom_callback_parser</innerclass>
    <innerclass refid="classdetail_1_1json__sax__acceptor" prot="public">detail::json_sax_acceptor</innerclass>
    <innerclass refid="classdetail_1_1lexer__base" prot="public">detail::lexer_base</innerclass>
    <innerclass refid="classdetail_1_1lexer" prot="public">detail::lexer</innerclass>
    <innerclass refid="structdetail_1_1is__sax" prot="public">detail::is_sax</innerclass>
    <innerclass refid="structdetail_1_1is__sax__static__asserts" prot="public">detail::is_sax_static_asserts</innerclass>
    <innerclass refid="classdetail_1_1binary__reader" prot="public">detail::binary_reader</innerclass>
    <innerclass refid="classdetail_1_1parser" prot="public">detail::parser</innerclass>
    <innerclass refid="classdetail_1_1primitive__iterator__t" prot="public">detail::primitive_iterator_t</innerclass>
    <innerclass refid="structdetail_1_1internal__iterator" prot="public">detail::internal_iterator</innerclass>
    <innerclass refid="classdetail_1_1iter__impl" prot="public">detail::iter_impl</innerclass>
    <innerclass refid="classdetail_1_1json__reverse__iterator" prot="public">detail::json_reverse_iterator</innerclass>
    <innerclass refid="structdetail_1_1json__default__base" prot="public">detail::json_default_base</innerclass>
    <innerclass refid="structdetail_1_1output__adapter__protocol" prot="public">detail::output_adapter_protocol</innerclass>
    <innerclass refid="classdetail_1_1output__vector__adapter" prot="public">detail::output_vector_adapter</innerclass>
    <innerclass refid="classdetail_1_1output__stream__adapter" prot="public">detail::output_stream_adapter</innerclass>
    <innerclass refid="classdetail_1_1output__string__adapter" prot="public">detail::output_string_adapter</innerclass>
    <innerclass refid="classdetail_1_1output__adapter" prot="public">detail::output_adapter</innerclass>
    <innerclass refid="classdetail_1_1binary__writer" prot="public">detail::binary_writer</innerclass>
    <innerclass refid="classdetail_1_1serializer" prot="public">detail::serializer</innerclass>
    <innernamespace refid="namespacedetail_1_1container__input__adapter__factory__impl">detail::container_input_adapter_factory_impl</innernamespace>
    <innernamespace refid="namespacedetail_1_1dtoa__impl">detail::dtoa_impl</innernamespace>
    <innernamespace refid="namespacedetail_1_1impl">detail::impl</innernamespace>
    <innernamespace refid="namespacedetail_1_1utility__internal">detail::utility_internal</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>value_t</name>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a37a6259cc0c1dae299a7866489dff0bd" prot="public">
          <name>null</name>
          <briefdescription>
<para>null value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632aa8cfde6331bd59eb2ac96f8911c4b666" prot="public">
          <name>object</name>
          <briefdescription>
<para>object (unordered set of name/value pairs) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632af1f713c9e000f5d3f280adbd124df4f5" prot="public">
          <name>array</name>
          <briefdescription>
<para>array (ordered collection of values) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632ab45cffe084dd3d20d928bee85e7b0f21" prot="public">
          <name>string</name>
          <briefdescription>
<para>string value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a84e2c64f38f78ba3ea5c905ab5a2da27" prot="public">
          <name>boolean</name>
          <briefdescription>
<para>boolean value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a5763da164f8659d94a56e29df64b4bcc" prot="public">
          <name>number_integer</name>
          <briefdescription>
<para>number value (signed integer) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632adce7cc8ec29055c4158828921f2f265e" prot="public">
          <name>number_unsigned</name>
          <briefdescription>
<para>number value (unsigned integer) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632ad9966ecb59667235a57b4b999a649eef" prot="public">
          <name>number_float</name>
          <briefdescription>
<para>number value (floating-point) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a9d7183f16acce70658f686ae7f1a4d20" prot="public">
          <name>binary</name>
          <briefdescription>
<para>binary array (ordered collection of bytes) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a94708897ec9db8647dfe695714c98e46" prot="public">
          <name>discarded</name>
          <briefdescription>
<para>discarded by the parser callback function </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the JSON type enumeration </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration collects the different JSON types. It is internally used to distinguish the stored values, and the functions <ref refid="classbasic__json_1ad8789d0a365d5afaab61e7492908d8b2" kindref="member">basic_json::is_null()</ref>, <ref refid="classbasic__json_1af355a2b131068acf3d623eb6d80a711c" kindref="member">basic_json::is_object()</ref>, <ref refid="classbasic__json_1a184ba4a6b47e6da3703af19349bd776f" kindref="member">basic_json::is_array()</ref>, <ref refid="classbasic__json_1a007ecebde9a7d40714e300ce0ff52908" kindref="member">basic_json::is_string()</ref>, <ref refid="classbasic__json_1acfe2e3c359b545f8edbb72f6bd78718c" kindref="member">basic_json::is_boolean()</ref>, <ref refid="classbasic__json_1aacf244be5088fb183f4ba21a66af9631" kindref="member">basic_json::is_number()</ref> (with <ref refid="classbasic__json_1a2330e35cda16540058fef090abc709bf" kindref="member">basic_json::is_number_integer()</ref>, <ref refid="classbasic__json_1a4de72635745144ee519157d23fe7189a" kindref="member">basic_json::is_number_unsigned()</ref>, and <ref refid="classbasic__json_1a8d5bb82dfc8cceae1753b52a588eef92" kindref="member">basic_json::is_number_float()</ref>), <ref refid="classbasic__json_1a39e4946a414cc978b88939ed1b343d46" kindref="member">basic_json::is_discarded()</ref>, <ref refid="classbasic__json_1ad650dd5a7e019b970abce3d8864b5654" kindref="member">basic_json::is_primitive()</ref>, and <ref refid="classbasic__json_1a2d3a5f8761bc6f163f4119bddaf7b092" kindref="member">basic_json::is_structured()</ref> rely on it.</para>
<para><simplesect kind="note"><para>There are three enumeration entries (number_integer, number_unsigned, and number_float), because the library distinguishes these three types for numbers: <ref refid="classbasic__json_1ae8505b599e706768a1e0bd6718cc7117" kindref="member">basic_json::number_unsigned_t</ref> is used for unsigned integers, <ref refid="classbasic__json_1aba48b0bdee31228a4e19b7c040b6d2a5" kindref="member">basic_json::number_integer_t</ref> is used for signed integers, and <ref refid="classbasic__json_1a80a229dbc84c1334171ce9c49c873c56" kindref="member">basic_json::number_float_t</ref> is used for floating-point numbers or to approximate integers which do not fit in the limits of their respective type.</para>
</simplesect>
<simplesect kind="see"><para>see <ref refid="classbasic__json_1ae2d5bc42270881ed3e219e8b1456fec5" kindref="member">basic_json::basic_json(const value_t value_type)</ref> <ndash/> create a JSON value with the default value for a given type</para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="2872" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="2873" bodyend="2884"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" prot="public" static="no" strong="yes">
        <type></type>
        <name>input_format_t</name>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa466deec76ecdf5fca6d38571f6324d54" prot="public">
          <name>json</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04faaf9de350d652f0c9055ddab514bd23ea" prot="public">
          <name>cbor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fac40d516627022a54003ac2b74a82688a" prot="public">
          <name>msgpack</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa4537f20910e85437f6d07701864084e8" prot="public">
          <name>ubjson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa0b6879b186bfb2b1ec65d2460e4eccd4" prot="public">
          <name>bson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa42facb1448d9878ab35f152ae236e0b8" prot="public">
          <name>bjdata</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the supported input formats </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6177" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6177" bodyend="6177"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" prot="public" static="no" strong="yes">
        <type></type>
        <name>cbor_tag_handler_t</name>
        <enumvalue id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592acb5e100e5a9a3e7f6d1fd97512215282" prot="public">
          <name>error</name>
          <briefdescription>
<para>throw a <ref refid="classdetail_1_1parse__error" kindref="compound">parse_error</ref> exception in case of a tag </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592a567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
<para>ignore tags </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592a8cd892b7b97ef9489ae4479d3f4ef0fc" prot="public">
          <name>store</name>
          <briefdescription>
<para>store tags as binary type </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>how to treat CBOR tags </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9185" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9186" bodyend="9190"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312ef" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>parse_event_t</name>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efae73f17027cb0acbb537f29d0a6944b26" prot="public">
          <name>object_start</name>
          <briefdescription>
<para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efaf63e2a2468a37aa4f394fcc3bcb8249c" prot="public">
          <name>object_end</name>
          <briefdescription>
<para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efaa4388a3d92419edbb1c6efd4d52461f3" prot="public">
          <name>array_start</name>
          <briefdescription>
<para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa49642fb732aa2e112188fba1f9d3ef7f" prot="public">
          <name>array_end</name>
          <briefdescription>
<para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa3c6e0b8a9c15224a8228b9a98ca1531d" prot="public">
          <name>key</name>
          <briefdescription>
<para>the parser read a key of a value in an object </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" prot="public">
          <name>value</name>
          <briefdescription>
<para>the parser finished reading a JSON value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12203" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12204" bodyend="12217"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" prot="public" static="no" strong="yes">
        <type></type>
        <name>error_handler_t</name>
        <enumvalue id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a2133fd717402a7966ee88d06f9e0b792" prot="public">
          <name>strict</name>
          <briefdescription>
<para>throw a <ref refid="classdetail_1_1type__error" kindref="compound">type_error</ref> exception in case of invalid UTF-8 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a9dde360102c103867bd2f45872f1129c" prot="public">
          <name>replace</name>
          <briefdescription>
<para>replace invalid UTF-8 sequences with U+FFFD </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
<para>ignore invalid UTF-8 sequences </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>how to treat decoding errors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="18052" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="18053" bodyend="18057"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacedetail_1a138aa0af34e28b5a1032f00c712d376b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using detail::void_t = typedef typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="255" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1af040ff7b29d4c7ebd4dc6062bb3db008" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1detector" kindref="compound">detector</ref>&lt; <ref refid="structdetail_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
        <definition>using detail::is_detected = typedef typename detector&lt;nonesuch, void, Op, Args...&gt;::value_t</definition>
        <argsstring></argsstring>
        <name>is_detected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="294" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a9d7d25c4bee06898292dff4eb4e381bf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1detector" kindref="compound">detector</ref>&lt; <ref refid="structdetail_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::type</type>
        <definition>using detail::detected_t = typedef typename detector&lt;nonesuch, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="300" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a7f58658f7add3da8b8b976f181fa38e0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Default</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1detector" kindref="compound">detector</ref>&lt; Default, void, Op, Args... &gt;</type>
        <definition>using detail::detected_or = typedef detector&lt;Default, void, Op, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>detected_or</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="303" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a7c8c357df0fc3008a19bf4dca3bedcc9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Default</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1detector" kindref="compound">detected_or</ref>&lt; Default, Op, Args... &gt;::type</type>
        <definition>using detail::detected_or_t = typedef typename detected_or&lt;Default, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_or_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="306" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a0f0f7c3e1f48f7df9b5bbceada5b1a07" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Expected</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; Expected, detected_t&lt; Op, Args... &gt; &gt;</type>
        <definition>using detail::is_detected_exact = typedef std::is_same&lt;Expected, detected_t&lt;Op, Args...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_exact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="309" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a599dfec0fd1c4cc9fcaa98e6fc804e7f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class To</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_convertible&lt; detected_t&lt; Op, Args... &gt;, To &gt;</type>
        <definition>using detail::is_detected_convertible = typedef std::is_convertible&lt;detected_t&lt;Op, Args...&gt;, To&gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_convertible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="312" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad76afb2c3a23eb88e7efb7c5d5499574" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type</type>
        <definition>using detail::uncvref_t = typedef typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>uncvref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3081" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a66bbcd629c83a87ba9cbc72a675cf84a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using detail::enable_if_t = typedef typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3095" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a4e6f1f2e94159041593901afc8f0c9b0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>Ints</declname>
            <defname>Ints</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1integer__sequence" kindref="compound">integer_sequence</ref>&lt; size_t, Ints... &gt;</type>
        <definition>using detail::index_sequence = typedef integer_sequence&lt;size_t, Ints...&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3137" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a517a072d9de78dcbc9c44c39f75a0d92" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1utility__internal_1_1Gen" kindref="compound">utility_internal::Gen</ref>&lt; T, N &gt;::type</type>
        <definition>using detail::make_integer_sequence = typedef typename utility_internal::Gen&lt;T, N&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_integer_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3183" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a82dd889f447e7a1383b8757be27f66e9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>make_integer_sequence&lt; size_t, N &gt;</type>
        <definition>using detail::make_index_sequence = typedef make_integer_sequence&lt;size_t, N&gt;</definition>
        <argsstring></argsstring>
        <name>make_index_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3191" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad2cab3320b7c6d98af3ddf06c1a6b112" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>make_index_sequence&lt; sizeof...(Ts)&gt;</type>
        <definition>using detail::index_sequence_for = typedef make_index_sequence&lt;sizeof...(Ts)&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence_for</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3199" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a6f0f5d9b1fa1f5ed1be64165f3cf887f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::mapped_type</type>
        <definition>using detail::mapped_type_t = typedef typename T::mapped_type</definition>
        <argsstring></argsstring>
        <name>mapped_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3496" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a8e60ec97eaa2afdff62c6217cbbbd747" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::key_type</type>
        <definition>using detail::key_type_t = typedef typename T::key_type</definition>
        <argsstring></argsstring>
        <name>key_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3499" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a53f74b6382403d25215a9433897255b4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::value_type</type>
        <definition>using detail::value_type_t = typedef typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3502" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad4e225ffcce63aef0a259e2c6bd839c1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::difference_type</type>
        <definition>using detail::difference_type_t = typedef typename T::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3505" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a41f3f767ccb40a3a5db595b172207340" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::pointer</type>
        <definition>using detail::pointer_t = typedef typename T::pointer</definition>
        <argsstring></argsstring>
        <name>pointer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3508" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae10a42b2797e1b62417091ff3d330832" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::reference</type>
        <definition>using detail::reference_t = typedef typename T::reference</definition>
        <argsstring></argsstring>
        <name>reference_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3511" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aa2e68a64b10d08b88f50a96c4f968be2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::iterator_category</type>
        <definition>using detail::iterator_category_t = typedef typename T::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3514" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a30a52995475a3d1522a15e7a8200c59e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(T::to_json(std::declval&lt; Args &gt;()...))</type>
        <definition>using detail::to_json_function = typedef decltype(T::to_json(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>to_json_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3517" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a7d0993334c14a7e8055e1ec5ff237133" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(T::from_json(std::declval&lt; Args &gt;()...))</type>
        <definition>using detail::from_json_function = typedef decltype(T::from_json(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>from_json_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3520" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a34780011ee13a3ede041ddcee288f484" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template get&lt; U &gt;())</type>
        <definition>using detail::get_template_function = typedef decltype(std::declval&lt;T&gt;().template get&lt;U&gt;())</definition>
        <argsstring></argsstring>
        <name>get_template_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3523" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aeb149366faaa55aa6bf1e510900353ea" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::key_compare</type>
        <definition>using detail::detect_key_compare = typedef typename T::key_compare</definition>
        <argsstring></argsstring>
        <name>detect_key_compare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3580" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1acf3e5af512080ec5b71496dde9e0651c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1actual__object__comparator" kindref="compound">actual_object_comparator</ref>&lt; BasicJsonType &gt;::type</type>
        <definition>using detail::actual_object_comparator_t = typedef typename actual_object_comparator&lt;BasicJsonType&gt;::type</definition>
        <argsstring></argsstring>
        <name>actual_object_comparator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3596" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a70f53d4fa21096275fc0e3016e27daf1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; <ref refid="structdetail_1_1is__range" kindref="compound">is_range</ref>&lt; R &gt;::value, result_of_begin&lt; decltype(std::declval&lt; R &amp; &gt;())&gt; &gt;</type>
        <definition>using detail::iterator_t = typedef enable_if_t&lt;is_range&lt;R&gt;::value, result_of_begin&lt;decltype(std::declval&lt;R&amp;&gt;())&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>iterator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3744" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ac2653c739e3ac41529a35735397b4f41" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>value_type_t&lt; <ref refid="structdetail_1_1iterator__traits" kindref="compound">iterator_traits</ref>&lt; iterator_t&lt; T &gt; &gt;&gt;</type>
        <definition>using detail::range_value_t = typedef value_type_t&lt;iterator_traits&lt;iterator_t&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>range_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3747" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a6d62ae589bb3ae01d156629c0b58b0f2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1is__specialization__of" kindref="compound">is_specialization_of</ref>&lt;::nlohmann::json_pointer, uncvref_t&lt; T &gt; &gt;</type>
        <definition>using detail::is_json_pointer = typedef is_specialization_of&lt;::nlohmann::json_pointer, uncvref_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_json_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3973" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1add6a1fa89738d39f7f123db6bad96101" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::is_transparent</type>
        <definition>using detail::detect_is_transparent = typedef typename T::is_transparent</definition>
        <argsstring></argsstring>
        <name>detect_is_transparent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3986" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a9d80ed747c2ea999c378519a7a6d6d31" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Comparator</type>
          </param>
          <param>
            <type>typename ObjectKeyType</type>
          </param>
          <param>
            <type>typename KeyTypeCVRef</type>
          </param>
          <param>
            <type>bool</type>
            <declname>RequireTransparentComparator</declname>
            <defname>RequireTransparentComparator</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>ExcludeObjectKeyType</declname>
            <defname>ExcludeObjectKeyType</defname>
            <defval>RequireTransparentComparator</defval>
          </param>
          <param>
            <type>typename KeyType</type>
            <defval>uncvref_t&lt;KeyTypeCVRef&gt;</defval>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; <ref refid="structdetail_1_1is__comparable" kindref="compound">is_comparable</ref>&lt; Comparator, ObjectKeyType, KeyTypeCVRef &gt;::value &amp;&amp;!(ExcludeObjectKeyType &amp;&amp;std::is_same&lt; KeyType, ObjectKeyType &gt;::value) &amp;&amp;(!RequireTransparentComparator||is_detected&lt; detect_is_transparent, Comparator &gt;::value) &amp;&amp;!<ref refid="structdetail_1_1is__specialization__of" kindref="compound">is_json_pointer</ref>&lt; KeyType &gt;::value, std::true_type, std::false_type &gt;::type</type>
        <definition>using detail::is_usable_as_key_type = typedef typename std::conditional &lt; is_comparable&lt;Comparator, ObjectKeyType, KeyTypeCVRef&gt;::value &amp;&amp; !(ExcludeObjectKeyType &amp;&amp; std::is_same&lt;KeyType, ObjectKeyType&gt;::value) &amp;&amp; (!RequireTransparentComparator || is_detected &lt;detect_is_transparent, Comparator&gt;::value) &amp;&amp; !is_json_pointer&lt;KeyType&gt;::value, std::true_type, std::false_type &gt;::type</definition>
        <argsstring></argsstring>
        <name>is_usable_as_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3992" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a394f5970957ff03ced71ce77b9417b00" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename KeyTypeCVRef</type>
          </param>
          <param>
            <type>bool</type>
            <declname>RequireTransparentComparator</declname>
            <defname>RequireTransparentComparator</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>ExcludeObjectKeyType</declname>
            <defname>ExcludeObjectKeyType</defname>
            <defval>RequireTransparentComparator</defval>
          </param>
          <param>
            <type>typename KeyType</type>
            <defval>uncvref_t&lt;KeyTypeCVRef&gt;</defval>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; is_usable_as_key_type&lt; typename BasicJsonType::object_comparator_t, typename BasicJsonType::object_t::key_type, KeyTypeCVRef, RequireTransparentComparator, ExcludeObjectKeyType &gt;::value &amp;&amp;!<ref refid="structdetail_1_1is__json__iterator__of" kindref="compound">is_json_iterator_of</ref>&lt; BasicJsonType, KeyType &gt;::value, std::true_type, std::false_type &gt;::type</type>
        <definition>using detail::is_usable_as_basic_json_key_type = typedef typename std::conditional &lt; is_usable_as_key_type&lt;typename BasicJsonType::object_comparator_t, typename BasicJsonType::object_t::key_type, KeyTypeCVRef, RequireTransparentComparator, ExcludeObjectKeyType&gt;::value &amp;&amp; !is_json_iterator_of&lt;BasicJsonType, KeyType&gt;::value, std::true_type, std::false_type &gt;::type</definition>
        <argsstring></argsstring>
        <name>is_usable_as_basic_json_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4010" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae8fd4ed53e2a6c71fe1fa557e1923b9f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ObjectType</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; ObjectType &amp; &gt;().erase(std::declval&lt; KeyType &gt;()))</type>
        <definition>using detail::detect_erase_with_key_type = typedef decltype(std::declval&lt;ObjectType&amp;&gt;().erase(std::declval&lt;KeyType&gt;()))</definition>
        <argsstring></argsstring>
        <name>detect_erase_with_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4019" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1abd4a9f5dc3f5e2b43c8dc87698d6d689" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; is_detected&lt; detect_erase_with_key_type, typename BasicJsonType::object_t, KeyType &gt;::value, std::true_type, std::false_type &gt;::type</type>
        <definition>using detail::has_erase_with_key_type = typedef typename std::conditional &lt; is_detected &lt; detect_erase_with_key_type, typename BasicJsonType::object_t, KeyType &gt;::value, std::true_type, std::false_type &gt;::type</definition>
        <argsstring></argsstring>
        <name>has_erase_with_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4023" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a76f25f590a08b4a0e4c26e515471003d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_integral&lt; Types &gt;... &gt;</type>
        <definition>using detail::all_integral = typedef conjunction&lt;std::is_integral&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>all_integral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4062" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ac78ba866159e98c93c50a9a1140901dc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_signed&lt; Types &gt;... &gt;</type>
        <definition>using detail::all_signed = typedef conjunction&lt;std::is_signed&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>all_signed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4065" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a804e13d43be14f983b738e18f0bb8eb9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_unsigned&lt; Types &gt;... &gt;</type>
        <definition>using detail::all_unsigned = typedef conjunction&lt;std::is_unsigned&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>all_unsigned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4068" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a91e73e1b9fba3c45b9ad1b0b7f4f1c9b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, <ref refid="structdetail_1_1conjunction" kindref="compound">all_signed</ref>&lt; Types... &gt;::value||<ref refid="structdetail_1_1conjunction" kindref="compound">all_unsigned</ref>&lt; Types... &gt;::value &gt;</type>
        <definition>using detail::same_sign = typedef std::integral_constant &lt; bool, all_signed&lt;Types...&gt;::value || all_unsigned&lt;Types...&gt;::value &gt;</definition>
        <argsstring></argsstring>
        <name>same_sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4072" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1af80e4e59be493e62842fb40354351e8b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename OfType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool,(std::is_signed&lt; OfType &gt;::value &amp;&amp;(sizeof(T)&lt; sizeof(OfType)))||(same_sign&lt; OfType, T &gt;::value &amp;&amp;sizeof(OfType)==sizeof(T)) &gt;</type>
        <definition>using detail::never_out_of_range = typedef std::integral_constant &lt; bool, (std::is_signed&lt;OfType&gt;::value &amp;&amp; (sizeof(T) &lt; sizeof(OfType))) || (same_sign&lt;OfType, T&gt;::value &amp;&amp; sizeof(OfType) == sizeof(T)) &gt;</definition>
        <argsstring></argsstring>
        <name>never_out_of_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4076" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a867b6755c86931c5824f5c97cba3b470" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Value</declname>
            <defname>Value</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, Value &gt;</type>
        <definition>using detail::bool_constant = typedef std::integral_constant&lt;bool, Value&gt;</definition>
        <argsstring></argsstring>
        <name>bool_constant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4156" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a9d99cdff6fa6a48145e5f7209d60db5a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1is__c__string" kindref="compound">is_c_string</ref>&lt; uncvref_t&lt; T &gt; &gt;</type>
        <definition>using detail::is_c_string_uncvref = typedef is_c_string&lt;uncvref_t&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_c_string_uncvref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4184" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1acf4c26a378982200b0f5e74a896366da" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; Arg &amp;&amp; &gt;()))</type>
        <definition>using detail::string_can_append = typedef decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval &lt; Arg &amp;&amp; &gt; ()))</definition>
        <argsstring></argsstring>
        <name>string_can_append</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4269" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1afa4e2beed41963eb3fc4a270821633f3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>is_detected&lt; string_can_append, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append = typedef is_detected&lt;string_can_append, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4272" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a19c834c5cfd6433e7d65371d1bc99972" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;()+=std::declval&lt; Arg &amp;&amp; &gt;())</type>
        <definition>using detail::string_can_append_op = typedef decltype(std::declval&lt;StringType&amp;&gt;() += std::declval &lt; Arg &amp;&amp; &gt; ())</definition>
        <argsstring></argsstring>
        <name>string_can_append_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4275" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a4c5c0042966002d3d0a653b504cf95da" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>is_detected&lt; string_can_append_op, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append_op = typedef is_detected&lt;string_can_append_op, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4278" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a9e6d98622b8133a6c4b873556cb55a9a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; const Arg &amp; &gt;().begin(), std::declval&lt; const Arg &amp; &gt;().end()))</type>
        <definition>using detail::string_can_append_iter = typedef decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const Arg&amp;&gt;().begin(), std::declval&lt;const Arg&amp;&gt;().end()))</definition>
        <argsstring></argsstring>
        <name>string_can_append_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4281" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a2a2fa7cb837caf838593444fe0d910b7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>is_detected&lt; string_can_append_iter, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append_iter = typedef is_detected&lt;string_can_append_iter, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4284" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aed2aa53ac9a71b89c3d6931de1d8fab6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; const Arg &amp; &gt;().data(), std::declval&lt; const Arg &amp; &gt;().size()))</type>
        <definition>using detail::string_can_append_data = typedef decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const Arg&amp;&gt;().data(), std::declval&lt;const Arg&amp;&gt;().size()))</definition>
        <argsstring></argsstring>
        <name>string_can_append_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4287" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a6299248749609c15beeb2804d3dd8c76" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>is_detected&lt; string_can_append_data, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append_data = typedef is_detected&lt;string_can_append_data, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4290" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a809ec57ce6ae319867de3f432b84d2e0" prot="public" static="no">
        <type>decltype(input_adapter(std::declval&lt; const char * &gt;(), std::declval&lt; const char * &gt;()))</type>
        <definition>using detail::contiguous_bytes_input_adapter = typedef decltype(input_adapter(std::declval&lt;const char*&gt;(), std::declval&lt;const char*&gt;()))</definition>
        <argsstring></argsstring>
        <name>contiguous_bytes_input_adapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6579" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad1ffe4e230a072251f2dc8614402be92" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().null())</type>
        <definition>using detail::null_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().null())</definition>
        <argsstring></argsstring>
        <name>null_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9036" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae30aad89df30f87812488131798c04f3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().boolean(std::declval&lt; bool &gt;()))</type>
        <definition>using detail::boolean_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().boolean(std::declval&lt;bool&gt;()))</definition>
        <argsstring></argsstring>
        <name>boolean_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9039" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a6e0a81589d754c68363229711186bbc3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().number_integer(std::declval&lt; Integer &gt;()))</type>
        <definition>using detail::number_integer_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().number_integer(std::declval&lt;Integer&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_integer_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9043" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1af0210e44153a964b7c8fa438b10123d4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Unsigned</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().number_unsigned(std::declval&lt; Unsigned &gt;()))</type>
        <definition>using detail::number_unsigned_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().number_unsigned(std::declval&lt;Unsigned&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_unsigned_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9047" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a70e0225bd96a0638b8609645b15144e2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Float</type>
          </param>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().number_float(std::declval&lt; Float &gt;(), std::declval&lt; const String &amp; &gt;()))</type>
        <definition>using detail::number_float_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().number_float( std::declval&lt;Float&gt;(), std::declval&lt;const String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_float_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9051" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1adfab15e52e28c4be475c5ab10eda9709" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().string(std::declval&lt; String &amp; &gt;()))</type>
        <definition>using detail::string_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().string(std::declval&lt;String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>string_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9055" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a9642e9834ddb777ad1cc009423c1bd75" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Binary</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().binary(std::declval&lt; Binary &amp; &gt;()))</type>
        <definition>using detail::binary_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().binary(std::declval&lt;Binary&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>binary_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9059" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aec6300e0d2b191d5821d213689816c1e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().start_object(std::declval&lt; std::size_t &gt;()))</type>
        <definition>using detail::start_object_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().start_object(std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>start_object_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9063" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1affa322c2f0600d0aa40f4355a90f664a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().key(std::declval&lt; String &amp; &gt;()))</type>
        <definition>using detail::key_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().key(std::declval&lt;String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>key_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9067" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae647e5e6d1d31930446c6bba53a5b644" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().end_object())</type>
        <definition>using detail::end_object_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().end_object())</definition>
        <argsstring></argsstring>
        <name>end_object_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9071" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a146589cb3d5a99611405e426a993761a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().start_array(std::declval&lt; std::size_t &gt;()))</type>
        <definition>using detail::start_array_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().start_array(std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>start_array_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9074" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ab653e6a6465c781e219314cad287aec7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().end_array())</type>
        <definition>using detail::end_array_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().end_array())</definition>
        <argsstring></argsstring>
        <name>end_array_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9078" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a1ab879c6b4f380d8ba7115d6b7ef948e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Exception</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="classdetail_1_1parse__error" kindref="compound">parse_error</ref>(std::declval&lt; std::size_t &gt;(), std::declval&lt; const std::string &amp; &gt;(), std::declval&lt; const Exception &amp; &gt;()))</type>
        <definition>using detail::parse_error_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().parse_error( std::declval&lt;std::size_t&gt;(), std::declval&lt;const std::string&amp;&gt;(), std::declval&lt;const Exception&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>parse_error_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9081" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a20a6b9b232b9f47ce057fe5cc5bbf511" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; bool(int, <ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312ef" kindref="member">parse_event_t</ref>, BasicJsonType &amp;)&gt;</type>
        <definition>using detail::parser_callback_t = typedef std::function&lt;bool(int , parse_event_t , BasicJsonType&amp; )&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12220" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae0ea2ae325b8654ea5ce36e2c5043f0a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; std::is_same&lt; T, void &gt;::value, <ref refid="structdetail_1_1json__default__base" kindref="compound">json_default_base</ref>, T &gt;::type</type>
        <definition>using detail::json_base_class = typedef typename std::conditional &lt; std::is_same&lt;T, void&gt;::value, json_default_base, T &gt;::type</definition>
        <argsstring></argsstring>
        <name>json_base_class</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="13792" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="13796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a160eb5d333fe01b259af32d3d4798a7b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="structdetail_1_1output__adapter__protocol" kindref="compound">output_adapter_protocol</ref>&lt; CharType &gt; &gt;</type>
        <definition>using detail::output_adapter_t = typedef std::shared_ptr&lt;output_adapter_protocol&lt;CharType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <briefdescription>
<para>a type to simplify interfaces </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="14960" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="14960" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedetail_1aac7ca91589afb0bad68baec5949daaa2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::operator&lt;</definition>
        <argsstring>(const value_t lhs, const value_t rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison operator for JSON types </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an ordering that is similar to Python:<itemizedlist>
<listitem><para>order: null &lt; boolean &lt; number &lt; object &lt; array &lt; string &lt; binary</para>
</listitem><listitem><para>furthermore, each type is not smaller than itself</para>
</listitem><listitem><para>discarded values are not comparable</para>
</listitem><listitem><para>binary is represented as a b&quot;&quot; string in python and directly comparable to a string; however, making a binary array directly comparable with a string would be surprising behavior in a JSON file.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="2902" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="2902" bodyend="2923"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6fd295e53b1dd4f46e235e6afee26d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::replace_substring</definition>
        <argsstring>(StringType &amp;s, const StringType &amp;f, const StringType &amp;t)</argsstring>
        <name>replace_substring</name>
        <param>
          <type>StringType &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>replace all occurrences of a substring by another string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to manipulate; changed so that all occurrences of <emphasis>f</emphasis> are replaced with <emphasis>t</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring to replace with <emphasis>t</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace <emphasis>f</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The search string <emphasis>f</emphasis> must not be empty. <bold>This precondition is enforced with an assertion.</bold></para>
</simplesect>
<simplesect kind="since"><para>version 2.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="2971" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="2971" bodyend="2980"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1af2a9ce4740e0b45d33129e2c8e53a0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>StringType</type>
        <definition>StringType detail::escape</definition>
        <argsstring>(StringType s)</argsstring>
        <name>escape</name>
        <param>
          <type>StringType</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>string escaping as described in RFC 6901 (Sect. 4) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to escape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>escaped string</para>
</simplesect>
Note the order of escaping &quot;~&quot; to &quot;~0&quot; and &quot;/&quot; to &quot;~1&quot; is important. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="2990" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="2990" bodyend="2995"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0e971234e72db1e314aa87298e84d1d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::unescape</definition>
        <argsstring>(StringType &amp;s)</argsstring>
        <name>unescape</name>
        <param>
          <type>StringType &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>string unescaping as described in RFC 6901 (Sect. 4) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to unescape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unescaped string</para>
</simplesect>
Note the order of escaping &quot;~1&quot; to &quot;/&quot; and &quot;~0&quot; to &quot;~&quot; is important. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3005" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3005" bodyend="3009"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a1eaaea1f10ec7d9b6eb031f399098663" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; T, sizeof...(Args)&gt;</type>
        <definition>constexpr std::array&lt;T, sizeof...(Args)&gt; detail::make_array</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_array</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="3222" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="3222" bodyend="3225"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5d17f1d261bd9fec64c08343c9f809fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>enable_if_t&lt; !std::is_same&lt; T, U &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T detail::conditional_static_cast</definition>
        <argsstring>(U value)</argsstring>
        <name>conditional_static_cast</name>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4050" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4050" bodyend="4053"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a8e7a4119c6c8e86cef8f1c904c8bf040" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool detail::value_in_range_of</definition>
        <argsstring>(T val)</argsstring>
        <name>value_in_range_of</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4150" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4150" bodyend="4153"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac185140ed8c8fcc07a302a890b714b0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>()</argsstring>
        <name>concat_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4234" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4234" bodyend="4237"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5d26947197a0f2d23110a4f40bd90d85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>(const char *cstr, const Args &amp;... rest)</argsstring>
        <name>concat_length</name>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4252" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4252" bodyend="4256" declfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" declline="4240" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a3cd92967d2de985b74ce05092fc21680" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>(const StringType &amp;str, const Args &amp;... rest)</argsstring>
        <name>concat_length</name>
        <param>
          <type>const StringType &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4259" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4259" bodyend="4262" declfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" declline="4243" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa5f189c556ba621b4bbb57fe03cd4800" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>(const char, const Args &amp;... rest)</argsstring>
        <name>concat_length</name>
        <param>
          <type>const char</type>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4246" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4246" bodyend="4249"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a89f967b745cf8df11ba9d59f93d97753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::concat_into</definition>
        <argsstring>(OutStringType &amp;)</argsstring>
        <name>concat_into</name>
        <param>
          <type>OutStringType &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4265" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4265" bodyend="4266"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa16fc2d4a149a0e3ac68ceb98b153815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !detect_string_can_append&lt; OutStringType, Arg &gt;::value &amp;&amp;detect_string_can_append_op&lt; OutStringType, Arg &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::concat_into</definition>
        <argsstring>(OutStringType &amp;out, Arg &amp;&amp;arg, Args &amp;&amp;... rest)</argsstring>
        <name>concat_into</name>
        <param>
          <type>OutStringType &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4312" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4312" bodyend="4316" declfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" declline="4295" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a78434fad7c03e66afdd06a6df628315a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !detect_string_can_append&lt; OutStringType, Arg &gt;::value &amp;&amp;!detect_string_can_append_op&lt; OutStringType, Arg &gt;::value &amp;&amp;detect_string_can_append_iter&lt; OutStringType, Arg &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::concat_into</definition>
        <argsstring>(OutStringType &amp;out, const Arg &amp;arg, Args &amp;&amp;... rest)</argsstring>
        <name>concat_into</name>
        <param>
          <type>OutStringType &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Arg &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4331" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4331" bodyend="4335" declfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" declline="4301" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a266fb3d4bf633ad6c506434cc91164da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
            <defval>std::string</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>OutStringType</type>
        <definition>OutStringType detail::concat</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>concat</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4349" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4349" bodyend="4355"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac8fc7fc4703cbd8edd7bb43a94adf92b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename std::nullptr_t &amp;n)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename std::nullptr_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4664" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4664" bodyend="4671"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ad10dc6af43ec8e72954eb2ac08c8698b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::get_arithmetic_value</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>get_arithmetic_value</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4678" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4678" bodyend="4708"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ae1f62aac7ce53a789f545f54e41e8926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::boolean_t &amp;b)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::boolean_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4711" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4711" bodyend="4718"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0b01c920706dca5df2940f1f09728db3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;s)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4721" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4721" bodyend="4728"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa0e2a2cdcf751b91b3fd1384add531cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; StringType &amp;, const typename BasicJsonType::string_t &gt;::value &amp;&amp;is_detected_exact&lt; typename BasicJsonType::string_t::value_type, value_type_t, StringType &gt;::value &amp;&amp;!std::is_same&lt; typename BasicJsonType::string_t, StringType &gt;::value &amp;&amp;!is_json_ref&lt; StringType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, StringType &amp;s)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>StringType &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4737" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4737" bodyend="4745"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4c4e5abfc7ef24404781b5d8662891c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_float_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_float_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4748" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4748" bodyend="4751"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6b5ceb7afc9a944042efac660c052db8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_unsigned_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_unsigned_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4754" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4754" bodyend="4757"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a8c225a3450f5d8a42cded36558ce54bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_integer_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_integer_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4760" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4760" bodyend="4763"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0ee80fe4260faeb92fe847620f7a2712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, EnumType &amp;e)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4768" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4768" bodyend="4773"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a906affddceb2daa6a462c5c02ce53761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_getable&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::forward_list&lt; T, Allocator &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::forward_list&lt; T, Allocator &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4779" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4779" bodyend="4791"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a1dee67b2f27eb606b7174ff7e7e56c49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_getable&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::valarray&lt; T &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::valarray&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4796" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4796" bodyend="4808"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4bb5bc21b8c5883207595a235a21946d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, T(&amp;arr)[N]) -&gt; decltype(j.template get&lt; T &gt;(), void())</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4811" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4811" bodyend="4818"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a51663047160f45866b183b4f0868adb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;arr, priority_tag&lt; 3 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4821" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4821" bodyend="4824"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ade9eb9a3516110d8886a4f3dcbe35006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, std::array&lt; T, N &gt; &amp;arr, priority_tag&lt; 2 &gt;) -&gt; decltype(j.template get&lt; T &gt;(), void())</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4827" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4827" bodyend="4835"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab722e171d99403f14337366b5e0d3620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; ConstructibleArrayType &amp;, ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr, priority_tag&lt; 1 &gt;) -&gt; decltype(arr.reserve(std::declval&lt; typename ConstructibleArrayType::size_type &gt;()), j.template get&lt; typename ConstructibleArrayType::value_type &gt;(), void())</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4841" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4841" bodyend="4859"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ae352d45d92aee512f9e16a808da911f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; ConstructibleArrayType &amp;, ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4865" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4865" bodyend="4880"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab475ad0d6acda4c96911fa6284a9ee37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_array_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!is_constructible_object_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!is_constructible_string_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::binary_t &gt;::value &amp;&amp;!is_basic_json&lt; ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr) -&gt; decltype(from_json_array_impl(j, arr, priority_tag&lt; 3 &gt; {}), j.template get&lt; typename ConstructibleArrayType::value_type &gt;(), void())</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4890" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4890" bodyend="4901"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1afec90a20ceefded031faabdf7d83ec3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, sizeof...(Idx)&gt;</type>
        <definition>std::array&lt;T, sizeof...(Idx)&gt; detail::from_json_inplace_array_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::array&lt; T, sizeof...(Idx)&gt;&gt;, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_inplace_array_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::array&lt; T, sizeof...(Idx)&gt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structdetail_1_1integer__sequence" kindref="compound">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4904" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4904" bodyend="4908"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0b9cf44c118f6e2010c1d16e448c1bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::array&lt; T, N &gt;&gt; tag) -&gt; decltype(from_json_inplace_array_impl(std::forward&lt; BasicJsonType &gt;(j), tag, make_index_sequence&lt; N &gt; {}))</argsstring>
        <name>from_json</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::array&lt; T, N &gt;&gt;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4911" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4911" bodyend="4920"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0ad294bce6911925bbb3afaaf5cafb50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::binary_t &amp;bin)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::binary_t &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4923" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4923" bodyend="4931"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a65752fffa784667e7b4ea8bdd0ec6669" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_object_type&lt; BasicJsonType, ConstructibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleObjectType &amp;obj)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4935" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4935" bodyend="4953"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5679c0faebc99f95ebfd2cb33406cdfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_unsigned_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_integer_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_float_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="4967" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="4967" bodyend="5001"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a9503e0f8592d268050398cd4a096d312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt;Args...&gt; detail::from_json_tuple_impl_base</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_tuple_impl_base</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1integer__sequence" kindref="compound">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5004" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5004" bodyend="5007"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a2eb297bfbd13e03c244ad1e729a3b38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>class A1</type>
          </param>
          <param>
            <type>class A2</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; A1, A2 &gt;</type>
        <definition>std::pair&lt;A1, A2&gt; detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::pair&lt; A1, A2 &gt;&gt;, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::pair&lt; A1, A2 &gt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5010" column="11" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5010" bodyend="5014"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac4311ef7d1e7089ef3404d6f50964cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename A1</type>
          </param>
          <param>
            <type>typename A2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, std::pair&lt; A1, A2 &gt; &amp;p, priority_tag&lt; 1 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::pair&lt; A1, A2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5017" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5017" bodyend="5020"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a8a6f1be3f481d08f23ea9911e9746421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt;Args...&gt; detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::tuple&lt; Args... &gt;&gt;, priority_tag&lt; 2 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::tuple&lt; Args... &gt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5023" column="12" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5023" bodyend="5026"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a77cca410ac9e251e0ff2847df09e03d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, std::tuple&lt; Args... &gt; &amp;t, priority_tag&lt; 3 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5029" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5029" bodyend="5032"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a63e4fca7dfdd8e637a6859155b5054b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename TupleRelated</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, TupleRelated &amp;&amp;t) -&gt; decltype(from_json_tuple_impl(std::forward&lt; BasicJsonType &gt;(j), std::forward&lt; TupleRelated &gt;(t), priority_tag&lt; 3 &gt; {}))</argsstring>
        <name>from_json</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>TupleRelated &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5035" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5035" bodyend="5044"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa1a92ab7f5de728919535b5714a4eda6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t &lt; !std::is_constructible &lt;                                        typename BasicJsonType::string_t, Key &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::map&lt; Key, Value, Compare, Allocator &gt; &amp;m)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::map&lt; Key, Value, Compare, Allocator &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5049" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5049" bodyend="5064"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6b60b3f3a22e35323af3ecbb1d7e2464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename KeyEqual</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t &lt; !std::is_constructible &lt;                                        typename BasicJsonType::string_t, Key &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt; &amp;m)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5069" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5069" bodyend="5084"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1af75fd8de21cdb8a0ed835b94aa02e5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename string_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::int_to_string</definition>
        <argsstring>(string_type &amp;target, std::size_t value)</argsstring>
        <name>int_to_string</name>
        <param>
          <type>string_type &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5179" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5179" bodyend="5184"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename IteratorType</type>
          </param>
          <param>
            <type>enable_if_t&lt; N==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::get</definition>
        <argsstring>(const nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &amp;i) -&gt; decltype(i.key())</argsstring>
        <name>get</name>
        <param>
          <type>const nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5342" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5342" bodyend="5345"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1acfdf2e4c8f09d5acaa2841358db51f82" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, T b) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5642" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5642" bodyend="5645"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a432a72eacdbf2e603aadbef62b0693e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename BoolRef</type>
          </param>
          <param>
            <type>enable_if_t&lt;((std::is_same&lt; std::vector&lt; bool &gt;::reference, BoolRef &gt;::value &amp;&amp;!std::is_same&lt; std::vector&lt; bool &gt;::reference, typename BasicJsonType::boolean_t &amp; &gt;::value)||(std::is_same&lt; std::vector&lt; bool &gt;::const_reference, BoolRef &gt;::value &amp;&amp;!std::is_same&lt; detail::uncvref_t&lt; std::vector&lt; bool &gt;::const_reference &gt;, typename BasicJsonType::boolean_t &gt;::value)) &amp;&amp;std::is_convertible&lt; const BoolRef &amp;, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const BoolRef &amp;b) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const BoolRef &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5655" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5655" bodyend="5658"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5c8440d5ee74cd66effc302294a0f03a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleString</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; typename BasicJsonType::string_t, CompatibleString &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleString &amp;s)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5662" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5662" bodyend="5665"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4efa05c0a1af490d3cd2244ab1ec2935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;&amp;s)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;&amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5668" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5668" bodyend="5671"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0fd79e26a03ad0f6f014acde6ca955ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename FloatType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_floating_point&lt; FloatType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, FloatType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5675" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5675" bodyend="5678"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1af4eec865929224a2edcdd86e0e2f5381" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberUnsignedType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberUnsignedType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberUnsignedType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5682" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5682" bodyend="5685"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aca950b6f8e111cbf473fa0a30b4118a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberIntegerType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberIntegerType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberIntegerType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5689" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5689" bodyend="5692"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0aa73b51ab32301503f808871a7d1130" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, EnumType e) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5697" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5697" bodyend="5702"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a898665fe3505e4124ee130ac40b5f7c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::vector&lt; bool &gt; &amp;e)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5706" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5706" bodyend="5709"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a13eaa461d3df66f08b281ed8ef67443d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_array_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!is_compatible_object_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!is_compatible_string_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; typename BasicJsonType::binary_t, CompatibleArrayType &gt;::value &amp;&amp;!is_basic_json&lt; CompatibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleArrayType &amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5719" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5719" bodyend="5722"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aac4c34558512e0288775fefb01900d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const typename BasicJsonType::binary_t &amp;bin)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const typename BasicJsonType::binary_t &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5725" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5725" bodyend="5728"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a71164c6a1be656ae46c8a48a9f4f024f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; T, BasicJsonType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::valarray&lt; T &gt; &amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::valarray&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5732" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5732" bodyend="5735"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aee383505e04bd7c68d4a288870147ff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;&amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;&amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5738" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5738" bodyend="5741"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a210ddcd90b4d42832abc02eb516c4d99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_object_type&lt; BasicJsonType, CompatibleObjectType &gt;::value &amp;&amp;!is_basic_json&lt; CompatibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleObjectType &amp;obj)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5745" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5745" bodyend="5748"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a48b6774b5ab06f17f77c683d85f0b0b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::object_t &amp;&amp;obj)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::object_t &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5751" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5751" bodyend="5754"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a120fee99373c660eb270811fd26226c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !std::is_constructible&lt; typename BasicJsonType::string_t, const T(&amp;)[N]&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const T(&amp;arr)[N])</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5761" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5761" bodyend="5764"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ade7a3840a7af072111b938aafefa4bef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; BasicJsonType, T1 &gt;::value &amp;&amp;std::is_constructible&lt; BasicJsonType, T2 &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::pair&lt; T1, T2 &gt; &amp;p)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5767" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5767" bodyend="5770"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a3f5949a32eedf94fb0b98fd189fda0d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, iteration_proxy_value&lt; typename BasicJsonType::iterator &gt;&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const T &amp;b)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5775" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5775" bodyend="5778"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0d4851287a8b8b21ca8605d31ca446ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;j, const Tuple &amp;t, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>to_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1integer__sequence" kindref="compound">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5781" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5781" bodyend="5784"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa723590713a6396b0306897a2cadfb08" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t detail::combine</definition>
        <argsstring>(std::size_t seed, std::size_t h) noexcept</argsstring>
        <name>combine</name>
        <param>
          <type>std::size_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6005" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6005" bodyend="6009"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a9dd43d16a6a490b032ceaca358755a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::hash</definition>
        <argsstring>(const BasicJsonType &amp;j)</argsstring>
        <name>hash</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>hash a JSON value </para>
        </briefdescription>
        <detaileddescription>
<para>The hash function tries to rely on std::hash where possible. Furthermore, the type of the JSON value is taken into account to have different hash values for null, 0, 0U, and false, etc.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classbasic__json" kindref="compound">basic_json</ref> specialization </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to hash </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash value of j </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6023" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6023" bodyend="6108"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a94ba526ee2dcd8db43be52cb621c1de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1iterator__input__adapter__factory" kindref="compound">iterator_input_adapter_factory</ref>&lt; IteratorType &gt;::adapter_type</type>
        <definition>iterator_input_adapter_factory&lt;IteratorType&gt;::adapter_type detail::input_adapter</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6522" column="56" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6522" bodyend="6526"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac73fad79696fdf2f9e524c98137c490b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1container__input__adapter__factory__impl_1_1container__input__adapter__factory" kindref="compound">container_input_adapter_factory_impl::container_input_adapter_factory</ref>&lt; ContainerType &gt;::adapter_type</type>
        <definition>container_input_adapter_factory_impl::container_input_adapter_factory&lt;ContainerType&gt;::adapter_type detail::input_adapter</definition>
        <argsstring>(const ContainerType &amp;container)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>const ContainerType &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6556" column="95" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6556" bodyend="6559"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa7b34bd54868366a47c9adad778867bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1file__input__adapter" kindref="compound">file_input_adapter</ref></type>
        <definition>file_input_adapter detail::input_adapter</definition>
        <argsstring>(std::FILE *file)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>std::FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6563" column="27" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6563" bodyend="6566"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1acb4166ff849c629ef37849b96fd8b72e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1input__stream__adapter" kindref="compound">input_stream_adapter</ref></type>
        <definition>input_stream_adapter detail::input_adapter</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6568" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6568" bodyend="6571"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a2e2919023b93a7f354cf35d46a493282" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1input__stream__adapter" kindref="compound">input_stream_adapter</ref></type>
        <definition>input_stream_adapter detail::input_adapter</definition>
        <argsstring>(std::istream &amp;&amp;stream)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>std::istream &amp;&amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6573" column="29" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6573" bodyend="6576"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a53fa6fb154a643a2202e31cb18f47c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; CharT &gt;::value &amp;&amp;!std::is_array&lt; CharT &gt;::value &amp;&amp;std::is_integral&lt; typename std::remove_pointer&lt; CharT &gt;::type &gt;::value &amp;&amp;sizeof(typename std::remove_pointer&lt; CharT &gt;::type)==1, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>contiguous_bytes_input_adapter</type>
        <definition>contiguous_bytes_input_adapter detail::input_adapter</definition>
        <argsstring>(CharT b)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>CharT</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6589" column="32" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6589" bodyend="6594"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a15bd0aaa9bdb9a169ef1601f9f9613e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto detail::input_adapter</definition>
        <argsstring>(T(&amp;array)[N]) -&gt; decltype(input_adapter(array, array+N))</argsstring>
        <name>input_adapter</name>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="6597" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="6597" bodyend="6600"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a9a6920228c2b39db99481d6952ca1add" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool detail::little_endianness</definition>
        <argsstring>(int num=1) noexcept</argsstring>
        <name>little_endianness</name>
        <param>
          <type>int</type>
          <declname>num</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>determine system byte order </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if and only if system&apos;s byte order is little endian</para>
</simplesect>
<simplesect kind="note"><para>from <ulink url="https://stackoverflow.com/a/1001328/266378">https://stackoverflow.com/a/1001328/266378</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9199" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9199" bodyend="9202"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aba70834b1009202ee5441c5db7f9f1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>JSON_HEDLEY_RETURNS_NON_NULL char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL char* detail::to_chars</definition>
        <argsstring>(char *first, const char *last, FloatType value)</argsstring>
        <name>to_chars</name>
        <param>
          <type>char *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>last</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>generates a decimal representation of the floating-point number value in [first, last). </para>
        </briefdescription>
        <detaileddescription>
<para>The format of the resulting decimal representation is similar to printf&apos;s g format. Returns an iterator pointing past-the-end of the decimal representation.</para>
<para><simplesect kind="note"><para>The input number must be finite, i.e. NaN&apos;s and Inf&apos;s are not supported. </para>
</simplesect>
<simplesect kind="note"><para>The buffer must be large enough. </para>
</simplesect>
<simplesect kind="note"><para>The result is NOT null-terminated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="17973" column="6" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="17973" bodyend="18023"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>detail namespace with internal helper functions </para>
    </briefdescription>
    <detaileddescription>
<para>This namespace collects functions that should not be exposed, implementations of some <ref refid="classbasic__json" kindref="compound">basic_json</ref> methods, and meta-programming helpers.</para>
<para><simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="248" column="1"/>
  </compounddef>
</doxygen>
