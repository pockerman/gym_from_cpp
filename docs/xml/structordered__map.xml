<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structordered__map" kind="struct" language="C++" prot="public">
    <compoundname>ordered_map</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; std::pair&lt; const Key, T &gt;, std::allocator&lt; std::pair&lt; const Key, T &gt;&gt; &gt;</basecompoundref>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Key</type>
      </param>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class IgnoredLess</type>
        <defval>std::less&lt;Key&gt;</defval>
      </param>
      <param>
        <type>class Allocator</type>
        <defval>std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structordered__map_1abe63d891859a3d0b156933d5b44ac85f" prot="public" static="no">
        <type>Key</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::key_type =  Key</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19036" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1a50a68289ec9c8554e5bbb7d0a2128c33" prot="public" static="no">
        <type>T</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::mapped_type =  T</definition>
        <argsstring></argsstring>
        <name>mapped_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19037" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19037" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1a18acd5b0134d2e378160031996ed3ddc" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; const Key, T &gt;, Allocator &gt;</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::Container =  std::vector&lt;std::pair&lt;const Key, T&gt;, Allocator&gt;</definition>
        <argsstring></argsstring>
        <name>Container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19038" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1a57c27034b40422a4b37ab8f4f60b9f14" prot="public" static="no">
        <type>typename Container::iterator</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::iterator =  typename Container::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19039" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1aeb48abad4ceb24e60002c6220d8b18b4" prot="public" static="no">
        <type>typename Container::const_iterator</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::const_iterator =  typename Container::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19040" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1a832acce07db0bec6c73675b35ad399c2" prot="public" static="no">
        <type>typename Container::size_type</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::size_type =  typename Container::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19041" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19041" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1a49a3a4f4eb960dcbcc15fd2692f18a91" prot="public" static="no">
        <type>typename Container::value_type</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::value_type =  typename Container::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19042" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1a4bbf207217197f997a9f3da8f149368b" prot="public" static="no">
        <type>std::equal_to&lt; Key &gt;</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::key_compare =  std::equal_to&lt;Key&gt;</definition>
        <argsstring></argsstring>
        <name>key_compare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19046" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structordered__map_1ac4f0c38634f809b72b8d2f31ca12cf80" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename InputIt</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; std::is_convertible&lt; typename std::iterator_traits&lt; InputIt &gt;::iterator_category, std::input_iterator_tag &gt;::value &gt;::type</type>
        <definition>using ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::require_input_iter =  typename std::enable_if&lt;std::is_convertible&lt;typename std::iterator_traits&lt;InputIt&gt;::iterator_category, std::input_iterator_tag&gt;::value&gt;::type</definition>
        <argsstring></argsstring>
        <name>require_input_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19348" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19349" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structordered__map_1ac743dcd50e67a69a69a422769df1d820" prot="private" static="no" mutable="no">
        <type>JSON_NO_UNIQUE_ADDRESS key_compare</type>
        <definition>JSON_NO_UNIQUE_ADDRESS key_compare ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::m_compare</definition>
        <argsstring></argsstring>
        <name>m_compare</name>
        <initializer>= key_compare()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19361" column="40" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19361" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structordered__map_1a8c8eed38b72bca336d07eac3a9ffbd1f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map</definition>
        <argsstring>() noexcept(noexcept(Container()))</argsstring>
        <name>ordered_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19051" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19051" bodyend="19051"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a50b6eea717a66fb6241bbd2e0246849f" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map</definition>
        <argsstring>(const Allocator &amp;alloc) noexcept(noexcept(Container(alloc)))</argsstring>
        <name>ordered_map</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19052" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19052" bodyend="19052"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1ac0fa192a94f9d4bba7ae4fc3eedd583f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map</definition>
        <argsstring>(It first, It last, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>ordered_map</name>
        <param>
          <type>It</type>
          <declname>first</declname>
        </param>
        <param>
          <type>It</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19054" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19054" bodyend="19055"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1ab57d658b6e341a80a7a882c0d5cf38e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map</definition>
        <argsstring>(std::initializer_list&lt; value_type &gt; init, const Allocator &amp;alloc=Allocator())</argsstring>
        <name>ordered_map</name>
        <param>
          <type>std::initializer_list&lt; value_type &gt;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19056" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19056" bodyend="19057"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a8ab9d18a0de258c21224ff3adfbd2372" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; iterator, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::emplace</definition>
        <argsstring>(const key_type &amp;key, T &amp;&amp;t)</argsstring>
        <name>emplace</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19059" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19059" bodyend="19070"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a2d2dea5d96368cda502b84eb35c0c2ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; iterator, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::emplace</definition>
        <argsstring>(KeyType &amp;&amp;key, T &amp;&amp;t)</argsstring>
        <name>emplace</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19074" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19074" bodyend="19085"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a907f9ef3e4899bcd5d6a99b50011af76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::operator[]</definition>
        <argsstring>(const key_type &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19087" column="7" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19087" bodyend="19090"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a5bb8fc73d6dd1ca67e99f84d05b14573" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::operator[]</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19094" column="8" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19094" bodyend="19097"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a1b0345845b86b6addcbc674632cff015" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::operator[]</definition>
        <argsstring>(const key_type &amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19099" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19099" bodyend="19102"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1af33685904d09d86cb4eae096a0d9888d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::operator[]</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19106" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19106" bodyend="19109"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a67d741fe8d5de525c6f2d54e2df7560d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::at</definition>
        <argsstring>(const key_type &amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19111" column="7" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19111" bodyend="19122"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1adf5f8cdb111b15781b97a53d28d7d4de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::at</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19126" column="8" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19126" bodyend="19137"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a0f910d98ca05ef14d39830c702944e71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::at</definition>
        <argsstring>(const key_type &amp;key) const</argsstring>
        <name>at</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19139" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19139" bodyend="19150"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a862c08ae6034e0e3a80bd3b9916ad697" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::at</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>at</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19154" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19154" bodyend="19165"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1aaa50926fc8df543dbe294859db97514e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::erase</definition>
        <argsstring>(const key_type &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19167" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19167" bodyend="19184"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a7d72919fabb5f477e69add51877e415f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>size_type</type>
        <definition>size_type ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::erase</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19188" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19188" bodyend="19205"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a4c3baa0920e81bd651ea01b9d735951b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::erase</definition>
        <argsstring>(iterator pos)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19207" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19207" bodyend="19210"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a6945910b941f51c9a81250d99ae34441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::erase</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19212" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19212" bodyend="19263"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a94ced73a996cf385aa68b6aae1f85dfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::count</definition>
        <argsstring>(const key_type &amp;key) const</argsstring>
        <name>count</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19265" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19265" bodyend="19275"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1abd35ff8bb3cfe4b8951f382fdfb617e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>size_type</type>
        <definition>size_type ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::count</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>count</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19279" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19279" bodyend="19289"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a67c6dfc6bc7817980067b40db5c252a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::find</definition>
        <argsstring>(const key_type &amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19291" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19291" bodyend="19301"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1ad3072ca1fdc7dd9f88d5d043deab9639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; detail::is_usable_as_key_type&lt; key_compare, key_type, KeyType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>iterator</type>
        <definition>iterator ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::find</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19305" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19305" bodyend="19315"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a73a21fcebe6f068cd2226c5586ac93d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::find</definition>
        <argsstring>(const key_type &amp;key) const</argsstring>
        <name>find</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19317" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19317" bodyend="19327"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1aaba9ddea7c2f582c417ec504ad20961c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; iterator, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::insert</definition>
        <argsstring>(value_type &amp;&amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>value_type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19329" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19329" bodyend="19332"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a7c77f6d3fbd8f693c5a9ad25244c14de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; iterator, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::insert</definition>
        <argsstring>(const value_type &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19334" column="15" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19334" bodyend="19345"/>
      </memberdef>
      <memberdef kind="function" id="structordered__map_1a8e19c1dfa836a39b16b0ce259447a61a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIt</type>
          </param>
          <param>
            <type>typename</type>
            <defval>require_input_iter&lt;InputIt&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;::insert</definition>
        <argsstring>(InputIt first, InputIt last)</argsstring>
        <name>insert</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19352" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19352" bodyend="19358"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a minimal map-like container that preserves insertion order </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/ordered_map/">https://json.nlohmann.me/api/ordered_map/</ulink></para>
</simplesect>
<ref refid="structordered__map" kindref="compound">ordered_map</ref>: a minimal map-like container that preserves insertion order for use within nlohmann::basic_json&lt;ordered_map&gt; </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</label>
        <link refid="structordered__map"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::vector&lt; std::pair&lt; const Key, T &gt;, std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;  &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</label>
        <link refid="structordered__map"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::vector&lt; std::pair&lt; const Key, T &gt;, std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;  &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="19034" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="19035" bodyend="19362"/>
    <listofallmembers>
      <member refid="structordered__map_1a67d741fe8d5de525c6f2d54e2df7560d" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>at</name></member>
      <member refid="structordered__map_1adf5f8cdb111b15781b97a53d28d7d4de" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>at</name></member>
      <member refid="structordered__map_1a0f910d98ca05ef14d39830c702944e71" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>at</name></member>
      <member refid="structordered__map_1a862c08ae6034e0e3a80bd3b9916ad697" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>at</name></member>
      <member refid="structordered__map_1aeb48abad4ceb24e60002c6220d8b18b4" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>const_iterator</name></member>
      <member refid="structordered__map_1a18acd5b0134d2e378160031996ed3ddc" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>Container</name></member>
      <member refid="structordered__map_1a94ced73a996cf385aa68b6aae1f85dfe" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>count</name></member>
      <member refid="structordered__map_1abd35ff8bb3cfe4b8951f382fdfb617e5" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>count</name></member>
      <member refid="structordered__map_1a8ab9d18a0de258c21224ff3adfbd2372" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>emplace</name></member>
      <member refid="structordered__map_1a2d2dea5d96368cda502b84eb35c0c2ca" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>emplace</name></member>
      <member refid="structordered__map_1aaa50926fc8df543dbe294859db97514e" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>erase</name></member>
      <member refid="structordered__map_1a7d72919fabb5f477e69add51877e415f" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>erase</name></member>
      <member refid="structordered__map_1a4c3baa0920e81bd651ea01b9d735951b" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>erase</name></member>
      <member refid="structordered__map_1a6945910b941f51c9a81250d99ae34441" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>erase</name></member>
      <member refid="structordered__map_1a67c6dfc6bc7817980067b40db5c252a4" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>find</name></member>
      <member refid="structordered__map_1ad3072ca1fdc7dd9f88d5d043deab9639" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>find</name></member>
      <member refid="structordered__map_1a73a21fcebe6f068cd2226c5586ac93d7" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>find</name></member>
      <member refid="structordered__map_1aaba9ddea7c2f582c417ec504ad20961c" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>insert</name></member>
      <member refid="structordered__map_1a7c77f6d3fbd8f693c5a9ad25244c14de" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>insert</name></member>
      <member refid="structordered__map_1a8e19c1dfa836a39b16b0ce259447a61a" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>insert</name></member>
      <member refid="structordered__map_1a57c27034b40422a4b37ab8f4f60b9f14" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>iterator</name></member>
      <member refid="structordered__map_1a4bbf207217197f997a9f3da8f149368b" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>key_compare</name></member>
      <member refid="structordered__map_1abe63d891859a3d0b156933d5b44ac85f" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>key_type</name></member>
      <member refid="structordered__map_1ac743dcd50e67a69a69a422769df1d820" prot="private" virt="non-virtual"><scope>ordered_map</scope><name>m_compare</name></member>
      <member refid="structordered__map_1a50a68289ec9c8554e5bbb7d0a2128c33" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>mapped_type</name></member>
      <member refid="structordered__map_1a907f9ef3e4899bcd5d6a99b50011af76" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>operator[]</name></member>
      <member refid="structordered__map_1a5bb8fc73d6dd1ca67e99f84d05b14573" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>operator[]</name></member>
      <member refid="structordered__map_1a1b0345845b86b6addcbc674632cff015" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>operator[]</name></member>
      <member refid="structordered__map_1af33685904d09d86cb4eae096a0d9888d" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>operator[]</name></member>
      <member refid="structordered__map_1a8c8eed38b72bca336d07eac3a9ffbd1f" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>ordered_map</name></member>
      <member refid="structordered__map_1a50b6eea717a66fb6241bbd2e0246849f" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>ordered_map</name></member>
      <member refid="structordered__map_1ac0fa192a94f9d4bba7ae4fc3eedd583f" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>ordered_map</name></member>
      <member refid="structordered__map_1ab57d658b6e341a80a7a882c0d5cf38e0" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>ordered_map</name></member>
      <member refid="structordered__map_1ac4f0c38634f809b72b8d2f31ca12cf80" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>require_input_iter</name></member>
      <member refid="structordered__map_1a832acce07db0bec6c73675b35ad399c2" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>size_type</name></member>
      <member refid="structordered__map_1a49a3a4f4eb960dcbcc15fd2692f18a91" prot="public" virt="non-virtual"><scope>ordered_map</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
