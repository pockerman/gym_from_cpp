<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacehttp" kind="namespace" language="C++">
    <compoundname>http</compoundname>
    <innerclass refid="classhttp_1_1RequestError" prot="public">http::RequestError</innerclass>
    <innerclass refid="classhttp_1_1ResponseError" prot="public">http::ResponseError</innerclass>
    <innerclass refid="structhttp_1_1Uri" prot="public">http::Uri</innerclass>
    <innerclass refid="structhttp_1_1HttpVersion" prot="public">http::HttpVersion</innerclass>
    <innerclass refid="structhttp_1_1Status" prot="public">http::Status</innerclass>
    <innerclass refid="structhttp_1_1Response" prot="public">http::Response</innerclass>
    <innerclass refid="classhttp_1_1Request" prot="public">http::Request</innerclass>
    <innerclass refid="classhttp_1_1detail_1_1Socket" prot="public">http::Socket</innerclass>
    <innernamespace refid="namespacehttp_1_1detail" inline="yes">http::detail</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="HTTPRequest_8hpp_1a672892389a9ddd4ac61297847de529e5" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>InternetProtocol</name>
        <enumvalue id="HTTPRequest_8hpp_1a672892389a9ddd4ac61297847de529e5a5ed3a3ff8e5c29979502b9030e8518e0" prot="public">
          <name>v4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="HTTPRequest_8hpp_1a672892389a9ddd4ac61297847de529e5a0af45c99beb7a9afc9192665c4a05cd3" prot="public">
          <name>v6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="67" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="HTTPRequest_8hpp_1a63cc1e5ba674efd8c7d5fd0ee45f8529" prot="public" static="no">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>using http::HeaderField = typedef std::pair&lt;std::string, std::string&gt;</definition>
        <argsstring></argsstring>
        <name>HeaderField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="168" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HTTPRequest_8hpp_1a313575e141c6226ff4d3337946edea49" prot="public" static="no">
        <type>std::vector&lt; HeaderField &gt;</type>
        <definition>using http::HeaderFields = typedef std::vector&lt;HeaderField&gt;</definition>
        <argsstring></argsstring>
        <name>HeaderFields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="169" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="HTTPRequest_8hpp_1afa5ba1385c3b065a21c2494f46956d86" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int http::detail::getLastError</definition>
        <argsstring>() noexcept</argsstring>
        <name>getLastError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="225" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a91902f52c89c1b17620bf9f1b58d4167" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr int</type>
        <definition>constexpr int http::detail::getAddressFamily</definition>
        <argsstring>(const InternetProtocol internetProtocol)</argsstring>
        <name>getAddressFamily</name>
        <param>
          <type>const InternetProtocol</type>
          <declname>internetProtocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="234" column="23" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a4139ec7f34447991b4bb033d818d4cd9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool http::detail::isWhiteSpaceChar</definition>
        <argsstring>(const C c) noexcept</argsstring>
        <name>isWhiteSpaceChar</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="496" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1aacdb3553071c558e139c789ca2ecd288" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool http::detail::isDigitChar</definition>
        <argsstring>(const C c) noexcept</argsstring>
        <name>isDigitChar</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="503" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="503" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1aaa81fb1ff04d25d1d08c55c63eadabb5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool http::detail::isAlphaChar</definition>
        <argsstring>(const C c) noexcept</argsstring>
        <name>isAlphaChar</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="510" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="510" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a4a38d09f351fea988dae61ccdcf51a46" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool http::detail::isTokenChar</definition>
        <argsstring>(const C c) noexcept</argsstring>
        <name>isTokenChar</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="519" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="519" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a93c2003ac57bc295520c86e7c1fcfc22" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool http::detail::isVisibleChar</definition>
        <argsstring>(const C c) noexcept</argsstring>
        <name>isVisibleChar</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="542" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a95c74266e5c70c853688464e63034bef" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool http::detail::isObsoleteTextChar</definition>
        <argsstring>(const C c) noexcept</argsstring>
        <name>isObsoleteTextChar</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="549" column="24" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="549" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a41dccd9b4902106f24df3092c51c20e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>Iterator</type>
        <definition>Iterator http::detail::skipWhiteSpaces</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>skipWhiteSpaces</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="556" column="18" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="556" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1ab634e428e2d1dae307c0ed773ec06c6e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_unsigned&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T http::detail::digitToUint</definition>
        <argsstring>(const C c)</argsstring>
        <name>digitToUint</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="568" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="568" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a43af8e769f78262a780c3b5b14ae01ea" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_unsigned&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T http::detail::hexDigitToUint</definition>
        <argsstring>(const C c)</argsstring>
        <name>hexDigitToUint</name>
        <param>
          <type>const C</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="577" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="577" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a3cb0b622bd0c7b8fd50a34228d15108c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="structhttp_1_1Uri" kindref="compound">Uri</ref></type>
        <definition>Uri http::detail::parseUri</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseUri</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="588" column="13" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="588" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a81d462c7d8dcca35859ab1b5ebf9e146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, <ref refid="structhttp_1_1HttpVersion" kindref="compound">HttpVersion</ref> &gt;</type>
        <definition>std::pair&lt;Iterator, HttpVersion&gt; http::detail::parseHttpVersion</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseHttpVersion</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="674" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="674" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a1572680ca1a0bb07b48ccd80b0ead82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, std::uint16_t &gt;</type>
        <definition>std::pair&lt;Iterator, std::uint16_t&gt; http::detail::parseStatusCode</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseStatusCode</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="707" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="707" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a6fac3adc2ae4380dbb5958e49dcc6745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, std::string &gt;</type>
        <definition>std::pair&lt;Iterator, std::string&gt; http::detail::parseReasonPhrase</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseReasonPhrase</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="723" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="723" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a120fff861810a5ed6cdd5bf103ca72b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, std::string &gt;</type>
        <definition>std::pair&lt;Iterator, std::string&gt; http::detail::parseToken</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseToken</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="736" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="736" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a61e8a04a6dcc961caef50207c1bf2df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, std::string &gt;</type>
        <definition>std::pair&lt;Iterator, std::string&gt; http::detail::parseFieldValue</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseFieldValue</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="752" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="752" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1af42d95b60821357e4bd1ad2a4893225e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, std::string &gt;</type>
        <definition>std::pair&lt;Iterator, std::string&gt; http::detail::parseFieldContent</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseFieldContent</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="770" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="770" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1abfb42d5cedc9bf79a97f3b1f8f3a8fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, HeaderField &gt;</type>
        <definition>std::pair&lt;Iterator, HeaderField&gt; http::detail::parseHeaderField</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseHeaderField</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="803" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="803" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a6d0fbd7c28cb8ccb0fcaa0691c1b61ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; Iterator, <ref refid="structhttp_1_1Status" kindref="compound">Status</ref> &gt;</type>
        <definition>std::pair&lt;Iterator, Status&gt; http::detail::parseStatusLine</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>parseStatusLine</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="829" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="829" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a7c01697427babfa4dbb50a7bb6fa6811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_unsigned&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T http::detail::stringToUint</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>stringToUint</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="861" column="11" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="861" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a9079e7f00b31c3144eaa8a1a254fea28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_unsigned&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T http::detail::hexStringToUint</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>hexStringToUint</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="871" column="11" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="871" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a85eb0a37811caa6880d489de072bd42a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string http::detail::encodeRequestLine</definition>
        <argsstring>(const std::string &amp;method, const std::string &amp;target)</argsstring>
        <name>encodeRequestLine</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="881" column="28" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="881" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a08544cffb0a8ac7d2950d35d709ec278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string http::detail::encodeHeaderFields</definition>
        <argsstring>(const HeaderFields &amp;headerFields)</argsstring>
        <name>encodeHeaderFields</name>
        <param>
          <type>const HeaderFields &amp;</type>
          <declname>headerFields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="887" column="28" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="887" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1abb39433f9ad3b278868a3e699ebf9bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string http::detail::encodeBase64</definition>
        <argsstring>(const Iterator begin, const Iterator end)</argsstring>
        <name>encodeBase64</name>
        <param>
          <type>const Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="911" column="21" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="911" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="HTTPRequest_8hpp_1a358cdc91bb43570376e37daf7668b3d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>std::vector&lt;std::uint8_t&gt; http::detail::encodeHtml</definition>
        <argsstring>(const Uri &amp;uri, const std::string &amp;method, const std::vector&lt; uint8_t &gt; &amp;body, HeaderFields headerFields)</argsstring>
        <name>encodeHtml</name>
        <param>
          <type>const <ref refid="structhttp_1_1Uri" kindref="compound">Uri</ref> &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>HeaderFields</type>
          <declname>headerFields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="956" column="28" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" bodystart="956" bodyend="988"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/HTTPRequest.hpp" line="53" column="1"/>
  </compounddef>
</doxygen>
