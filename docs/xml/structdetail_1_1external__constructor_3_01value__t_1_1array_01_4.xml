<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4" kind="struct" language="C++" prot="public">
    <compoundname>detail::external_constructor&lt; value_t::array &gt;</compoundname>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1ab4ee01b86545c25823e95f06bfb8cec3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::external_constructor&lt; value_t::array &gt;::construct</definition>
        <argsstring>(BasicJsonType &amp;j, const typename BasicJsonType::array_t &amp;arr)</argsstring>
        <name>construct</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const typename BasicJsonType::array_t &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5532" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5532" bodyend="5539"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1aa1344db7d6793021693563dca416e5b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::external_constructor&lt; value_t::array &gt;::construct</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;&amp;arr)</argsstring>
        <name>construct</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;&amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5542" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5542" bodyend="5549"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1ae399adc0d10013a567e8646807d650b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; !std::is_same&lt; CompatibleArrayType, typename BasicJsonType::array_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::external_constructor&lt; value_t::array &gt;::construct</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleArrayType &amp;arr)</argsstring>
        <name>construct</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5554" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5554" bodyend="5564"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1a8d6adedb6b308d21cd8a02b68f6cb3c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::external_constructor&lt; value_t::array &gt;::construct</definition>
        <argsstring>(BasicJsonType &amp;j, const std::vector&lt; bool &gt; &amp;arr)</argsstring>
        <name>construct</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5567" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5567" bodyend="5579"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1afe050b2957d0a1f416107909d919a772" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; T, BasicJsonType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::external_constructor&lt; value_t::array &gt;::construct</definition>
        <argsstring>(BasicJsonType &amp;j, const std::valarray&lt; T &gt; &amp;arr)</argsstring>
        <name>construct</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::valarray&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5583" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5583" bodyend="5595"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="5529" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="5530" bodyend="5596"/>
    <listofallmembers>
      <member refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1ab4ee01b86545c25823e95f06bfb8cec3" prot="public" virt="non-virtual"><scope>detail::external_constructor&lt; value_t::array &gt;</scope><name>construct</name></member>
      <member refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1aa1344db7d6793021693563dca416e5b4" prot="public" virt="non-virtual"><scope>detail::external_constructor&lt; value_t::array &gt;</scope><name>construct</name></member>
      <member refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1ae399adc0d10013a567e8646807d650b5" prot="public" virt="non-virtual"><scope>detail::external_constructor&lt; value_t::array &gt;</scope><name>construct</name></member>
      <member refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1a8d6adedb6b308d21cd8a02b68f6cb3c3" prot="public" virt="non-virtual"><scope>detail::external_constructor&lt; value_t::array &gt;</scope><name>construct</name></member>
      <member refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4_1afe050b2957d0a1f416107909d919a772" prot="public" virt="non-virtual"><scope>detail::external_constructor&lt; value_t::array &gt;</scope><name>construct</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
