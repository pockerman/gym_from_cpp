<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="iterative__algorithm__result_8h" kind="file" language="C++">
    <compoundname>iterative_algorithm_result.h</compoundname>
    <includes refid="rlenvs__types__v2_8h" local="yes">rlenvs/rlenvs_types_v2.h</includes>
    <includes local="no">ostream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">vector</includes>
    <includedby refid="iterative__algorithm__controller_8h" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/iterative_algorithm_controller.h</includedby>
    <includedby refid="iterative__algorithm__result_8cpp" local="yes">/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/iterative_algorithm_result.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="3">
        <label>rlenvs/rlenvscpp_config.h</label>
        <link refid="rlenvscpp__config_8h_source"/>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="2">
        <label>rlenvs/rlenvs_types_v2.h</label>
        <link refid="rlenvs__types__v2_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="4">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/iterative_algorithm_result.h</label>
        <link refid="iterative__algorithm__result_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/iterative_algorithm_result.h</label>
        <link refid="iterative__algorithm__result_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/iterative_algorithm_controller.h</label>
        <link refid="iterative__algorithm__controller_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult" prot="public">rlenvscpp::utils::IterativeAlgorithmResult</innerclass>
    <innernamespace refid="namespacerlenvscpp">rlenvscpp</innernamespace>
    <innernamespace refid="namespacerlenvscpp_1_1utils">rlenvscpp::utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ITERATIVE_ALGORITHM_RESULT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ITERATIVE_ALGORITHM_RESULT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rlenvs/rlenvs_types_v2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerlenvscpp" kindref="compound">rlenvscpp</ref>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult" kindref="compound">IterativeAlgorithmResult</ref><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a70a388d82b188fdafdeaec8cd3da03f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a70a388d82b188fdafdeaec8cd3da03f3" kindref="member">tolerance</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1ad7affb64a26c6452bf139c938daaa216" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1ad7affb64a26c6452bf139c938daaa216" kindref="member">residual</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a626c146b565b4092676a56f99769654d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a626c146b565b4092676a56f99769654d" kindref="member">num_iterations</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a758af50b4cd22eeb4399ee514241564b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a758af50b4cd22eeb4399ee514241564b" kindref="member">converged</ref>=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a6c15d2afbde9cead2ad3248ab48919d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;real_t&gt;<sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a6c15d2afbde9cead2ad3248ab48919d9" kindref="member">total_time</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a9d9f90e4ac96dffe7e62e77b103a7673" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;real_t&gt;<sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a9d9f90e4ac96dffe7e62e77b103a7673" kindref="member">residuals</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1afcbb01d66c6abc04aa6b3eff838eef7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1afcbb01d66c6abc04aa6b3eff838eef7a" kindref="member">IterativeAlgorithmResult</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1afcbb01d66c6abc04aa6b3eff838eef7a" kindref="member">IterativeAlgorithmResult</ref>(<ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/>tol,<sp/><ref refid="namespacerlenvscpp_1ac50675da35de20edc5e4b56549ebe2e2" kindref="member">real_t</ref><sp/>res,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacerlenvscpp_1ab3932c04676822ef4121e58e701dc623" kindref="member">uint_t</ref><sp/>nitrs,<sp/>std::chrono::duration&lt;real_t&gt;<sp/>time);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a00d5a6f6862d0e30e9b267c7520afd30" kindref="member">print</ref>(std::ostream&amp;<sp/>out)</highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult" kindref="compound">IterativeAlgorithmResult</ref>&amp;<sp/>result){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.<ref refid="structrlenvscpp_1_1utils_1_1IterativeAlgorithmResult_1a00d5a6f6862d0e30e9b267c7520afd30" kindref="member">print</ref>(out);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>ITERATIVE_ALGORITHM_RESULT_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/utils/iterative_algorithm_result.h"/>
  </compounddef>
</doxygen>
