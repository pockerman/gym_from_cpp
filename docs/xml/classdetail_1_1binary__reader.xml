<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdetail_1_1binary__reader" kind="class" language="C++" prot="public">
    <compoundname>detail::binary_reader</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename BasicJsonType</type>
      </param>
      <param>
        <type>typename InputAdapterType</type>
      </param>
      <param>
        <type>typename SAX</type>
        <defval><ref refid="classdetail_1_1json__sax__dom__parser" kindref="compound">json_sax_dom_parser</ref>&lt;BasicJsonType&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a81a846e1a1a3205d2b79f279acb72997" prot="private" static="no">
        <type>typename BasicJsonType::number_integer_t</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::number_integer_t =  typename BasicJsonType::number_integer_t</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9214" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a387c1c1b48f4bfbfd91745c320916cb2" prot="private" static="no">
        <type>typename BasicJsonType::number_unsigned_t</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::number_unsigned_t =  typename BasicJsonType::number_unsigned_t</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9215" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a9f35dbfbad495dbf13d89d749589d452" prot="private" static="no">
        <type>typename BasicJsonType::number_float_t</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::number_float_t =  typename BasicJsonType::number_float_t</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9216" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a0ee67ae79f387747a4a7c7fd9bfbc001" prot="private" static="no">
        <type>typename BasicJsonType::string_t</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::string_t =  typename BasicJsonType::string_t</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9217" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a64e41342c6f297ad51df1af200c7cea8" prot="private" static="no">
        <type>typename BasicJsonType::binary_t</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::binary_t =  typename BasicJsonType::binary_t</definition>
        <argsstring></argsstring>
        <name>binary_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9218" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1abc518b68559199b111514a68f2be2d66" prot="private" static="no">
        <type>SAX</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::json_sax_t =  SAX</definition>
        <argsstring></argsstring>
        <name>json_sax_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9219" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a2d386b0e8277c44c879a75db5ec7d6ab" prot="private" static="no">
        <type>typename InputAdapterType::char_type</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::char_type =  typename InputAdapterType::char_type</definition>
        <argsstring></argsstring>
        <name>char_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9220" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a5cf8feaa556ca5b844f538faffd25ace" prot="private" static="no">
        <type>typename <ref refid="structdetail_1_1char__traits" kindref="compound">char_traits</ref>&lt; char_type &gt;::int_type</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::char_int_type =  typename char_traits&lt;char_type&gt;::int_type</definition>
        <argsstring></argsstring>
        <name>char_int_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9221" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdetail_1_1binary__reader_1a186a82ba6aab7a716dbc690bb93844c0" prot="private" static="no">
        <type>std::pair&lt; char_int_type, string_t &gt;</type>
        <definition>using detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::bjd_type =  std::pair&lt;char_int_type, string_t&gt;</definition>
        <argsstring></argsstring>
        <name>bjd_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12140" column="5" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a9853508f38bdc65a3fca5c9523395592" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr JSON_INLINE_VARIABLE std::size_t</type>
        <definition>constexpr std::size_t detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::npos</definition>
        <argsstring></argsstring>
        <name>npos</name>
        <initializer>= static_cast&lt;std::size_t&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12096" column="55" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12096" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a3d343cad08995ebeba7b0ab01cd36a66" prot="private" static="no" mutable="no">
        <type>InputAdapterType</type>
        <definition>InputAdapterType detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::ia</definition>
        <argsstring></argsstring>
        <name>ia</name>
        <briefdescription>
<para>input adapter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12099" column="22" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a933e3ceca7a616980ae13f3c559c84ba" prot="private" static="no" mutable="no">
        <type>char_int_type</type>
        <definition>char_int_type detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <initializer>= <ref refid="structdetail_1_1char__traits" kindref="compound">char_traits</ref>&lt;char_type&gt;::eof()</initializer>
        <briefdescription>
<para>the current character </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12102" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a1020433fa639ee6d3766d7f6465d7131" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::chars_read</definition>
        <argsstring></argsstring>
        <name>chars_read</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>the number of characters read </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12105" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a35e8954d616d21c153211c0e396aba97" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::is_little_endian</definition>
        <argsstring></argsstring>
        <name>is_little_endian</name>
        <initializer>= little_endianness()</initializer>
        <briefdescription>
<para>whether we can assume little endianness </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12108" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1afcca9f2688a382abf342e25ea63eceba" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
        <definition>const input_format_t detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::input_format</definition>
        <argsstring></argsstring>
        <name>input_format</name>
        <initializer>= input_format_t::json</initializer>
        <briefdescription>
<para>input format </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12111" column="26" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a012edbf7ba414b1646c7ccc30bae342c" prot="private" static="no" mutable="no">
        <type>json_sax_t *</type>
        <definition>json_sax_t* detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::sax</definition>
        <argsstring></argsstring>
        <name>sax</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>the SAX parser </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12114" column="16" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1a98249fa39fdf9d84bb650bee0463be73" prot="private" static="no" mutable="no">
        <type>JSON_PRIVATE_UNLESS_TESTED</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <bitfield> const decltype(JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_) bjd_optimized_type_markers = JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12134" column="3" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdetail_1_1binary__reader_1ac0dcae9c2ba34117b8ac6dd11830364d" prot="private" static="no" mutable="no">
        <type>decltype(JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_) const</type>
        <definition>decltype(JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_) const detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::bjd_types_map</definition>
        <argsstring></argsstring>
        <name>bjd_types_map</name>
        <initializer>=
        JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12142" column="20" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a5dc3e9216177efe30686876d3faccf52" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::binary_reader</definition>
        <argsstring>(InputAdapterType &amp;&amp;adapter, const input_format_t format=input_format_t::json) noexcept</argsstring>
        <name>binary_reader</name>
        <param>
          <type>InputAdapterType &amp;&amp;</type>
          <declname>adapter</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <briefdescription>
<para>create a binary reader </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">adapter</parametername>
</parameternamelist>
<parameterdescription>
<para>input adapter to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9229" column="14" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9229" bodyend="9232"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a03d3ad5fd319550b8ca4e54ddcf46ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::binary_reader</definition>
        <argsstring>(const binary_reader &amp;)=delete</argsstring>
        <name>binary_reader</name>
        <param>
          <type>const <ref refid="classdetail_1_1binary__reader" kindref="compound">binary_reader</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9235" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a4197fcaec6f876fd9019c0f6a48c7f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::binary_reader</definition>
        <argsstring>(binary_reader &amp;&amp;)=default</argsstring>
        <name>binary_reader</name>
        <param>
          <type><ref refid="classdetail_1_1binary__reader" kindref="compound">binary_reader</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9236" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1acd9e98648355f3d99061569b092d9cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdetail_1_1binary__reader" kindref="compound">binary_reader</ref> &amp;</type>
        <definition>binary_reader&amp; detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::operator=</definition>
        <argsstring>(const binary_reader &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdetail_1_1binary__reader" kindref="compound">binary_reader</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9237" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1ac14902d436b99bc798a69c370755a84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdetail_1_1binary__reader" kindref="compound">binary_reader</ref> &amp;</type>
        <definition>binary_reader&amp; detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::operator=</definition>
        <argsstring>(binary_reader &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdetail_1_1binary__reader" kindref="compound">binary_reader</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9238" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a99eaa03613e1af4db21fe9f1a1d0cf14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::~binary_reader</definition>
        <argsstring>()=default</argsstring>
        <name>~binary_reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9239" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a8e1b5452ae426e1d7b48761859e7f52d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::sax_parse</definition>
        <argsstring>(const input_format_t format, json_sax_t *sax_, const bool strict=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>sax_parse</name>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>json_sax_t *</type>
          <declname>sax_</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval><ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592acb5e100e5a9a3e7f6d1fd97512215282" kindref="member">cbor_tag_handler_t::error</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the binary format to parse </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sax_</parametername>
</parameternamelist>
<parameterdescription>
<para>a SAX event processor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed completed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how to treat CBOR tags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether parsing was successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9250" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9250" bodyend="9302"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a66514e22cb51ce5030b77376c1f701ec" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_bson_internal</definition>
        <argsstring>()</argsstring>
        <name>parse_bson_internal</name>
        <briefdescription>
<para>Reads in a BSON-object and passes it to the SAX-parser. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether a valid BSON-value was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9313" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9313" bodyend="9329"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a899a51f4cd0ad49a8989de586f9dd7a2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_bson_cstr</definition>
        <argsstring>(string_t &amp;result)</argsstring>
        <name>get_bson_cstr</name>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Parses a C-style string from the BSON input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the string variable where the read string is to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the \x00-byte indicating the end of the string was encountered before the EOF; false` indicates an unexpected EOF. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9338" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9338" bodyend="9354"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1ad8eda2acffbc76cb622e6f52a13bebea" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NumberType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_bson_string</definition>
        <argsstring>(const NumberType len, string_t &amp;result)</argsstring>
        <name>get_bson_string</name>
        <param>
          <type>const NumberType</type>
          <declname>len</declname>
        </param>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Parses a zero-terminated string of length <emphasis>len</emphasis> from the BSON input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length (including the zero-byte at the end) of the string to be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the string variable where the read string is to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NumberType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the length <emphasis>len</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>len &gt;= 1 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the string was successfully parsed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9368" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9368" bodyend="9378"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1afd4a59072e687d5d07f53d7320a4ac4d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NumberType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_bson_binary</definition>
        <argsstring>(const NumberType len, binary_t &amp;result)</argsstring>
        <name>get_bson_binary</name>
        <param>
          <type>const NumberType</type>
          <declname>len</declname>
        </param>
        <param>
          <type>binary_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Parses a byte array input of length <emphasis>len</emphasis> from the BSON input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the byte array to be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the binary variable where the read array is to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NumberType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the length <emphasis>len</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>len &gt;= 0 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the byte array was successfully parsed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9390" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9390" bodyend="9405"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a510e89bbd4e8940bc726f5840c318221" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_bson_element_internal</definition>
        <argsstring>(const char_int_type element_type, const std::size_t element_type_parse_position)</argsstring>
        <name>parse_bson_element_internal</name>
        <param>
          <type>const char_int_type</type>
          <declname>element_type</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>element_type_parse_position</declname>
        </param>
        <briefdescription>
<para>Read a BSON document element of the given <emphasis>element_type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">element_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The BSON element type, c.f. <ulink url="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">element_type_parse_position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in the input stream, where the <computeroutput>element_type</computeroutput> was read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Not all BSON element types are supported yet. An unsupported <emphasis>element_type</emphasis> will give rise to a parse_error.114: Unsupported BSON record type 0x... </para>
</simplesect>
<simplesect kind="return"><para>whether a valid BSON-object/array was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9417" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9417" bodyend="9483"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a29ecec318fab8ccfa64b0e75536a40e4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_bson_element_list</definition>
        <argsstring>(const bool is_array)</argsstring>
        <name>parse_bson_element_list</name>
        <param>
          <type>const bool</type>
          <declname>is_array</declname>
        </param>
        <briefdescription>
<para>Read a BSON element list (as specified in the BSON-spec) </para>
        </briefdescription>
        <detaileddescription>
<para>The same binary layout is used for objects and arrays, hence it must be indicated with the argument <emphasis>is_array</emphasis> which one is expected (true --&gt; array, false --&gt; object).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines if the element list being read is to be treated as an object (<emphasis>is_array</emphasis> == false), or as an array (<emphasis>is_array</emphasis> == true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether a valid BSON-object/array was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9497" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9497" bodyend="9529"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a0c82ebf5d8e4007304e5d4a2158d47c8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_bson_array</definition>
        <argsstring>()</argsstring>
        <name>parse_bson_array</name>
        <briefdescription>
<para>Reads an array from the BSON input and passes it to the SAX-parser. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether a valid BSON-array was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9535" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9535" bodyend="9551"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1abf6970bcdc650b3290b25767eb696685" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_cbor_internal</definition>
        <argsstring>(const bool get_char, const cbor_tag_handler_t tag_handler)</argsstring>
        <name>parse_cbor_internal</name>
        <param>
          <type>const bool</type>
          <declname>get_char</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">get_char</parametername>
</parameternamelist>
<parameterdescription>
<para>whether a new character should be retrieved from the input (true) or whether the last read character should be considered instead (false) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how CBOR tags should be treated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether a valid CBOR value was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9565" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9565" bodyend="10043"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1af739624b7c49bb1a0bc70ac6f5066a24" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_cbor_string</definition>
        <argsstring>(string_t &amp;result)</argsstring>
        <name>get_cbor_string</name>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>reads a CBOR string </para>
        </briefdescription>
        <detaileddescription>
<para>This function first reads starting bytes to determine the expected string length and then copies this number of bytes into a string. Additionally, CBOR&apos;s strings with indefinite lengths are supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>created string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether string creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10056" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10056" bodyend="10139"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a6fcde744e6311dc0646735123ee83831" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_cbor_binary</definition>
        <argsstring>(binary_t &amp;result)</argsstring>
        <name>get_cbor_binary</name>
        <param>
          <type>binary_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>reads a CBOR byte array </para>
        </briefdescription>
        <detaileddescription>
<para>This function first reads starting bytes to determine the expected byte array length and then copies this number of bytes into the byte array. Additionally, CBOR&apos;s byte arrays with indefinite lengths are supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>created byte array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether byte array creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10152" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10152" bodyend="10239"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a90979b91cafd841cbb2014632274a96a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_cbor_array</definition>
        <argsstring>(const std::size_t len, const cbor_tag_handler_t tag_handler)</argsstring>
        <name>get_cbor_array</name>
        <param>
          <type>const std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the array or static_cast&lt;std::size_t&gt;(-1) for an array of indefinite size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how CBOR tags should be treated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether array creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10247" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10247" bodyend="10277"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a6a8ec4dc630e18ebacca8fb90f2b9b37" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_cbor_object</definition>
        <argsstring>(const std::size_t len, const cbor_tag_handler_t tag_handler)</argsstring>
        <name>get_cbor_object</name>
        <param>
          <type>const std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the object or static_cast&lt;std::size_t&gt;(-1) for an object of indefinite size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how CBOR tags should be treated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether object creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10285" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10285" bodyend="10332"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a2d96e387bda511bc8048c672113040f1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_msgpack_internal</definition>
        <argsstring>()</argsstring>
        <name>parse_msgpack_internal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether a valid MessagePack value was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10341" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10341" bodyend="10710"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a39289c89b50b1d53cd6e066f50ad2f01" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_msgpack_string</definition>
        <argsstring>(string_t &amp;result)</argsstring>
        <name>get_msgpack_string</name>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>reads a MessagePack string </para>
        </briefdescription>
        <detaileddescription>
<para>This function first reads starting bytes to determine the expected string length and then copies this number of bytes into a string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>created string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether string creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10722" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10722" bodyend="10793"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1aa2ebaeb5c91cb3065ffd8ad29c1e50e9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_msgpack_binary</definition>
        <argsstring>(binary_t &amp;result)</argsstring>
        <name>get_msgpack_binary</name>
        <param>
          <type>binary_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>reads a MessagePack byte array </para>
        </briefdescription>
        <detaileddescription>
<para>This function first reads starting bytes to determine the expected byte array length and then copies this number of bytes into a byte array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>created byte array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether byte array creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10805" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10805" bodyend="10910"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a975b19d6df6ec36e98a893bde5c48a08" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_msgpack_array</definition>
        <argsstring>(const std::size_t len)</argsstring>
        <name>get_msgpack_array</name>
        <param>
          <type>const std::size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether array creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10916" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10916" bodyend="10932"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a56e6f4b666a07df7687d43fc470a781d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_msgpack_object</definition>
        <argsstring>(const std::size_t len)</argsstring>
        <name>get_msgpack_object</name>
        <param>
          <type>const std::size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether object creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10938" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10938" bodyend="10962"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1aabd1d5a1377a2f3b43a78fd765d95849" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::parse_ubjson_internal</definition>
        <argsstring>(const bool get_char=true)</argsstring>
        <name>parse_ubjson_internal</name>
        <param>
          <type>const bool</type>
          <declname>get_char</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">get_char</parametername>
</parameternamelist>
<parameterdescription>
<para>whether a new character should be retrieved from the input (true, default) or whether the last read character should be considered instead</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether a valid UBJSON value was passed to the SAX parser </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10975" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10975" bodyend="10978"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1ade7bfc83c8db15b0b4e60dd89c4fbac6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_string</definition>
        <argsstring>(string_t &amp;result, const bool get_char=true)</argsstring>
        <name>get_ubjson_string</name>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>get_char</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>reads a UBJSON string </para>
        </briefdescription>
        <detaileddescription>
<para>This function is either called after reading the &apos;S&apos; byte explicitly indicating a string, or in case of an object key where the &apos;S&apos; byte can be left out.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>created string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">get_char</parametername>
</parameternamelist>
<parameterdescription>
<para>whether a new character should be retrieved from the input (true, default) or whether the last read character should be considered instead</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether string creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="10994" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="10994" bodyend="11083"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a468f6555260ea65d96b91dfd6547f2d6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_ndarray_size</definition>
        <argsstring>(std::vector&lt; size_t &gt; &amp;dim)</argsstring>
        <name>get_ubjson_ndarray_size</name>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer vector storing the ND array dimensions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether reading ND array size vector is successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11089" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11089" bodyend="11141"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1abcd1952c7d1c9f4b5f93da9f62e23320" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_size_value</definition>
        <argsstring>(std::size_t &amp;result, bool &amp;is_ndarray, char_int_type prefix=0)</argsstring>
        <name>get_ubjson_size_value</name>
        <param>
          <type>std::size_t &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>is_ndarray</declname>
        </param>
        <param>
          <type>char_int_type</type>
          <declname>prefix</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>determined size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">is_ndarray</parametername>
</parameternamelist>
<parameterdescription>
<para>for input, <computeroutput>true</computeroutput> means already inside an ndarray vector or ndarray dimension is not allowed; <computeroutput>false</computeroutput> means ndarray is allowed; for output, <computeroutput>true</computeroutput> means an ndarray is found; is_ndarray can only return <computeroutput>true</computeroutput> when its initial value is <computeroutput>false</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>type marker if already read, otherwise set to 0</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether size determination completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11154" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11154" bodyend="11364"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a0380c1d2d3332eddf36105009ff8f9fb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_size_type</definition>
        <argsstring>(std::pair&lt; std::size_t, char_int_type &gt; &amp;result, bool inside_ndarray=false)</argsstring>
        <name>get_ubjson_size_type</name>
        <param>
          <type>std::pair&lt; std::size_t, char_int_type &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inside_ndarray</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>determine the type and size for a container </para>
        </briefdescription>
        <detaileddescription>
<para>In the optimized UBJSON format, a type and a size can be provided to allow for a more compact representation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>pair of the size and the type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inside_ndarray</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the parser is parsing an ND array dimensional vector</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether pair creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11377" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11377" bodyend="11438"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a45cdf02020f3bc5c27fada582f37516c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_value</definition>
        <argsstring>(const char_int_type prefix)</argsstring>
        <name>get_ubjson_value</name>
        <param>
          <type>const char_int_type</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>the previously read or set type prefix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether value creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11444" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11444" bodyend="11622"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a87e4355139f3a972aa456a3ed465606e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_array</definition>
        <argsstring>()</argsstring>
        <name>get_ubjson_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether array creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11627" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11627" bodyend="11730"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1ad579eccbac92a913ebe15a4341c4daad" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_object</definition>
        <argsstring>()</argsstring>
        <name>get_ubjson_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether object creation completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11735" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11735" bodyend="11813"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a3e86be40b4ec5679c13147056fb089c8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_high_precision_number</definition>
        <argsstring>()</argsstring>
        <name>get_ubjson_high_precision_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11818" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11818" bodyend="11882"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a9aeb80d0dd19032e1b2128b3f093a794" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char_int_type</type>
        <definition>char_int_type detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>get next character from the input </para>
        </briefdescription>
        <detaileddescription>
<para>This function provides the interface to the used input adapter. It does not throw in case the input reached EOF, but returns a -&apos;ve valued <computeroutput><ref refid="structdetail_1_1char__traits" kindref="compound">char_traits</ref>&lt;char_type&gt;::eof()</computeroutput> in that case.</para>
<para><simplesect kind="return"><para>character read from the input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11897" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11897" bodyend="11901"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a451f9cb2d990780be3b6ffea6223134b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char_int_type</type>
        <definition>char_int_type detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ignore_noop</definition>
        <argsstring>()</argsstring>
        <name>get_ignore_noop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>character read from the input after ignoring all &apos;N&apos; entries </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11906" column="19" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11906" bodyend="11915"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a809c1fd4598b7d4cecaf93aaf1547205" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NumberType</type>
          </param>
          <param>
            <type>bool</type>
            <declname>InputIsLittleEndian</declname>
            <defname>InputIsLittleEndian</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_number</definition>
        <argsstring>(const input_format_t format, NumberType &amp;result)</argsstring>
        <name>get_number</name>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>NumberType &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11933" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11933" bodyend="11959"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a0378b0788080dd6ba0eaaaa7aab855bf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NumberType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_string</definition>
        <argsstring>(const input_format_t format, const NumberType len, string_t &amp;result)</argsstring>
        <name>get_string</name>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const NumberType</type>
          <declname>len</declname>
        </param>
        <param>
          <type>string_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>create a string by reading characters from the input </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NumberType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the current format (for diagnostics) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of characters to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>string created by reading <emphasis>len</emphasis> bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether string creation completed</para>
</simplesect>
<simplesect kind="note"><para>We can not reserve <emphasis>len</emphasis> bytes for the result, because <emphasis>len</emphasis> may be too large. Usually, unexpect_eof() detects the end of the input before we run out of string memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="11976" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="11976" bodyend="11992"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a3ec63657f0ece66358be99ee7ec46c1f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NumberType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_binary</definition>
        <argsstring>(const input_format_t format, const NumberType len, binary_t &amp;result)</argsstring>
        <name>get_binary</name>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const NumberType</type>
          <declname>len</declname>
        </param>
        <param>
          <type>binary_t &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>create a byte array by reading bytes from the input </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NumberType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the current format (for diagnostics) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>byte array created by reading <emphasis>len</emphasis> bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether byte array creation completed</para>
</simplesect>
<simplesect kind="note"><para>We can not reserve <emphasis>len</emphasis> bytes for the result, because <emphasis>len</emphasis> may be too large. Usually, unexpect_eof() detects the end of the input before we run out of memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12009" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12009" bodyend="12025"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a86d19cc231aae395395030fd8ae19fd5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::unexpect_eof</definition>
        <argsstring>(const input_format_t format, const char *context) const</argsstring>
        <name>unexpect_eof</name>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the current format (for diagnostics) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>further context information (for diagnostics) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the last read character is not EOF </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12033" column="10" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12033" bodyend="12041"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a2ef89c65a295e23efa6d7363fafc84cc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_token_string</definition>
        <argsstring>() const</argsstring>
        <name>get_token_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string representation of the last read byte </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12046" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12046" bodyend="12051"/>
      </memberdef>
      <memberdef kind="function" id="classdetail_1_1binary__reader_1a39c740811882a0023f6386858a5d5270" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::exception_message</definition>
        <argsstring>(const input_format_t format, const std::string &amp;detail, const std::string &amp;context) const</argsstring>
        <name>exception_message</name>
        <param>
          <type>const <ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>detail</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the current format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">detail</parametername>
</parameternamelist>
<parameterdescription>
<para>a detailed error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>further context information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a message string to use in the <ref refid="classdetail_1_1parse__error" kindref="compound">parse_error</ref> exceptions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="12059" column="17" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="12059" bodyend="12093"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>deserialization of CBOR, MessagePack, and UBJSON values </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" line="9212" column="1" bodyfile="/home/alex/qi3/rlenvs_from_cpp/src/rlenvs/extern/nlohmann/json/json.hpp" bodystart="9213" bodyend="12147"/>
    <listofallmembers>
      <member refid="classdetail_1_1binary__reader_1a98249fa39fdf9d84bb650bee0463be73" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>__pad0__</name></member>
      <member refid="classdetail_1_1binary__reader_1a5dc3e9216177efe30686876d3faccf52" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>binary_reader</name></member>
      <member refid="classdetail_1_1binary__reader_1a03d3ad5fd319550b8ca4e54ddcf46ba0" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>binary_reader</name></member>
      <member refid="classdetail_1_1binary__reader_1a4197fcaec6f876fd9019c0f6a48c7f0d" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>binary_reader</name></member>
      <member refid="classdetail_1_1binary__reader_1a64e41342c6f297ad51df1af200c7cea8" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>binary_t</name></member>
      <member refid="classdetail_1_1binary__reader_1a186a82ba6aab7a716dbc690bb93844c0" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>bjd_type</name></member>
      <member refid="classdetail_1_1binary__reader_1ac0dcae9c2ba34117b8ac6dd11830364d" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>bjd_types_map</name></member>
      <member refid="classdetail_1_1binary__reader_1a5cf8feaa556ca5b844f538faffd25ace" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>char_int_type</name></member>
      <member refid="classdetail_1_1binary__reader_1a2d386b0e8277c44c879a75db5ec7d6ab" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>char_type</name></member>
      <member refid="classdetail_1_1binary__reader_1a1020433fa639ee6d3766d7f6465d7131" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>chars_read</name></member>
      <member refid="classdetail_1_1binary__reader_1a933e3ceca7a616980ae13f3c559c84ba" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>current</name></member>
      <member refid="classdetail_1_1binary__reader_1a39c740811882a0023f6386858a5d5270" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>exception_message</name></member>
      <member refid="classdetail_1_1binary__reader_1a9aeb80d0dd19032e1b2128b3f093a794" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get</name></member>
      <member refid="classdetail_1_1binary__reader_1a3ec63657f0ece66358be99ee7ec46c1f" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_binary</name></member>
      <member refid="classdetail_1_1binary__reader_1afd4a59072e687d5d07f53d7320a4ac4d" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_bson_binary</name></member>
      <member refid="classdetail_1_1binary__reader_1a899a51f4cd0ad49a8989de586f9dd7a2" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_bson_cstr</name></member>
      <member refid="classdetail_1_1binary__reader_1ad8eda2acffbc76cb622e6f52a13bebea" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_bson_string</name></member>
      <member refid="classdetail_1_1binary__reader_1a90979b91cafd841cbb2014632274a96a" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_cbor_array</name></member>
      <member refid="classdetail_1_1binary__reader_1a6fcde744e6311dc0646735123ee83831" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_cbor_binary</name></member>
      <member refid="classdetail_1_1binary__reader_1a6a8ec4dc630e18ebacca8fb90f2b9b37" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_cbor_object</name></member>
      <member refid="classdetail_1_1binary__reader_1af739624b7c49bb1a0bc70ac6f5066a24" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_cbor_string</name></member>
      <member refid="classdetail_1_1binary__reader_1a451f9cb2d990780be3b6ffea6223134b" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ignore_noop</name></member>
      <member refid="classdetail_1_1binary__reader_1a975b19d6df6ec36e98a893bde5c48a08" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_msgpack_array</name></member>
      <member refid="classdetail_1_1binary__reader_1aa2ebaeb5c91cb3065ffd8ad29c1e50e9" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_msgpack_binary</name></member>
      <member refid="classdetail_1_1binary__reader_1a56e6f4b666a07df7687d43fc470a781d" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_msgpack_object</name></member>
      <member refid="classdetail_1_1binary__reader_1a39289c89b50b1d53cd6e066f50ad2f01" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_msgpack_string</name></member>
      <member refid="classdetail_1_1binary__reader_1a809c1fd4598b7d4cecaf93aaf1547205" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_number</name></member>
      <member refid="classdetail_1_1binary__reader_1a0378b0788080dd6ba0eaaaa7aab855bf" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_string</name></member>
      <member refid="classdetail_1_1binary__reader_1a2ef89c65a295e23efa6d7363fafc84cc" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_token_string</name></member>
      <member refid="classdetail_1_1binary__reader_1a87e4355139f3a972aa456a3ed465606e" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_array</name></member>
      <member refid="classdetail_1_1binary__reader_1a3e86be40b4ec5679c13147056fb089c8" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_high_precision_number</name></member>
      <member refid="classdetail_1_1binary__reader_1a468f6555260ea65d96b91dfd6547f2d6" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_ndarray_size</name></member>
      <member refid="classdetail_1_1binary__reader_1ad579eccbac92a913ebe15a4341c4daad" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_object</name></member>
      <member refid="classdetail_1_1binary__reader_1a0380c1d2d3332eddf36105009ff8f9fb" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_size_type</name></member>
      <member refid="classdetail_1_1binary__reader_1abcd1952c7d1c9f4b5f93da9f62e23320" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_size_value</name></member>
      <member refid="classdetail_1_1binary__reader_1ade7bfc83c8db15b0b4e60dd89c4fbac6" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_string</name></member>
      <member refid="classdetail_1_1binary__reader_1a45cdf02020f3bc5c27fada582f37516c" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>get_ubjson_value</name></member>
      <member refid="classdetail_1_1binary__reader_1a3d343cad08995ebeba7b0ab01cd36a66" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>ia</name></member>
      <member refid="classdetail_1_1binary__reader_1afcca9f2688a382abf342e25ea63eceba" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>input_format</name></member>
      <member refid="classdetail_1_1binary__reader_1a35e8954d616d21c153211c0e396aba97" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>is_little_endian</name></member>
      <member refid="classdetail_1_1binary__reader_1abc518b68559199b111514a68f2be2d66" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>json_sax_t</name></member>
      <member refid="classdetail_1_1binary__reader_1a9853508f38bdc65a3fca5c9523395592" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>npos</name></member>
      <member refid="classdetail_1_1binary__reader_1a9f35dbfbad495dbf13d89d749589d452" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>number_float_t</name></member>
      <member refid="classdetail_1_1binary__reader_1a81a846e1a1a3205d2b79f279acb72997" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>number_integer_t</name></member>
      <member refid="classdetail_1_1binary__reader_1a387c1c1b48f4bfbfd91745c320916cb2" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>number_unsigned_t</name></member>
      <member refid="classdetail_1_1binary__reader_1acd9e98648355f3d99061569b092d9cf8" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>operator=</name></member>
      <member refid="classdetail_1_1binary__reader_1ac14902d436b99bc798a69c370755a84d" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>operator=</name></member>
      <member refid="classdetail_1_1binary__reader_1a0c82ebf5d8e4007304e5d4a2158d47c8" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_bson_array</name></member>
      <member refid="classdetail_1_1binary__reader_1a510e89bbd4e8940bc726f5840c318221" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_bson_element_internal</name></member>
      <member refid="classdetail_1_1binary__reader_1a29ecec318fab8ccfa64b0e75536a40e4" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_bson_element_list</name></member>
      <member refid="classdetail_1_1binary__reader_1a66514e22cb51ce5030b77376c1f701ec" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_bson_internal</name></member>
      <member refid="classdetail_1_1binary__reader_1abf6970bcdc650b3290b25767eb696685" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_cbor_internal</name></member>
      <member refid="classdetail_1_1binary__reader_1a2d96e387bda511bc8048c672113040f1" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_msgpack_internal</name></member>
      <member refid="classdetail_1_1binary__reader_1aabd1d5a1377a2f3b43a78fd765d95849" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>parse_ubjson_internal</name></member>
      <member refid="classdetail_1_1binary__reader_1a012edbf7ba414b1646c7ccc30bae342c" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>sax</name></member>
      <member refid="classdetail_1_1binary__reader_1a8e1b5452ae426e1d7b48761859e7f52d" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>sax_parse</name></member>
      <member refid="classdetail_1_1binary__reader_1a0ee67ae79f387747a4a7c7fd9bfbc001" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>string_t</name></member>
      <member refid="classdetail_1_1binary__reader_1a86d19cc231aae395395030fd8ae19fd5" prot="private" virt="non-virtual"><scope>detail::binary_reader</scope><name>unexpect_eof</name></member>
      <member refid="classdetail_1_1binary__reader_1a99eaa03613e1af4db21fe9f1a1d0cf14" prot="public" virt="non-virtual"><scope>detail::binary_reader</scope><name>~binary_reader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
